
GameRender.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007110  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a2c  080071cc  080071cc  000081cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bf8  08007bf8  00009088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007bf8  08007bf8  00008bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c00  08007c00  00009088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c00  08007c00  00008c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c04  08007c04  00008c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08007c08  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ca0  20000088  08007c90  00009088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002d28  08007c90  00009d28  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108ee  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002eb9  00000000  00000000  0001999e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  0001c858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000abc  00000000  00000000  0001d630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001967c  00000000  00000000  0001e0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000143a4  00000000  00000000  00037768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099e7f  00000000  00000000  0004bb0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e598b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034a0  00000000  00000000  000e59d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000e8e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000088 	.word	0x20000088
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080071b4 	.word	0x080071b4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000008c 	.word	0x2000008c
 8000100:	080071b4 	.word	0x080071b4

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	@ (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	@ (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8d8 	bl	8000618 <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8d3 	bl	8000618 <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	d434      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047a:	469b      	mov	fp, r3
 800047c:	4653      	mov	r3, sl
 800047e:	465a      	mov	r2, fp
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83b      	bhi.n	8000508 <__udivmoddi4+0xc4>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e079      	b.n	800058a <__udivmoddi4+0x146>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e076      	b.n	8000590 <__udivmoddi4+0x14c>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e029      	b.n	8000510 <__udivmoddi4+0xcc>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	469b      	mov	fp, r3
 80004e8:	2320      	movs	r3, #32
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	4652      	mov	r2, sl
 80004ee:	40da      	lsrs	r2, r3
 80004f0:	4641      	mov	r1, r8
 80004f2:	0013      	movs	r3, r2
 80004f4:	464a      	mov	r2, r9
 80004f6:	408a      	lsls	r2, r1
 80004f8:	0017      	movs	r7, r2
 80004fa:	4642      	mov	r2, r8
 80004fc:	431f      	orrs	r7, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	4093      	lsls	r3, r2
 8000502:	001e      	movs	r6, r3
 8000504:	42af      	cmp	r7, r5
 8000506:	d9c3      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000508:	2200      	movs	r2, #0
 800050a:	2300      	movs	r3, #0
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	4643      	mov	r3, r8
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0d8      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000516:	07fb      	lsls	r3, r7, #31
 8000518:	0872      	lsrs	r2, r6, #1
 800051a:	431a      	orrs	r2, r3
 800051c:	4646      	mov	r6, r8
 800051e:	087b      	lsrs	r3, r7, #1
 8000520:	e00e      	b.n	8000540 <__udivmoddi4+0xfc>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d101      	bne.n	800052a <__udivmoddi4+0xe6>
 8000526:	42a2      	cmp	r2, r4
 8000528:	d80c      	bhi.n	8000544 <__udivmoddi4+0x100>
 800052a:	1aa4      	subs	r4, r4, r2
 800052c:	419d      	sbcs	r5, r3
 800052e:	2001      	movs	r0, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2100      	movs	r1, #0
 8000536:	3e01      	subs	r6, #1
 8000538:	1824      	adds	r4, r4, r0
 800053a:	414d      	adcs	r5, r1
 800053c:	2e00      	cmp	r6, #0
 800053e:	d006      	beq.n	800054e <__udivmoddi4+0x10a>
 8000540:	42ab      	cmp	r3, r5
 8000542:	d9ee      	bls.n	8000522 <__udivmoddi4+0xde>
 8000544:	3e01      	subs	r6, #1
 8000546:	1924      	adds	r4, r4, r4
 8000548:	416d      	adcs	r5, r5
 800054a:	2e00      	cmp	r6, #0
 800054c:	d1f8      	bne.n	8000540 <__udivmoddi4+0xfc>
 800054e:	9800      	ldr	r0, [sp, #0]
 8000550:	9901      	ldr	r1, [sp, #4]
 8000552:	465b      	mov	r3, fp
 8000554:	1900      	adds	r0, r0, r4
 8000556:	4169      	adcs	r1, r5
 8000558:	2b00      	cmp	r3, #0
 800055a:	db24      	blt.n	80005a6 <__udivmoddi4+0x162>
 800055c:	002b      	movs	r3, r5
 800055e:	465a      	mov	r2, fp
 8000560:	4644      	mov	r4, r8
 8000562:	40d3      	lsrs	r3, r2
 8000564:	002a      	movs	r2, r5
 8000566:	40e2      	lsrs	r2, r4
 8000568:	001c      	movs	r4, r3
 800056a:	465b      	mov	r3, fp
 800056c:	0015      	movs	r5, r2
 800056e:	2b00      	cmp	r3, #0
 8000570:	db2a      	blt.n	80005c8 <__udivmoddi4+0x184>
 8000572:	0026      	movs	r6, r4
 8000574:	409e      	lsls	r6, r3
 8000576:	0033      	movs	r3, r6
 8000578:	0026      	movs	r6, r4
 800057a:	4647      	mov	r7, r8
 800057c:	40be      	lsls	r6, r7
 800057e:	0032      	movs	r2, r6
 8000580:	1a80      	subs	r0, r0, r2
 8000582:	4199      	sbcs	r1, r3
 8000584:	9000      	str	r0, [sp, #0]
 8000586:	9101      	str	r1, [sp, #4]
 8000588:	e79e      	b.n	80004c8 <__udivmoddi4+0x84>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d8bc      	bhi.n	8000508 <__udivmoddi4+0xc4>
 800058e:	e782      	b.n	8000496 <__udivmoddi4+0x52>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	2100      	movs	r1, #0
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	2200      	movs	r2, #0
 800059a:	9100      	str	r1, [sp, #0]
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	2201      	movs	r2, #1
 80005a0:	40da      	lsrs	r2, r3
 80005a2:	9201      	str	r2, [sp, #4]
 80005a4:	e785      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2320      	movs	r3, #32
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	002a      	movs	r2, r5
 80005ae:	4646      	mov	r6, r8
 80005b0:	409a      	lsls	r2, r3
 80005b2:	0023      	movs	r3, r4
 80005b4:	40f3      	lsrs	r3, r6
 80005b6:	4644      	mov	r4, r8
 80005b8:	4313      	orrs	r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	40e2      	lsrs	r2, r4
 80005be:	001c      	movs	r4, r3
 80005c0:	465b      	mov	r3, fp
 80005c2:	0015      	movs	r5, r2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dad4      	bge.n	8000572 <__udivmoddi4+0x12e>
 80005c8:	4642      	mov	r2, r8
 80005ca:	002f      	movs	r7, r5
 80005cc:	2320      	movs	r3, #32
 80005ce:	0026      	movs	r6, r4
 80005d0:	4097      	lsls	r7, r2
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	40de      	lsrs	r6, r3
 80005d6:	003b      	movs	r3, r7
 80005d8:	4333      	orrs	r3, r6
 80005da:	e7cd      	b.n	8000578 <__udivmoddi4+0x134>

080005dc <__clzsi2>:
 80005dc:	211c      	movs	r1, #28
 80005de:	2301      	movs	r3, #1
 80005e0:	041b      	lsls	r3, r3, #16
 80005e2:	4298      	cmp	r0, r3
 80005e4:	d301      	bcc.n	80005ea <__clzsi2+0xe>
 80005e6:	0c00      	lsrs	r0, r0, #16
 80005e8:	3910      	subs	r1, #16
 80005ea:	0a1b      	lsrs	r3, r3, #8
 80005ec:	4298      	cmp	r0, r3
 80005ee:	d301      	bcc.n	80005f4 <__clzsi2+0x18>
 80005f0:	0a00      	lsrs	r0, r0, #8
 80005f2:	3908      	subs	r1, #8
 80005f4:	091b      	lsrs	r3, r3, #4
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0x22>
 80005fa:	0900      	lsrs	r0, r0, #4
 80005fc:	3904      	subs	r1, #4
 80005fe:	a202      	add	r2, pc, #8	@ (adr r2, 8000608 <__clzsi2+0x2c>)
 8000600:	5c10      	ldrb	r0, [r2, r0]
 8000602:	1840      	adds	r0, r0, r1
 8000604:	4770      	bx	lr
 8000606:	46c0      	nop			@ (mov r8, r8)
 8000608:	02020304 	.word	0x02020304
 800060c:	01010101 	.word	0x01010101
	...

08000618 <__clzdi2>:
 8000618:	b510      	push	{r4, lr}
 800061a:	2900      	cmp	r1, #0
 800061c:	d103      	bne.n	8000626 <__clzdi2+0xe>
 800061e:	f7ff ffdd 	bl	80005dc <__clzsi2>
 8000622:	3020      	adds	r0, #32
 8000624:	e002      	b.n	800062c <__clzdi2+0x14>
 8000626:	0008      	movs	r0, r1
 8000628:	f7ff ffd8 	bl	80005dc <__clzsi2>
 800062c:	bd10      	pop	{r4, pc}
 800062e:	46c0      	nop			@ (mov r8, r8)

08000630 <Engine_SetLogicTick>:
#include "stm32g0xx_hal.h"

static uint32_t logic_tick_ms = 50;   /* default 20 Hz */
static uint32_t render_tick_ms = 33;  /* default ~30 Hz */

void Engine_SetLogicTick(uint32_t ms){ if(ms) logic_tick_ms = ms; }
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d002      	beq.n	8000644 <Engine_SetLogicTick+0x14>
 800063e:	4b03      	ldr	r3, [pc, #12]	@ (800064c <Engine_SetLogicTick+0x1c>)
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	46c0      	nop			@ (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	b002      	add	sp, #8
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000000 	.word	0x20000000

08000650 <Engine_SetRenderTick>:
void Engine_SetRenderTick(uint32_t ms){ if(ms) render_tick_ms = ms; }
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d002      	beq.n	8000664 <Engine_SetRenderTick+0x14>
 800065e:	4b03      	ldr	r3, [pc, #12]	@ (800066c <Engine_SetRenderTick+0x1c>)
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	46c0      	nop			@ (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	b002      	add	sp, #8
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000004 	.word	0x20000004

08000670 <Engine_Init>:

void Engine_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
    /* init subsisteme (TFT driver must be initialized before, from main) */
    Render_Init();
 8000674:	f000 fe72 	bl	800135c <Render_Init>
    Input_Init();
 8000678:	f000 fd34 	bl	80010e4 <Input_Init>
    GameObject_Init();
 800067c:	f000 f856 	bl	800072c <GameObject_Init>

    /* call user Start() to create sprites/objects/etc. */
    Start();
 8000680:	f003 f804 	bl	800368c <Start>
}
 8000684:	46c0      	nop			@ (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <Engine_RunLoop>:

void Engine_RunLoop(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
    uint32_t last_logic = HAL_GetTick();
 8000692:	f003 f9a7 	bl	80039e4 <HAL_GetTick>
 8000696:	0003      	movs	r3, r0
 8000698:	60fb      	str	r3, [r7, #12]
    uint32_t last_render = HAL_GetTick();
 800069a:	f003 f9a3 	bl	80039e4 <HAL_GetTick>
 800069e:	0003      	movs	r3, r0
 80006a0:	60bb      	str	r3, [r7, #8]

    while(1)
    {
        /* 1) Poll input as often as possible */
        Input_Poll();
 80006a2:	f000 fd59 	bl	8001158 <Input_Poll>

        uint32_t now = HAL_GetTick();
 80006a6:	f003 f99d 	bl	80039e4 <HAL_GetTick>
 80006aa:	0003      	movs	r3, r0
 80006ac:	607b      	str	r3, [r7, #4]

        /* 2) Logic tick */
        if((now - last_logic) >= logic_tick_ms)
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	1ad2      	subs	r2, r2, r3
 80006b4:	4b13      	ldr	r3, [pc, #76]	@ (8000704 <Engine_RunLoop+0x78>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d30f      	bcc.n	80006dc <Engine_RunLoop+0x50>
        {
            uint32_t dt = now - last_logic;
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	603b      	str	r3, [r7, #0]

            /* user update */
            Update();
 80006c4:	f003 f8d4 	bl	8003870 <Update>

            /* per-object logic & animation processing */
            GameObject_ProcessLogic(dt);
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	0018      	movs	r0, r3
 80006cc:	f000 fb80 	bl	8000dd0 <GameObject_ProcessLogic>
            GameObject_ProcessAnimation(dt);
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	0018      	movs	r0, r3
 80006d4:	f000 fbbc 	bl	8000e50 <GameObject_ProcessAnimation>

            last_logic = now;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	60fb      	str	r3, [r7, #12]
        }

        /* 3) Render tick */
        if((now - last_render) >= render_tick_ms)
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	1ad2      	subs	r2, r2, r3
 80006e2:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <Engine_RunLoop+0x7c>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	429a      	cmp	r2, r3
 80006e8:	d307      	bcc.n	80006fa <Engine_RunLoop+0x6e>
        {
            /* optional user render hook (background, UI) */
            Render();
 80006ea:	f003 f8c7 	bl	800387c <Render>

            /* queue render of engine-managed objects */
           GameObject_RenderAll();
 80006ee:	f000 fc31 	bl	8000f54 <GameObject_RenderAll>

            /* flush renderer queue to display */
            Render_Process();
 80006f2:	f000 ff6b 	bl	80015cc <Render_Process>

            last_render = now;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	60bb      	str	r3, [r7, #8]
        }

        /* small sleep to yield CPU (keep it small) */
        HAL_Delay(1);
 80006fa:	2001      	movs	r0, #1
 80006fc:	f003 f97c 	bl	80039f8 <HAL_Delay>
    {
 8000700:	e7cf      	b.n	80006a2 <Engine_RunLoop+0x16>
 8000702:	46c0      	nop			@ (mov r8, r8)
 8000704:	20000000 	.word	0x20000000
 8000708:	20000004 	.word	0x20000004

0800070c <GameObject_SetBackgroundColor>:
/* objects pool (using type from header) */
static GameObject objects[MAX_OBJECTS];
static BgRedrawCb bg_cb = NULL;
static uint16_t redraw_bg_color = 0x0000;

void GameObject_SetBackgroundColor(uint16_t color){    redraw_bg_color = color;}
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	0002      	movs	r2, r0
 8000714:	1dbb      	adds	r3, r7, #6
 8000716:	801a      	strh	r2, [r3, #0]
 8000718:	4b03      	ldr	r3, [pc, #12]	@ (8000728 <GameObject_SetBackgroundColor+0x1c>)
 800071a:	1dba      	adds	r2, r7, #6
 800071c:	8812      	ldrh	r2, [r2, #0]
 800071e:	801a      	strh	r2, [r3, #0]
 8000720:	46c0      	nop			@ (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	b002      	add	sp, #8
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20001eb0 	.word	0x20001eb0

0800072c <GameObject_Init>:

void GameObject_SetBgRedrawCallback(BgRedrawCb cb){ bg_cb = cb; }

void GameObject_Init(void){
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
    memset(sprites, 0, sizeof(sprites));
 8000730:	23c0      	movs	r3, #192	@ 0xc0
 8000732:	009a      	lsls	r2, r3, #2
 8000734:	4b0d      	ldr	r3, [pc, #52]	@ (800076c <GameObject_Init+0x40>)
 8000736:	2100      	movs	r1, #0
 8000738:	0018      	movs	r0, r3
 800073a:	f006 f8c1 	bl	80068c0 <memset>
    sprite_count = 0;
 800073e:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <GameObject_Init+0x44>)
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
    memset(anims, 0, sizeof(anims));
 8000744:	2380      	movs	r3, #128	@ 0x80
 8000746:	005a      	lsls	r2, r3, #1
 8000748:	4b0a      	ldr	r3, [pc, #40]	@ (8000774 <GameObject_Init+0x48>)
 800074a:	2100      	movs	r1, #0
 800074c:	0018      	movs	r0, r3
 800074e:	f006 f8b7 	bl	80068c0 <memset>
    anim_count = 0;
 8000752:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <GameObject_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
    memset(objects, 0, sizeof(objects));
 8000758:	23d0      	movs	r3, #208	@ 0xd0
 800075a:	015a      	lsls	r2, r3, #5
 800075c:	4b07      	ldr	r3, [pc, #28]	@ (800077c <GameObject_Init+0x50>)
 800075e:	2100      	movs	r1, #0
 8000760:	0018      	movs	r0, r3
 8000762:	f006 f8ad 	bl	80068c0 <memset>
}
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	200000a4 	.word	0x200000a4
 8000770:	200003a4 	.word	0x200003a4
 8000774:	200003a8 	.word	0x200003a8
 8000778:	200004a8 	.word	0x200004a8
 800077c:	200004ac 	.word	0x200004ac

08000780 <GameObject_CreateSprite_Solid>:

/* Create sprite solid */
int GameObject_CreateSprite_Solid(uint16_t w, uint16_t h, uint16_t color){
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	0004      	movs	r4, r0
 8000788:	0008      	movs	r0, r1
 800078a:	0011      	movs	r1, r2
 800078c:	1dbb      	adds	r3, r7, #6
 800078e:	1c22      	adds	r2, r4, #0
 8000790:	801a      	strh	r2, [r3, #0]
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	1c02      	adds	r2, r0, #0
 8000796:	801a      	strh	r2, [r3, #0]
 8000798:	1cbb      	adds	r3, r7, #2
 800079a:	1c0a      	adds	r2, r1, #0
 800079c:	801a      	strh	r2, [r3, #0]
    if(sprite_count >= MAX_SPRITES) return -1;
 800079e:	4b24      	ldr	r3, [pc, #144]	@ (8000830 <GameObject_CreateSprite_Solid+0xb0>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b3f      	cmp	r3, #63	@ 0x3f
 80007a4:	dd02      	ble.n	80007ac <GameObject_CreateSprite_Solid+0x2c>
 80007a6:	2301      	movs	r3, #1
 80007a8:	425b      	negs	r3, r3
 80007aa:	e03c      	b.n	8000826 <GameObject_CreateSprite_Solid+0xa6>
    sprites[sprite_count].is_solid = 1;
 80007ac:	4b20      	ldr	r3, [pc, #128]	@ (8000830 <GameObject_CreateSprite_Solid+0xb0>)
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	4920      	ldr	r1, [pc, #128]	@ (8000834 <GameObject_CreateSprite_Solid+0xb4>)
 80007b2:	0013      	movs	r3, r2
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	189b      	adds	r3, r3, r2
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	2201      	movs	r2, #1
 80007bc:	545a      	strb	r2, [r3, r1]
    sprites[sprite_count].color = color;
 80007be:	4b1c      	ldr	r3, [pc, #112]	@ (8000830 <GameObject_CreateSprite_Solid+0xb0>)
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	491c      	ldr	r1, [pc, #112]	@ (8000834 <GameObject_CreateSprite_Solid+0xb4>)
 80007c4:	0013      	movs	r3, r2
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	189b      	adds	r3, r3, r2
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	18cb      	adds	r3, r1, r3
 80007ce:	3302      	adds	r3, #2
 80007d0:	1cba      	adds	r2, r7, #2
 80007d2:	8812      	ldrh	r2, [r2, #0]
 80007d4:	801a      	strh	r2, [r3, #0]
    sprites[sprite_count].pixels = NULL;
 80007d6:	4b16      	ldr	r3, [pc, #88]	@ (8000830 <GameObject_CreateSprite_Solid+0xb0>)
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	4916      	ldr	r1, [pc, #88]	@ (8000834 <GameObject_CreateSprite_Solid+0xb4>)
 80007dc:	0013      	movs	r3, r2
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	189b      	adds	r3, r3, r2
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	18cb      	adds	r3, r1, r3
 80007e6:	3304      	adds	r3, #4
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
    sprites[sprite_count].w = w;
 80007ec:	4b10      	ldr	r3, [pc, #64]	@ (8000830 <GameObject_CreateSprite_Solid+0xb0>)
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	4910      	ldr	r1, [pc, #64]	@ (8000834 <GameObject_CreateSprite_Solid+0xb4>)
 80007f2:	0013      	movs	r3, r2
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	189b      	adds	r3, r3, r2
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	18cb      	adds	r3, r1, r3
 80007fc:	3308      	adds	r3, #8
 80007fe:	1dba      	adds	r2, r7, #6
 8000800:	8812      	ldrh	r2, [r2, #0]
 8000802:	801a      	strh	r2, [r3, #0]
    sprites[sprite_count].h = h;
 8000804:	4b0a      	ldr	r3, [pc, #40]	@ (8000830 <GameObject_CreateSprite_Solid+0xb0>)
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	490a      	ldr	r1, [pc, #40]	@ (8000834 <GameObject_CreateSprite_Solid+0xb4>)
 800080a:	0013      	movs	r3, r2
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	189b      	adds	r3, r3, r2
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	18cb      	adds	r3, r1, r3
 8000814:	330a      	adds	r3, #10
 8000816:	1d3a      	adds	r2, r7, #4
 8000818:	8812      	ldrh	r2, [r2, #0]
 800081a:	801a      	strh	r2, [r3, #0]
    return sprite_count++;
 800081c:	4b04      	ldr	r3, [pc, #16]	@ (8000830 <GameObject_CreateSprite_Solid+0xb0>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	1c59      	adds	r1, r3, #1
 8000822:	4a03      	ldr	r2, [pc, #12]	@ (8000830 <GameObject_CreateSprite_Solid+0xb0>)
 8000824:	6011      	str	r1, [r2, #0]
}
 8000826:	0018      	movs	r0, r3
 8000828:	46bd      	mov	sp, r7
 800082a:	b003      	add	sp, #12
 800082c:	bd90      	pop	{r4, r7, pc}
 800082e:	46c0      	nop			@ (mov r8, r8)
 8000830:	200003a4 	.word	0x200003a4
 8000834:	200000a4 	.word	0x200000a4

08000838 <GameObject_CreateAnimation>:
    sprites[sprite_count].h = h;
    return sprite_count++;
}

/* Create animation (frames pointer must remain valid in flash/static) */
int GameObject_CreateAnimation(const AnimFrame *frames, uint16_t frameCount){
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	000a      	movs	r2, r1
 8000842:	1cbb      	adds	r3, r7, #2
 8000844:	801a      	strh	r2, [r3, #0]
    if(anim_count >= MAX_ANIMS) return -1;
 8000846:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <GameObject_CreateAnimation+0x4c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2b1f      	cmp	r3, #31
 800084c:	dd02      	ble.n	8000854 <GameObject_CreateAnimation+0x1c>
 800084e:	2301      	movs	r3, #1
 8000850:	425b      	negs	r3, r3
 8000852:	e013      	b.n	800087c <GameObject_CreateAnimation+0x44>
    anims[anim_count].frames = frames;
 8000854:	4b0b      	ldr	r3, [pc, #44]	@ (8000884 <GameObject_CreateAnimation+0x4c>)
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	4b0b      	ldr	r3, [pc, #44]	@ (8000888 <GameObject_CreateAnimation+0x50>)
 800085a:	00d2      	lsls	r2, r2, #3
 800085c:	6879      	ldr	r1, [r7, #4]
 800085e:	50d1      	str	r1, [r2, r3]
    anims[anim_count].count = frameCount;
 8000860:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <GameObject_CreateAnimation+0x4c>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a08      	ldr	r2, [pc, #32]	@ (8000888 <GameObject_CreateAnimation+0x50>)
 8000866:	00db      	lsls	r3, r3, #3
 8000868:	18d3      	adds	r3, r2, r3
 800086a:	3304      	adds	r3, #4
 800086c:	1cba      	adds	r2, r7, #2
 800086e:	8812      	ldrh	r2, [r2, #0]
 8000870:	801a      	strh	r2, [r3, #0]
    return anim_count++;
 8000872:	4b04      	ldr	r3, [pc, #16]	@ (8000884 <GameObject_CreateAnimation+0x4c>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	1c59      	adds	r1, r3, #1
 8000878:	4a02      	ldr	r2, [pc, #8]	@ (8000884 <GameObject_CreateAnimation+0x4c>)
 800087a:	6011      	str	r1, [r2, #0]
}
 800087c:	0018      	movs	r0, r3
 800087e:	46bd      	mov	sp, r7
 8000880:	b002      	add	sp, #8
 8000882:	bd80      	pop	{r7, pc}
 8000884:	200004a8 	.word	0x200004a8
 8000888:	200003a8 	.word	0x200003a8

0800088c <GameObject_Spawn>:

/* Spawn object */
GameObject * GameObject_Spawn(int spriteId, int x, int y){
 800088c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800088e:	b08b      	sub	sp, #44	@ 0x2c
 8000890:	af04      	add	r7, sp, #16
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
    for(int i=0;i<MAX_OBJECTS;i++){
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
 800089c:	e0b3      	b.n	8000a06 <GameObject_Spawn+0x17a>
        if(!objects[i].used){
 800089e:	4b5e      	ldr	r3, [pc, #376]	@ (8000a18 <GameObject_Spawn+0x18c>)
 80008a0:	697a      	ldr	r2, [r7, #20]
 80008a2:	2134      	movs	r1, #52	@ 0x34
 80008a4:	434a      	muls	r2, r1
 80008a6:	5cd3      	ldrb	r3, [r2, r3]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d000      	beq.n	80008ae <GameObject_Spawn+0x22>
 80008ac:	e0a8      	b.n	8000a00 <GameObject_Spawn+0x174>
            GameObject *o = &objects[i];
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	2234      	movs	r2, #52	@ 0x34
 80008b2:	435a      	muls	r2, r3
 80008b4:	4b58      	ldr	r3, [pc, #352]	@ (8000a18 <GameObject_Spawn+0x18c>)
 80008b6:	18d3      	adds	r3, r2, r3
 80008b8:	613b      	str	r3, [r7, #16]
            memset(o, 0, sizeof(GameObject)); /* clear all fields */
 80008ba:	693b      	ldr	r3, [r7, #16]
 80008bc:	2234      	movs	r2, #52	@ 0x34
 80008be:	2100      	movs	r1, #0
 80008c0:	0018      	movs	r0, r3
 80008c2:	f005 fffd 	bl	80068c0 <memset>
            o->used = 1;
 80008c6:	693b      	ldr	r3, [r7, #16]
 80008c8:	2201      	movs	r2, #1
 80008ca:	701a      	strb	r2, [r3, #0]
            o->spriteId = spriteId;
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	68fa      	ldr	r2, [r7, #12]
 80008d0:	605a      	str	r2, [r3, #4]
            o->animId = -1;
 80008d2:	693b      	ldr	r3, [r7, #16]
 80008d4:	2201      	movs	r2, #1
 80008d6:	4252      	negs	r2, r2
 80008d8:	609a      	str	r2, [r3, #8]
            o->anim_time = 0;
 80008da:	693b      	ldr	r3, [r7, #16]
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
            o->anim_frame = 0;
 80008e0:	693b      	ldr	r3, [r7, #16]
 80008e2:	2200      	movs	r2, #0
 80008e4:	821a      	strh	r2, [r3, #16]
            o->x = x; o->y = y;
 80008e6:	693b      	ldr	r3, [r7, #16]
 80008e8:	68ba      	ldr	r2, [r7, #8]
 80008ea:	615a      	str	r2, [r3, #20]
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	619a      	str	r2, [r3, #24]
            o->prev_x = x; o->prev_y = y;
 80008f2:	693b      	ldr	r3, [r7, #16]
 80008f4:	68ba      	ldr	r2, [r7, #8]
 80008f6:	61da      	str	r2, [r3, #28]
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	621a      	str	r2, [r3, #32]
            o->visible = 1; o->active = 1; o->logic = NULL; o->z = 0;
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	2228      	movs	r2, #40	@ 0x28
 8000902:	2101      	movs	r1, #1
 8000904:	5499      	strb	r1, [r3, r2]
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	2229      	movs	r2, #41	@ 0x29
 800090a:	2101      	movs	r1, #1
 800090c:	5499      	strb	r1, [r3, r2]
 800090e:	693b      	ldr	r3, [r7, #16]
 8000910:	2200      	movs	r2, #0
 8000912:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	2230      	movs	r2, #48	@ 0x30
 8000918:	2100      	movs	r1, #0
 800091a:	5499      	strb	r1, [r3, r2]
            if(spriteId >= 0 && spriteId < sprite_count){
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	2b00      	cmp	r3, #0
 8000920:	db65      	blt.n	80009ee <GameObject_Spawn+0x162>
 8000922:	4b3e      	ldr	r3, [pc, #248]	@ (8000a1c <GameObject_Spawn+0x190>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	429a      	cmp	r2, r3
 800092a:	da60      	bge.n	80009ee <GameObject_Spawn+0x162>
                o->w = sprites[spriteId].w;
 800092c:	493c      	ldr	r1, [pc, #240]	@ (8000a20 <GameObject_Spawn+0x194>)
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	0013      	movs	r3, r2
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	189b      	adds	r3, r3, r2
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	18cb      	adds	r3, r1, r3
 800093a:	3308      	adds	r3, #8
 800093c:	881a      	ldrh	r2, [r3, #0]
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	849a      	strh	r2, [r3, #36]	@ 0x24
                o->h = sprites[spriteId].h;
 8000942:	4937      	ldr	r1, [pc, #220]	@ (8000a20 <GameObject_Spawn+0x194>)
 8000944:	68fa      	ldr	r2, [r7, #12]
 8000946:	0013      	movs	r3, r2
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	189b      	adds	r3, r3, r2
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	18cb      	adds	r3, r1, r3
 8000950:	330a      	adds	r3, #10
 8000952:	881a      	ldrh	r2, [r3, #0]
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	84da      	strh	r2, [r3, #38]	@ 0x26
                /* initial draw (enqueue) */
                if(sprites[spriteId].is_solid){
 8000958:	4931      	ldr	r1, [pc, #196]	@ (8000a20 <GameObject_Spawn+0x194>)
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	0013      	movs	r3, r2
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	189b      	adds	r3, r3, r2
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	5c5b      	ldrb	r3, [r3, r1]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d01a      	beq.n	80009a0 <GameObject_Spawn+0x114>
                    Render_EnqueueFillRect(x, y, o->w, o->h, sprites[spriteId].color, o->z);
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800096e:	001c      	movs	r4, r3
 8000970:	693b      	ldr	r3, [r7, #16]
 8000972:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8000974:	001d      	movs	r5, r3
 8000976:	492a      	ldr	r1, [pc, #168]	@ (8000a20 <GameObject_Spawn+0x194>)
 8000978:	68fa      	ldr	r2, [r7, #12]
 800097a:	0013      	movs	r3, r2
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	189b      	adds	r3, r3, r2
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	18cb      	adds	r3, r1, r3
 8000984:	3302      	adds	r3, #2
 8000986:	881b      	ldrh	r3, [r3, #0]
 8000988:	693a      	ldr	r2, [r7, #16]
 800098a:	2130      	movs	r1, #48	@ 0x30
 800098c:	5c52      	ldrb	r2, [r2, r1]
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	68b8      	ldr	r0, [r7, #8]
 8000992:	9201      	str	r2, [sp, #4]
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	002b      	movs	r3, r5
 8000998:	0022      	movs	r2, r4
 800099a:	f000 fd0b 	bl	80013b4 <Render_EnqueueFillRect>
                if(sprites[spriteId].is_solid){
 800099e:	e02d      	b.n	80009fc <GameObject_Spawn+0x170>
                } else {
                    Render_EnqueueBlitBitmap(sprites[spriteId].pixels, o->w, o->h, x, y, o->z, sprites[spriteId].w);
 80009a0:	491f      	ldr	r1, [pc, #124]	@ (8000a20 <GameObject_Spawn+0x194>)
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	0013      	movs	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	189b      	adds	r3, r3, r2
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	18cb      	adds	r3, r1, r3
 80009ae:	3304      	adds	r3, #4
 80009b0:	6818      	ldr	r0, [r3, #0]
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80009b6:	001d      	movs	r5, r3
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80009bc:	001e      	movs	r6, r3
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	2230      	movs	r2, #48	@ 0x30
 80009c2:	5c9b      	ldrb	r3, [r3, r2]
 80009c4:	001c      	movs	r4, r3
 80009c6:	4916      	ldr	r1, [pc, #88]	@ (8000a20 <GameObject_Spawn+0x194>)
 80009c8:	68fa      	ldr	r2, [r7, #12]
 80009ca:	0013      	movs	r3, r2
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	189b      	adds	r3, r3, r2
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	18cb      	adds	r3, r1, r3
 80009d4:	3308      	adds	r3, #8
 80009d6:	881b      	ldrh	r3, [r3, #0]
 80009d8:	68ba      	ldr	r2, [r7, #8]
 80009da:	9302      	str	r3, [sp, #8]
 80009dc:	9401      	str	r4, [sp, #4]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	0013      	movs	r3, r2
 80009e4:	0032      	movs	r2, r6
 80009e6:	0029      	movs	r1, r5
 80009e8:	f000 fd6e 	bl	80014c8 <Render_EnqueueBlitBitmap>
                if(sprites[spriteId].is_solid){
 80009ec:	e006      	b.n	80009fc <GameObject_Spawn+0x170>
                }
            } else {
                o->w = o->h = 0;
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	2200      	movs	r2, #0
 80009f2:	84da      	strh	r2, [r3, #38]	@ 0x26
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	849a      	strh	r2, [r3, #36]	@ 0x24
            }
            return o;
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	e007      	b.n	8000a10 <GameObject_Spawn+0x184>
    for(int i=0;i<MAX_OBJECTS;i++){
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	3301      	adds	r3, #1
 8000a04:	617b      	str	r3, [r7, #20]
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a0a:	dc00      	bgt.n	8000a0e <GameObject_Spawn+0x182>
 8000a0c:	e747      	b.n	800089e <GameObject_Spawn+0x12>
        }
    }
    return NULL;
 8000a0e:	2300      	movs	r3, #0
}
 8000a10:	0018      	movs	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b007      	add	sp, #28
 8000a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a18:	200004ac 	.word	0x200004ac
 8000a1c:	200003a4 	.word	0x200003a4
 8000a20:	200000a4 	.word	0x200000a4

08000a24 <GameObject_SetSprite>:
        o->used = 0;
    }
}

/* Set sprite (handles erase + redraw) */
void GameObject_SetSprite(GameObject *o, int spriteId){
 8000a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a26:	46c6      	mov	lr, r8
 8000a28:	b500      	push	{lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af04      	add	r7, sp, #16
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
    if(!o) return;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d100      	bne.n	8000a3a <GameObject_SetSprite+0x16>
 8000a38:	e0ac      	b.n	8000b94 <GameObject_SetSprite+0x170>
    /* erase old */
    if(o->visible && o->w && o->h){
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2228      	movs	r2, #40	@ 0x28
 8000a3e:	5c9b      	ldrb	r3, [r3, r2]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d02d      	beq.n	8000aa0 <GameObject_SetSprite+0x7c>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d029      	beq.n	8000aa0 <GameObject_SetSprite+0x7c>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d025      	beq.n	8000aa0 <GameObject_SetSprite+0x7c>
        if(bg_cb) bg_cb(o->prev_x, o->prev_y, o->w, o->h);
 8000a54:	4b52      	ldr	r3, [pc, #328]	@ (8000ba0 <GameObject_SetSprite+0x17c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d00c      	beq.n	8000a76 <GameObject_SetSprite+0x52>
 8000a5c:	4b50      	ldr	r3, [pc, #320]	@ (8000ba0 <GameObject_SetSprite+0x17c>)
 8000a5e:	681c      	ldr	r4, [r3, #0]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	69d8      	ldr	r0, [r3, #28]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6a19      	ldr	r1, [r3, #32]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000a6c:	001a      	movs	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8000a72:	47a0      	blx	r4
 8000a74:	e014      	b.n	8000aa0 <GameObject_SetSprite+0x7c>
        else Render_EnqueueFillRect(o->prev_x, o->prev_y, o->w, o->h, redraw_bg_color, o->z);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	69d8      	ldr	r0, [r3, #28]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6a19      	ldr	r1, [r3, #32]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000a82:	001d      	movs	r5, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8000a88:	001e      	movs	r6, r3
 8000a8a:	4b46      	ldr	r3, [pc, #280]	@ (8000ba4 <GameObject_SetSprite+0x180>)
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	2430      	movs	r4, #48	@ 0x30
 8000a92:	5d12      	ldrb	r2, [r2, r4]
 8000a94:	9201      	str	r2, [sp, #4]
 8000a96:	9300      	str	r3, [sp, #0]
 8000a98:	0033      	movs	r3, r6
 8000a9a:	002a      	movs	r2, r5
 8000a9c:	f000 fc8a 	bl	80013b4 <Render_EnqueueFillRect>
    }
    o->spriteId = spriteId;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	683a      	ldr	r2, [r7, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
    if(spriteId >=0 && spriteId < sprite_count){
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	db6b      	blt.n	8000b84 <GameObject_SetSprite+0x160>
 8000aac:	4b3e      	ldr	r3, [pc, #248]	@ (8000ba8 <GameObject_SetSprite+0x184>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	683a      	ldr	r2, [r7, #0]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	da66      	bge.n	8000b84 <GameObject_SetSprite+0x160>
        o->w = sprites[spriteId].w;
 8000ab6:	493d      	ldr	r1, [pc, #244]	@ (8000bac <GameObject_SetSprite+0x188>)
 8000ab8:	683a      	ldr	r2, [r7, #0]
 8000aba:	0013      	movs	r3, r2
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	189b      	adds	r3, r3, r2
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	18cb      	adds	r3, r1, r3
 8000ac4:	3308      	adds	r3, #8
 8000ac6:	881a      	ldrh	r2, [r3, #0]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	849a      	strh	r2, [r3, #36]	@ 0x24
        o->h = sprites[spriteId].h;
 8000acc:	4937      	ldr	r1, [pc, #220]	@ (8000bac <GameObject_SetSprite+0x188>)
 8000ace:	683a      	ldr	r2, [r7, #0]
 8000ad0:	0013      	movs	r3, r2
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	189b      	adds	r3, r3, r2
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	18cb      	adds	r3, r1, r3
 8000ada:	330a      	adds	r3, #10
 8000adc:	881a      	ldrh	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	84da      	strh	r2, [r3, #38]	@ 0x26
        /* draw new */
        if(sprites[spriteId].is_solid) Render_EnqueueFillRect(o->x, o->y, o->w, o->h, sprites[spriteId].color, o->z);
 8000ae2:	4932      	ldr	r1, [pc, #200]	@ (8000bac <GameObject_SetSprite+0x188>)
 8000ae4:	683a      	ldr	r2, [r7, #0]
 8000ae6:	0013      	movs	r3, r2
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	189b      	adds	r3, r3, r2
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	5c5b      	ldrb	r3, [r3, r1]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d01d      	beq.n	8000b30 <GameObject_SetSprite+0x10c>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6958      	ldr	r0, [r3, #20]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	699c      	ldr	r4, [r3, #24]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000b00:	001d      	movs	r5, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8000b06:	001e      	movs	r6, r3
 8000b08:	4928      	ldr	r1, [pc, #160]	@ (8000bac <GameObject_SetSprite+0x188>)
 8000b0a:	683a      	ldr	r2, [r7, #0]
 8000b0c:	0013      	movs	r3, r2
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	189b      	adds	r3, r3, r2
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	18cb      	adds	r3, r1, r3
 8000b16:	3302      	adds	r3, #2
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	2130      	movs	r1, #48	@ 0x30
 8000b1e:	5c52      	ldrb	r2, [r2, r1]
 8000b20:	9201      	str	r2, [sp, #4]
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	0033      	movs	r3, r6
 8000b26:	002a      	movs	r2, r5
 8000b28:	0021      	movs	r1, r4
 8000b2a:	f000 fc43 	bl	80013b4 <Render_EnqueueFillRect>
 8000b2e:	e032      	b.n	8000b96 <GameObject_SetSprite+0x172>
        else Render_EnqueueBlitBitmap(sprites[spriteId].pixels, o->w, o->h, o->x, o->y, o->z, sprites[spriteId].w);
 8000b30:	491e      	ldr	r1, [pc, #120]	@ (8000bac <GameObject_SetSprite+0x188>)
 8000b32:	683a      	ldr	r2, [r7, #0]
 8000b34:	0013      	movs	r3, r2
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	189b      	adds	r3, r3, r2
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	18cb      	adds	r3, r1, r3
 8000b3e:	3304      	adds	r3, #4
 8000b40:	681c      	ldr	r4, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000b46:	469c      	mov	ip, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8000b4c:	4698      	mov	r8, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	695d      	ldr	r5, [r3, #20]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6999      	ldr	r1, [r3, #24]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2230      	movs	r2, #48	@ 0x30
 8000b5a:	5c9b      	ldrb	r3, [r3, r2]
 8000b5c:	001e      	movs	r6, r3
 8000b5e:	4813      	ldr	r0, [pc, #76]	@ (8000bac <GameObject_SetSprite+0x188>)
 8000b60:	683a      	ldr	r2, [r7, #0]
 8000b62:	0013      	movs	r3, r2
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	189b      	adds	r3, r3, r2
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	18c3      	adds	r3, r0, r3
 8000b6c:	3308      	adds	r3, #8
 8000b6e:	881b      	ldrh	r3, [r3, #0]
 8000b70:	9302      	str	r3, [sp, #8]
 8000b72:	9601      	str	r6, [sp, #4]
 8000b74:	9100      	str	r1, [sp, #0]
 8000b76:	002b      	movs	r3, r5
 8000b78:	4642      	mov	r2, r8
 8000b7a:	4661      	mov	r1, ip
 8000b7c:	0020      	movs	r0, r4
 8000b7e:	f000 fca3 	bl	80014c8 <Render_EnqueueBlitBitmap>
        if(sprites[spriteId].is_solid) Render_EnqueueFillRect(o->x, o->y, o->w, o->h, sprites[spriteId].color, o->z);
 8000b82:	e008      	b.n	8000b96 <GameObject_SetSprite+0x172>
    } else {
        o->w = o->h = 0;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2200      	movs	r2, #0
 8000b88:	84da      	strh	r2, [r3, #38]	@ 0x26
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	849a      	strh	r2, [r3, #36]	@ 0x24
 8000b92:	e000      	b.n	8000b96 <GameObject_SetSprite+0x172>
    if(!o) return;
 8000b94:	46c0      	nop			@ (mov r8, r8)
    }
}
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b002      	add	sp, #8
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	46b8      	mov	r8, r7
 8000b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ba0:	20001eac 	.word	0x20001eac
 8000ba4:	20001eb0 	.word	0x20001eb0
 8000ba8:	200003a4 	.word	0x200003a4
 8000bac:	200000a4 	.word	0x200000a4

08000bb0 <GameObject_SetPos>:

/* Set position: erase old, update pos, enqueue draw */
void GameObject_SetPos(GameObject *o, int x, int y){
 8000bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bb2:	46c6      	mov	lr, r8
 8000bb4:	b500      	push	{lr}
 8000bb6:	b088      	sub	sp, #32
 8000bb8:	af04      	add	r7, sp, #16
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
    if(!o) return;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d100      	bne.n	8000bc8 <GameObject_SetPos+0x18>
 8000bc6:	e0a8      	b.n	8000d1a <GameObject_SetPos+0x16a>
    if(o->x == x && o->y == y) return; // NU schimbăm nimic dacă poziția e la fel
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	695b      	ldr	r3, [r3, #20]
 8000bcc:	68ba      	ldr	r2, [r7, #8]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d105      	bne.n	8000bde <GameObject_SetPos+0x2e>
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d100      	bne.n	8000bde <GameObject_SetPos+0x2e>
 8000bdc:	e09f      	b.n	8000d1e <GameObject_SetPos+0x16e>
    if(o->visible && o->w && o->h){
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	2228      	movs	r2, #40	@ 0x28
 8000be2:	5c9b      	ldrb	r3, [r3, r2]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d02d      	beq.n	8000c44 <GameObject_SetPos+0x94>
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d029      	beq.n	8000c44 <GameObject_SetPos+0x94>
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d025      	beq.n	8000c44 <GameObject_SetPos+0x94>
        if(bg_cb) bg_cb(o->prev_x, o->prev_y, o->w, o->h);
 8000bf8:	4b4c      	ldr	r3, [pc, #304]	@ (8000d2c <GameObject_SetPos+0x17c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d00c      	beq.n	8000c1a <GameObject_SetPos+0x6a>
 8000c00:	4b4a      	ldr	r3, [pc, #296]	@ (8000d2c <GameObject_SetPos+0x17c>)
 8000c02:	681c      	ldr	r4, [r3, #0]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	69d8      	ldr	r0, [r3, #28]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	6a19      	ldr	r1, [r3, #32]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000c10:	001a      	movs	r2, r3
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8000c16:	47a0      	blx	r4
 8000c18:	e014      	b.n	8000c44 <GameObject_SetPos+0x94>
        else Render_EnqueueFillRect(o->prev_x, o->prev_y, o->w, o->h, redraw_bg_color, o->z);///////???????
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	69d8      	ldr	r0, [r3, #28]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	6a19      	ldr	r1, [r3, #32]
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000c26:	001d      	movs	r5, r3
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8000c2c:	001e      	movs	r6, r3
 8000c2e:	4b40      	ldr	r3, [pc, #256]	@ (8000d30 <GameObject_SetPos+0x180>)
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	2430      	movs	r4, #48	@ 0x30
 8000c36:	5d12      	ldrb	r2, [r2, r4]
 8000c38:	9201      	str	r2, [sp, #4]
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	0033      	movs	r3, r6
 8000c3e:	002a      	movs	r2, r5
 8000c40:	f000 fbb8 	bl	80013b4 <Render_EnqueueFillRect>
    }
    o->prev_x = x; o->prev_y = y;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	61da      	str	r2, [r3, #28]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	621a      	str	r2, [r3, #32]
    o->x = x; o->y = y;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	615a      	str	r2, [r3, #20]
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	619a      	str	r2, [r3, #24]
    if(o->spriteId >= 0 && o->spriteId < sprite_count){
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db5d      	blt.n	8000d20 <GameObject_SetPos+0x170>
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	4b32      	ldr	r3, [pc, #200]	@ (8000d34 <GameObject_SetPos+0x184>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	da57      	bge.n	8000d20 <GameObject_SetPos+0x170>
        if(sprites[o->spriteId].is_solid) Render_EnqueueFillRect(o->x, o->y, o->w, o->h, sprites[o->spriteId].color, o->z);
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	685a      	ldr	r2, [r3, #4]
 8000c74:	4930      	ldr	r1, [pc, #192]	@ (8000d38 <GameObject_SetPos+0x188>)
 8000c76:	0013      	movs	r3, r2
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	189b      	adds	r3, r3, r2
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	5c5b      	ldrb	r3, [r3, r1]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d01e      	beq.n	8000cc2 <GameObject_SetPos+0x112>
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	6958      	ldr	r0, [r3, #20]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	699c      	ldr	r4, [r3, #24]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000c90:	001d      	movs	r5, r3
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8000c96:	001e      	movs	r6, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	685a      	ldr	r2, [r3, #4]
 8000c9c:	4926      	ldr	r1, [pc, #152]	@ (8000d38 <GameObject_SetPos+0x188>)
 8000c9e:	0013      	movs	r3, r2
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	189b      	adds	r3, r3, r2
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	18cb      	adds	r3, r1, r3
 8000ca8:	3302      	adds	r3, #2
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	68fa      	ldr	r2, [r7, #12]
 8000cae:	2130      	movs	r1, #48	@ 0x30
 8000cb0:	5c52      	ldrb	r2, [r2, r1]
 8000cb2:	9201      	str	r2, [sp, #4]
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	0033      	movs	r3, r6
 8000cb8:	002a      	movs	r2, r5
 8000cba:	0021      	movs	r1, r4
 8000cbc:	f000 fb7a 	bl	80013b4 <Render_EnqueueFillRect>
 8000cc0:	e02e      	b.n	8000d20 <GameObject_SetPos+0x170>
        else Render_EnqueueBlitBitmap(sprites[o->spriteId].pixels, o->w, o->h, o->x, o->y, o->z, sprites[o->spriteId].w);
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	685a      	ldr	r2, [r3, #4]
 8000cc6:	491c      	ldr	r1, [pc, #112]	@ (8000d38 <GameObject_SetPos+0x188>)
 8000cc8:	0013      	movs	r3, r2
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	189b      	adds	r3, r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	18cb      	adds	r3, r1, r3
 8000cd2:	3304      	adds	r3, #4
 8000cd4:	681c      	ldr	r4, [r3, #0]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000cda:	469c      	mov	ip, r3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8000ce0:	4698      	mov	r8, r3
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	695d      	ldr	r5, [r3, #20]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	6999      	ldr	r1, [r3, #24]
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	2230      	movs	r2, #48	@ 0x30
 8000cee:	5c9b      	ldrb	r3, [r3, r2]
 8000cf0:	001e      	movs	r6, r3
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	685a      	ldr	r2, [r3, #4]
 8000cf6:	4810      	ldr	r0, [pc, #64]	@ (8000d38 <GameObject_SetPos+0x188>)
 8000cf8:	0013      	movs	r3, r2
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	189b      	adds	r3, r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	18c3      	adds	r3, r0, r3
 8000d02:	3308      	adds	r3, #8
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	9302      	str	r3, [sp, #8]
 8000d08:	9601      	str	r6, [sp, #4]
 8000d0a:	9100      	str	r1, [sp, #0]
 8000d0c:	002b      	movs	r3, r5
 8000d0e:	4642      	mov	r2, r8
 8000d10:	4661      	mov	r1, ip
 8000d12:	0020      	movs	r0, r4
 8000d14:	f000 fbd8 	bl	80014c8 <Render_EnqueueBlitBitmap>
 8000d18:	e002      	b.n	8000d20 <GameObject_SetPos+0x170>
    if(!o) return;
 8000d1a:	46c0      	nop			@ (mov r8, r8)
 8000d1c:	e000      	b.n	8000d20 <GameObject_SetPos+0x170>
    if(o->x == x && o->y == y) return; // NU schimbăm nimic dacă poziția e la fel
 8000d1e:	46c0      	nop			@ (mov r8, r8)
    }
}
 8000d20:	46bd      	mov	sp, r7
 8000d22:	b004      	add	sp, #16
 8000d24:	bc80      	pop	{r7}
 8000d26:	46b8      	mov	r8, r7
 8000d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d2a:	46c0      	nop			@ (mov r8, r8)
 8000d2c:	20001eac 	.word	0x20001eac
 8000d30:	20001eb0 	.word	0x20001eb0
 8000d34:	200003a4 	.word	0x200003a4
 8000d38:	200000a4 	.word	0x200000a4

08000d3c <GameObject_PlayAnimation>:

void GameObject_GetPos(GameObject *o, int *x, int *y){ if(o && x && y){ *x = o->x; *y = o->y; } }
void GameObject_SetVisible(GameObject *o, uint8_t visible){ if(o) o->visible = visible?1:0; }
void GameObject_SetZ(GameObject *o, uint8_t z){ if(o) o->z = z; }

void GameObject_PlayAnimation(GameObject *o, int animId){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
    if(!o) return;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d028      	beq.n	8000d9e <GameObject_PlayAnimation+0x62>
    o->animId = animId;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	683a      	ldr	r2, [r7, #0]
 8000d50:	609a      	str	r2, [r3, #8]
    o->anim_time = 0;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2200      	movs	r2, #0
 8000d56:	60da      	str	r2, [r3, #12]
    o->anim_frame = 0;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	821a      	strh	r2, [r3, #16]
    if(animId >= 0 && animId < anim_count && anims[animId].count > 0){
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	db1d      	blt.n	8000da0 <GameObject_PlayAnimation+0x64>
 8000d64:	4b10      	ldr	r3, [pc, #64]	@ (8000da8 <GameObject_PlayAnimation+0x6c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	683a      	ldr	r2, [r7, #0]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	da18      	bge.n	8000da0 <GameObject_PlayAnimation+0x64>
 8000d6e:	4a0f      	ldr	r2, [pc, #60]	@ (8000dac <GameObject_PlayAnimation+0x70>)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	18d3      	adds	r3, r2, r3
 8000d76:	3304      	adds	r3, #4
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d010      	beq.n	8000da0 <GameObject_PlayAnimation+0x64>
        int spr = anims[animId].frames[0].spriteId;
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dac <GameObject_PlayAnimation+0x70>)
 8000d80:	683a      	ldr	r2, [r7, #0]
 8000d82:	00d2      	lsls	r2, r2, #3
 8000d84:	58d3      	ldr	r3, [r2, r3]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	60fb      	str	r3, [r7, #12]
        if(spr >= 0) GameObject_SetSprite(o, spr);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	db07      	blt.n	8000da0 <GameObject_PlayAnimation+0x64>
 8000d90:	68fa      	ldr	r2, [r7, #12]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	0011      	movs	r1, r2
 8000d96:	0018      	movs	r0, r3
 8000d98:	f7ff fe44 	bl	8000a24 <GameObject_SetSprite>
 8000d9c:	e000      	b.n	8000da0 <GameObject_PlayAnimation+0x64>
    if(!o) return;
 8000d9e:	46c0      	nop			@ (mov r8, r8)
    }
}
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b004      	add	sp, #16
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	46c0      	nop			@ (mov r8, r8)
 8000da8:	200004a8 	.word	0x200004a8
 8000dac:	200003a8 	.word	0x200003a8

08000db0 <GameObject_EnableLogic>:

void GameObject_EnableLogic(GameObject *o, LogicCb cb){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
    if(!o) return;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d003      	beq.n	8000dc8 <GameObject_EnableLogic+0x18>
    o->logic = cb;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	683a      	ldr	r2, [r7, #0]
 8000dc4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000dc6:	e000      	b.n	8000dca <GameObject_EnableLogic+0x1a>
    if(!o) return;
 8000dc8:	46c0      	nop			@ (mov r8, r8)
}
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b002      	add	sp, #8
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <GameObject_ProcessLogic>:

/* iterate and call logic callbacks */
void GameObject_ProcessLogic(uint32_t dt_ms){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
    for(int i=0;i<MAX_OBJECTS;i++){
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	e02d      	b.n	8000e3a <GameObject_ProcessLogic+0x6a>
        if(!objects[i].used) continue;
 8000dde:	4b1b      	ldr	r3, [pc, #108]	@ (8000e4c <GameObject_ProcessLogic+0x7c>)
 8000de0:	68fa      	ldr	r2, [r7, #12]
 8000de2:	2134      	movs	r1, #52	@ 0x34
 8000de4:	434a      	muls	r2, r1
 8000de6:	5cd3      	ldrb	r3, [r2, r3]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d022      	beq.n	8000e32 <GameObject_ProcessLogic+0x62>
        if(objects[i].logic && objects[i].active){
 8000dec:	4a17      	ldr	r2, [pc, #92]	@ (8000e4c <GameObject_ProcessLogic+0x7c>)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	2134      	movs	r1, #52	@ 0x34
 8000df2:	434b      	muls	r3, r1
 8000df4:	18d3      	adds	r3, r2, r3
 8000df6:	332c      	adds	r3, #44	@ 0x2c
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d01a      	beq.n	8000e34 <GameObject_ProcessLogic+0x64>
 8000dfe:	4a13      	ldr	r2, [pc, #76]	@ (8000e4c <GameObject_ProcessLogic+0x7c>)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2129      	movs	r1, #41	@ 0x29
 8000e04:	2034      	movs	r0, #52	@ 0x34
 8000e06:	4343      	muls	r3, r0
 8000e08:	18d3      	adds	r3, r2, r3
 8000e0a:	185b      	adds	r3, r3, r1
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d010      	beq.n	8000e34 <GameObject_ProcessLogic+0x64>
            objects[i].logic(&objects[i], dt_ms);
 8000e12:	4a0e      	ldr	r2, [pc, #56]	@ (8000e4c <GameObject_ProcessLogic+0x7c>)
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2134      	movs	r1, #52	@ 0x34
 8000e18:	434b      	muls	r3, r1
 8000e1a:	18d3      	adds	r3, r2, r3
 8000e1c:	332c      	adds	r3, #44	@ 0x2c
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	68fa      	ldr	r2, [r7, #12]
 8000e22:	2134      	movs	r1, #52	@ 0x34
 8000e24:	4351      	muls	r1, r2
 8000e26:	4a09      	ldr	r2, [pc, #36]	@ (8000e4c <GameObject_ProcessLogic+0x7c>)
 8000e28:	188a      	adds	r2, r1, r2
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	0010      	movs	r0, r2
 8000e2e:	4798      	blx	r3
 8000e30:	e000      	b.n	8000e34 <GameObject_ProcessLogic+0x64>
        if(!objects[i].used) continue;
 8000e32:	46c0      	nop			@ (mov r8, r8)
    for(int i=0;i<MAX_OBJECTS;i++){
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	3301      	adds	r3, #1
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e3e:	ddce      	ble.n	8000dde <GameObject_ProcessLogic+0xe>
        }
    }
}
 8000e40:	46c0      	nop			@ (mov r8, r8)
 8000e42:	46c0      	nop			@ (mov r8, r8)
 8000e44:	46bd      	mov	sp, r7
 8000e46:	b004      	add	sp, #16
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	46c0      	nop			@ (mov r8, r8)
 8000e4c:	200004ac 	.word	0x200004ac

08000e50 <GameObject_ProcessAnimation>:

/* process per-object animations */
void GameObject_ProcessAnimation(uint32_t dt_ms){
 8000e50:	b590      	push	{r4, r7, lr}
 8000e52:	b089      	sub	sp, #36	@ 0x24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
    for(int i=0;i<MAX_OBJECTS;i++){
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
 8000e5c:	e06c      	b.n	8000f38 <GameObject_ProcessAnimation+0xe8>
        if(!objects[i].used) continue;
 8000e5e:	4b3a      	ldr	r3, [pc, #232]	@ (8000f48 <GameObject_ProcessAnimation+0xf8>)
 8000e60:	69fa      	ldr	r2, [r7, #28]
 8000e62:	2134      	movs	r1, #52	@ 0x34
 8000e64:	434a      	muls	r2, r1
 8000e66:	5cd3      	ldrb	r3, [r2, r3]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d05b      	beq.n	8000f24 <GameObject_ProcessAnimation+0xd4>
        GameObject *o = &objects[i];
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	2234      	movs	r2, #52	@ 0x34
 8000e70:	435a      	muls	r2, r3
 8000e72:	4b35      	ldr	r3, [pc, #212]	@ (8000f48 <GameObject_ProcessAnimation+0xf8>)
 8000e74:	18d3      	adds	r3, r2, r3
 8000e76:	61bb      	str	r3, [r7, #24]
        if(o->animId < 0 || o->animId >= anim_count) continue;
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	db53      	blt.n	8000f28 <GameObject_ProcessAnimation+0xd8>
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	4b31      	ldr	r3, [pc, #196]	@ (8000f4c <GameObject_ProcessAnimation+0xfc>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	da4d      	bge.n	8000f28 <GameObject_ProcessAnimation+0xd8>
        _Anim *a = &anims[o->animId];
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	00da      	lsls	r2, r3, #3
 8000e92:	4b2f      	ldr	r3, [pc, #188]	@ (8000f50 <GameObject_ProcessAnimation+0x100>)
 8000e94:	18d3      	adds	r3, r2, r3
 8000e96:	617b      	str	r3, [r7, #20]
        if(a->count == 0) continue;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	889b      	ldrh	r3, [r3, #4]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d045      	beq.n	8000f2c <GameObject_ProcessAnimation+0xdc>
        o->anim_time += dt_ms;
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	68da      	ldr	r2, [r3, #12]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	18d2      	adds	r2, r2, r3
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	60da      	str	r2, [r3, #12]
        while(1){
            AnimFrame f = a->frames[o->anim_frame];
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	8a1b      	ldrh	r3, [r3, #16]
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	18d2      	adds	r2, r2, r3
 8000eb8:	240c      	movs	r4, #12
 8000eba:	193b      	adds	r3, r7, r4
 8000ebc:	ca03      	ldmia	r2!, {r0, r1}
 8000ebe:	c303      	stmia	r3!, {r0, r1}
            if(o->anim_time < f.duration) break;
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	68da      	ldr	r2, [r3, #12]
 8000ec4:	193b      	adds	r3, r7, r4
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d331      	bcc.n	8000f30 <GameObject_ProcessAnimation+0xe0>
            o->anim_time -= f.duration;
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	68da      	ldr	r2, [r3, #12]
 8000ed0:	193b      	adds	r3, r7, r4
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	1ad2      	subs	r2, r2, r3
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	60da      	str	r2, [r3, #12]
            o->anim_frame++;
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	8a1b      	ldrh	r3, [r3, #16]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	821a      	strh	r2, [r3, #16]
            if(o->anim_frame >= a->count) o->anim_frame = 0;
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	8a1a      	ldrh	r2, [r3, #16]
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	889b      	ldrh	r3, [r3, #4]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d302      	bcc.n	8000ef8 <GameObject_ProcessAnimation+0xa8>
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	821a      	strh	r2, [r3, #16]
            f = a->frames[o->anim_frame];
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	8a1b      	ldrh	r3, [r3, #16]
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	18d2      	adds	r2, r2, r3
 8000f04:	240c      	movs	r4, #12
 8000f06:	193b      	adds	r3, r7, r4
 8000f08:	ca03      	ldmia	r2!, {r0, r1}
 8000f0a:	c303      	stmia	r3!, {r0, r1}
            if(f.spriteId >= 0) GameObject_SetSprite(o, f.spriteId);
 8000f0c:	193b      	adds	r3, r7, r4
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	dbcb      	blt.n	8000eac <GameObject_ProcessAnimation+0x5c>
 8000f14:	193b      	adds	r3, r7, r4
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	0011      	movs	r1, r2
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f7ff fd81 	bl	8000a24 <GameObject_SetSprite>
        while(1){
 8000f22:	e7c3      	b.n	8000eac <GameObject_ProcessAnimation+0x5c>
        if(!objects[i].used) continue;
 8000f24:	46c0      	nop			@ (mov r8, r8)
 8000f26:	e004      	b.n	8000f32 <GameObject_ProcessAnimation+0xe2>
        if(o->animId < 0 || o->animId >= anim_count) continue;
 8000f28:	46c0      	nop			@ (mov r8, r8)
 8000f2a:	e002      	b.n	8000f32 <GameObject_ProcessAnimation+0xe2>
        if(a->count == 0) continue;
 8000f2c:	46c0      	nop			@ (mov r8, r8)
 8000f2e:	e000      	b.n	8000f32 <GameObject_ProcessAnimation+0xe2>
            if(o->anim_time < f.duration) break;
 8000f30:	46c0      	nop			@ (mov r8, r8)
    for(int i=0;i<MAX_OBJECTS;i++){
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3301      	adds	r3, #1
 8000f36:	61fb      	str	r3, [r7, #28]
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f3c:	dd8f      	ble.n	8000e5e <GameObject_ProcessAnimation+0xe>
        }
    }
}
 8000f3e:	46c0      	nop			@ (mov r8, r8)
 8000f40:	46c0      	nop			@ (mov r8, r8)
 8000f42:	46bd      	mov	sp, r7
 8000f44:	b009      	add	sp, #36	@ 0x24
 8000f46:	bd90      	pop	{r4, r7, pc}
 8000f48:	200004ac 	.word	0x200004ac
 8000f4c:	200004a8 	.word	0x200004a8
 8000f50:	200003a8 	.word	0x200003a8

08000f54 <GameObject_RenderAll>:

/* render: enqueue draws by z-order */
void GameObject_RenderAll(void){
 8000f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f56:	46c6      	mov	lr, r8
 8000f58:	b500      	push	{lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af04      	add	r7, sp, #16
    for(uint8_t z=0; z<255; ++z){
 8000f5e:	230f      	movs	r3, #15
 8000f60:	18fb      	adds	r3, r7, r3
 8000f62:	2200      	movs	r2, #0
 8000f64:	701a      	strb	r2, [r3, #0]
 8000f66:	e08e      	b.n	8001086 <GameObject_RenderAll+0x132>
        for(int i=0;i<MAX_OBJECTS;i++){
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	e081      	b.n	8001072 <GameObject_RenderAll+0x11e>
            if(!objects[i].used) continue;
 8000f6e:	4b4c      	ldr	r3, [pc, #304]	@ (80010a0 <GameObject_RenderAll+0x14c>)
 8000f70:	68ba      	ldr	r2, [r7, #8]
 8000f72:	2134      	movs	r1, #52	@ 0x34
 8000f74:	434a      	muls	r2, r1
 8000f76:	5cd3      	ldrb	r3, [r2, r3]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d100      	bne.n	8000f7e <GameObject_RenderAll+0x2a>
 8000f7c:	e071      	b.n	8001062 <GameObject_RenderAll+0x10e>
            GameObject *o = &objects[i];
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	2234      	movs	r2, #52	@ 0x34
 8000f82:	435a      	muls	r2, r3
 8000f84:	4b46      	ldr	r3, [pc, #280]	@ (80010a0 <GameObject_RenderAll+0x14c>)
 8000f86:	18d3      	adds	r3, r2, r3
 8000f88:	607b      	str	r3, [r7, #4]
            if(o->z != z) continue;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2230      	movs	r2, #48	@ 0x30
 8000f8e:	5c9b      	ldrb	r3, [r3, r2]
 8000f90:	220f      	movs	r2, #15
 8000f92:	18ba      	adds	r2, r7, r2
 8000f94:	7812      	ldrb	r2, [r2, #0]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d165      	bne.n	8001066 <GameObject_RenderAll+0x112>
            if(!o->visible) continue;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2228      	movs	r2, #40	@ 0x28
 8000f9e:	5c9b      	ldrb	r3, [r3, r2]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d062      	beq.n	800106a <GameObject_RenderAll+0x116>
            if(o->spriteId >= 0 && o->spriteId < sprite_count){
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	db5f      	blt.n	800106c <GameObject_RenderAll+0x118>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685a      	ldr	r2, [r3, #4]
 8000fb0:	4b3c      	ldr	r3, [pc, #240]	@ (80010a4 <GameObject_RenderAll+0x150>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	da59      	bge.n	800106c <GameObject_RenderAll+0x118>
                if(sprites[o->spriteId].is_solid) Render_EnqueueFillRect(o->x, o->y, o->w, o->h, sprites[o->spriteId].color, o->z);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	493a      	ldr	r1, [pc, #232]	@ (80010a8 <GameObject_RenderAll+0x154>)
 8000fbe:	0013      	movs	r3, r2
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	189b      	adds	r3, r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	5c5b      	ldrb	r3, [r3, r1]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d01e      	beq.n	800100a <GameObject_RenderAll+0xb6>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6958      	ldr	r0, [r3, #20]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	699c      	ldr	r4, [r3, #24]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000fd8:	001d      	movs	r5, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8000fde:	001e      	movs	r6, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685a      	ldr	r2, [r3, #4]
 8000fe4:	4930      	ldr	r1, [pc, #192]	@ (80010a8 <GameObject_RenderAll+0x154>)
 8000fe6:	0013      	movs	r3, r2
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	189b      	adds	r3, r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	18cb      	adds	r3, r1, r3
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	2130      	movs	r1, #48	@ 0x30
 8000ff8:	5c52      	ldrb	r2, [r2, r1]
 8000ffa:	9201      	str	r2, [sp, #4]
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	0033      	movs	r3, r6
 8001000:	002a      	movs	r2, r5
 8001002:	0021      	movs	r1, r4
 8001004:	f000 f9d6 	bl	80013b4 <Render_EnqueueFillRect>
 8001008:	e030      	b.n	800106c <GameObject_RenderAll+0x118>
                else Render_EnqueueBlitBitmap(sprites[o->spriteId].pixels, o->w, o->h, o->x, o->y, o->z, sprites[o->spriteId].w);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685a      	ldr	r2, [r3, #4]
 800100e:	4926      	ldr	r1, [pc, #152]	@ (80010a8 <GameObject_RenderAll+0x154>)
 8001010:	0013      	movs	r3, r2
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	189b      	adds	r3, r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	18cb      	adds	r3, r1, r3
 800101a:	3304      	adds	r3, #4
 800101c:	681c      	ldr	r4, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001022:	469c      	mov	ip, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001028:	4698      	mov	r8, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	695d      	ldr	r5, [r3, #20]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6999      	ldr	r1, [r3, #24]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2230      	movs	r2, #48	@ 0x30
 8001036:	5c9b      	ldrb	r3, [r3, r2]
 8001038:	001e      	movs	r6, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	481a      	ldr	r0, [pc, #104]	@ (80010a8 <GameObject_RenderAll+0x154>)
 8001040:	0013      	movs	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	189b      	adds	r3, r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	18c3      	adds	r3, r0, r3
 800104a:	3308      	adds	r3, #8
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	9302      	str	r3, [sp, #8]
 8001050:	9601      	str	r6, [sp, #4]
 8001052:	9100      	str	r1, [sp, #0]
 8001054:	002b      	movs	r3, r5
 8001056:	4642      	mov	r2, r8
 8001058:	4661      	mov	r1, ip
 800105a:	0020      	movs	r0, r4
 800105c:	f000 fa34 	bl	80014c8 <Render_EnqueueBlitBitmap>
 8001060:	e004      	b.n	800106c <GameObject_RenderAll+0x118>
            if(!objects[i].used) continue;
 8001062:	46c0      	nop			@ (mov r8, r8)
 8001064:	e002      	b.n	800106c <GameObject_RenderAll+0x118>
            if(o->z != z) continue;
 8001066:	46c0      	nop			@ (mov r8, r8)
 8001068:	e000      	b.n	800106c <GameObject_RenderAll+0x118>
            if(!o->visible) continue;
 800106a:	46c0      	nop			@ (mov r8, r8)
        for(int i=0;i<MAX_OBJECTS;i++){
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	3301      	adds	r3, #1
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	2b7f      	cmp	r3, #127	@ 0x7f
 8001076:	dc00      	bgt.n	800107a <GameObject_RenderAll+0x126>
 8001078:	e779      	b.n	8000f6e <GameObject_RenderAll+0x1a>
    for(uint8_t z=0; z<255; ++z){
 800107a:	220f      	movs	r2, #15
 800107c:	18bb      	adds	r3, r7, r2
 800107e:	18ba      	adds	r2, r7, r2
 8001080:	7812      	ldrb	r2, [r2, #0]
 8001082:	3201      	adds	r2, #1
 8001084:	701a      	strb	r2, [r3, #0]
 8001086:	230f      	movs	r3, #15
 8001088:	18fb      	adds	r3, r7, r3
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2bff      	cmp	r3, #255	@ 0xff
 800108e:	d000      	beq.n	8001092 <GameObject_RenderAll+0x13e>
 8001090:	e76a      	b.n	8000f68 <GameObject_RenderAll+0x14>
            }
        }
    }
}
 8001092:	46c0      	nop			@ (mov r8, r8)
 8001094:	46c0      	nop			@ (mov r8, r8)
 8001096:	46bd      	mov	sp, r7
 8001098:	b004      	add	sp, #16
 800109a:	bc80      	pop	{r7}
 800109c:	46b8      	mov	r8, r7
 800109e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010a0:	200004ac 	.word	0x200004ac
 80010a4:	200003a4 	.word	0x200003a4
 80010a8:	200000a4 	.word	0x200000a4

080010ac <read_pin>:
/* last stable states and times */
static uint8_t last_up=0, last_down=0, last_left=0, last_right=0;
static uint32_t t_up=0, t_down=0, t_left=0, t_right=0;

/* reads physical pin, returns 1 if pressed */
static inline uint8_t read_pin(GPIO_TypeDef* port, uint16_t pin){
 80010ac:	b5b0      	push	{r4, r5, r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	000a      	movs	r2, r1
 80010b6:	1cbb      	adds	r3, r7, #2
 80010b8:	801a      	strh	r2, [r3, #0]
    GPIO_PinState s = HAL_GPIO_ReadPin(port, pin);
 80010ba:	250f      	movs	r5, #15
 80010bc:	197c      	adds	r4, r7, r5
 80010be:	1cbb      	adds	r3, r7, #2
 80010c0:	881a      	ldrh	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	0011      	movs	r1, r2
 80010c6:	0018      	movs	r0, r3
 80010c8:	f003 f94e 	bl	8004368 <HAL_GPIO_ReadPin>
 80010cc:	0003      	movs	r3, r0
 80010ce:	7023      	strb	r3, [r4, #0]
#if BUTTON_ACTIVE_LOW
    return (s == GPIO_PIN_RESET) ? 1 : 0;
 80010d0:	197b      	adds	r3, r7, r5
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	425a      	negs	r2, r3
 80010d6:	4153      	adcs	r3, r2
 80010d8:	b2db      	uxtb	r3, r3
#else
    return (s == GPIO_PIN_SET) ? 1 : 0;
#endif
}
 80010da:	0018      	movs	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	b004      	add	sp, #16
 80010e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080010e4 <Input_Init>:

void Input_Init(void){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
    last_up = last_down = last_left = last_right = 0;
 80010e8:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <Input_Init+0x50>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
 80010ee:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <Input_Init+0x50>)
 80010f0:	781a      	ldrb	r2, [r3, #0]
 80010f2:	4b11      	ldr	r3, [pc, #68]	@ (8001138 <Input_Init+0x54>)
 80010f4:	701a      	strb	r2, [r3, #0]
 80010f6:	4b10      	ldr	r3, [pc, #64]	@ (8001138 <Input_Init+0x54>)
 80010f8:	781a      	ldrb	r2, [r3, #0]
 80010fa:	4b10      	ldr	r3, [pc, #64]	@ (800113c <Input_Init+0x58>)
 80010fc:	701a      	strb	r2, [r3, #0]
 80010fe:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <Input_Init+0x58>)
 8001100:	781a      	ldrb	r2, [r3, #0]
 8001102:	4b0f      	ldr	r3, [pc, #60]	@ (8001140 <Input_Init+0x5c>)
 8001104:	701a      	strb	r2, [r3, #0]
    t_up = t_down = t_left = t_right = HAL_GetTick();
 8001106:	f002 fc6d 	bl	80039e4 <HAL_GetTick>
 800110a:	0002      	movs	r2, r0
 800110c:	4b0d      	ldr	r3, [pc, #52]	@ (8001144 <Input_Init+0x60>)
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <Input_Init+0x60>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <Input_Init+0x64>)
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	4b0b      	ldr	r3, [pc, #44]	@ (8001148 <Input_Init+0x64>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <Input_Init+0x68>)
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	4b0a      	ldr	r3, [pc, #40]	@ (800114c <Input_Init+0x68>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b0a      	ldr	r3, [pc, #40]	@ (8001150 <Input_Init+0x6c>)
 8001126:	601a      	str	r2, [r3, #0]
    latest_event = DIR_NONE;
 8001128:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <Input_Init+0x70>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
}
 800112e:	46c0      	nop			@ (mov r8, r8)
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20001eb6 	.word	0x20001eb6
 8001138:	20001eb5 	.word	0x20001eb5
 800113c:	20001eb4 	.word	0x20001eb4
 8001140:	20001eb3 	.word	0x20001eb3
 8001144:	20001ec4 	.word	0x20001ec4
 8001148:	20001ec0 	.word	0x20001ec0
 800114c:	20001ebc 	.word	0x20001ebc
 8001150:	20001eb8 	.word	0x20001eb8
 8001154:	20001eb2 	.word	0x20001eb2

08001158 <Input_Poll>:

void Input_Poll(void){
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 800115e:	f002 fc41 	bl	80039e4 <HAL_GetTick>
 8001162:	0003      	movs	r3, r0
 8001164:	607b      	str	r3, [r7, #4]
    uint8_t cur;

    /* UP */
    cur = read_pin(BTN_UP_PORT, BTN_UP_PIN);
 8001166:	1cfc      	adds	r4, r7, #3
 8001168:	23a0      	movs	r3, #160	@ 0xa0
 800116a:	05db      	lsls	r3, r3, #23
 800116c:	2101      	movs	r1, #1
 800116e:	0018      	movs	r0, r3
 8001170:	f7ff ff9c 	bl	80010ac <read_pin>
 8001174:	0003      	movs	r3, r0
 8001176:	7023      	strb	r3, [r4, #0]
    if(cur && !last_up && (now - t_up) > DEBOUNCE_MS){
 8001178:	1cfb      	adds	r3, r7, #3
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d012      	beq.n	80011a6 <Input_Poll+0x4e>
 8001180:	4b56      	ldr	r3, [pc, #344]	@ (80012dc <Input_Poll+0x184>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d10e      	bne.n	80011a6 <Input_Poll+0x4e>
 8001188:	4b55      	ldr	r3, [pc, #340]	@ (80012e0 <Input_Poll+0x188>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b1e      	cmp	r3, #30
 8001192:	d908      	bls.n	80011a6 <Input_Poll+0x4e>
        latest_event = DIR_UP;
 8001194:	4b53      	ldr	r3, [pc, #332]	@ (80012e4 <Input_Poll+0x18c>)
 8001196:	2201      	movs	r2, #1
 8001198:	701a      	strb	r2, [r3, #0]
        last_up = 1; t_up = now;
 800119a:	4b50      	ldr	r3, [pc, #320]	@ (80012dc <Input_Poll+0x184>)
 800119c:	2201      	movs	r2, #1
 800119e:	701a      	strb	r2, [r3, #0]
 80011a0:	4b4f      	ldr	r3, [pc, #316]	@ (80012e0 <Input_Poll+0x188>)
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	601a      	str	r2, [r3, #0]
    }
    if(!cur && last_up){ last_up = 0; t_up = now; }
 80011a6:	1cfb      	adds	r3, r7, #3
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d109      	bne.n	80011c2 <Input_Poll+0x6a>
 80011ae:	4b4b      	ldr	r3, [pc, #300]	@ (80012dc <Input_Poll+0x184>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d005      	beq.n	80011c2 <Input_Poll+0x6a>
 80011b6:	4b49      	ldr	r3, [pc, #292]	@ (80012dc <Input_Poll+0x184>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
 80011bc:	4b48      	ldr	r3, [pc, #288]	@ (80012e0 <Input_Poll+0x188>)
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	601a      	str	r2, [r3, #0]

    /* DOWN */
    cur = read_pin(BTN_DOWN_PORT, BTN_DOWN_PIN);
 80011c2:	1cfc      	adds	r4, r7, #3
 80011c4:	23a0      	movs	r3, #160	@ 0xa0
 80011c6:	05db      	lsls	r3, r3, #23
 80011c8:	2102      	movs	r1, #2
 80011ca:	0018      	movs	r0, r3
 80011cc:	f7ff ff6e 	bl	80010ac <read_pin>
 80011d0:	0003      	movs	r3, r0
 80011d2:	7023      	strb	r3, [r4, #0]
    if(cur && !last_down && (now - t_down) > DEBOUNCE_MS){
 80011d4:	1cfb      	adds	r3, r7, #3
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d012      	beq.n	8001202 <Input_Poll+0xaa>
 80011dc:	4b42      	ldr	r3, [pc, #264]	@ (80012e8 <Input_Poll+0x190>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d10e      	bne.n	8001202 <Input_Poll+0xaa>
 80011e4:	4b41      	ldr	r3, [pc, #260]	@ (80012ec <Input_Poll+0x194>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b1e      	cmp	r3, #30
 80011ee:	d908      	bls.n	8001202 <Input_Poll+0xaa>
        latest_event = DIR_DOWN;
 80011f0:	4b3c      	ldr	r3, [pc, #240]	@ (80012e4 <Input_Poll+0x18c>)
 80011f2:	2202      	movs	r2, #2
 80011f4:	701a      	strb	r2, [r3, #0]
        last_down = 1; t_down = now;
 80011f6:	4b3c      	ldr	r3, [pc, #240]	@ (80012e8 <Input_Poll+0x190>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	701a      	strb	r2, [r3, #0]
 80011fc:	4b3b      	ldr	r3, [pc, #236]	@ (80012ec <Input_Poll+0x194>)
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	601a      	str	r2, [r3, #0]
    }
    if(!cur && last_down){ last_down = 0; t_down = now; }
 8001202:	1cfb      	adds	r3, r7, #3
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d109      	bne.n	800121e <Input_Poll+0xc6>
 800120a:	4b37      	ldr	r3, [pc, #220]	@ (80012e8 <Input_Poll+0x190>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d005      	beq.n	800121e <Input_Poll+0xc6>
 8001212:	4b35      	ldr	r3, [pc, #212]	@ (80012e8 <Input_Poll+0x190>)
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
 8001218:	4b34      	ldr	r3, [pc, #208]	@ (80012ec <Input_Poll+0x194>)
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	601a      	str	r2, [r3, #0]

    /* LEFT */
    cur = read_pin(BTN_LEFT_PORT, BTN_LEFT_PIN);
 800121e:	1cfc      	adds	r4, r7, #3
 8001220:	23a0      	movs	r3, #160	@ 0xa0
 8001222:	05db      	lsls	r3, r3, #23
 8001224:	2110      	movs	r1, #16
 8001226:	0018      	movs	r0, r3
 8001228:	f7ff ff40 	bl	80010ac <read_pin>
 800122c:	0003      	movs	r3, r0
 800122e:	7023      	strb	r3, [r4, #0]
    if(cur && !last_left && (now - t_left) > DEBOUNCE_MS){
 8001230:	1cfb      	adds	r3, r7, #3
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d012      	beq.n	800125e <Input_Poll+0x106>
 8001238:	4b2d      	ldr	r3, [pc, #180]	@ (80012f0 <Input_Poll+0x198>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d10e      	bne.n	800125e <Input_Poll+0x106>
 8001240:	4b2c      	ldr	r3, [pc, #176]	@ (80012f4 <Input_Poll+0x19c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b1e      	cmp	r3, #30
 800124a:	d908      	bls.n	800125e <Input_Poll+0x106>
        latest_event = DIR_LEFT;
 800124c:	4b25      	ldr	r3, [pc, #148]	@ (80012e4 <Input_Poll+0x18c>)
 800124e:	2203      	movs	r2, #3
 8001250:	701a      	strb	r2, [r3, #0]
        last_left = 1; t_left = now;
 8001252:	4b27      	ldr	r3, [pc, #156]	@ (80012f0 <Input_Poll+0x198>)
 8001254:	2201      	movs	r2, #1
 8001256:	701a      	strb	r2, [r3, #0]
 8001258:	4b26      	ldr	r3, [pc, #152]	@ (80012f4 <Input_Poll+0x19c>)
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	601a      	str	r2, [r3, #0]
    }
    if(!cur && last_left){ last_left = 0; t_left = now; }
 800125e:	1cfb      	adds	r3, r7, #3
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d109      	bne.n	800127a <Input_Poll+0x122>
 8001266:	4b22      	ldr	r3, [pc, #136]	@ (80012f0 <Input_Poll+0x198>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d005      	beq.n	800127a <Input_Poll+0x122>
 800126e:	4b20      	ldr	r3, [pc, #128]	@ (80012f0 <Input_Poll+0x198>)
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
 8001274:	4b1f      	ldr	r3, [pc, #124]	@ (80012f4 <Input_Poll+0x19c>)
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	601a      	str	r2, [r3, #0]

    /* RIGHT */
    cur = read_pin(BTN_RIGHT_PORT, BTN_RIGHT_PIN);
 800127a:	1cfc      	adds	r4, r7, #3
 800127c:	4b1e      	ldr	r3, [pc, #120]	@ (80012f8 <Input_Poll+0x1a0>)
 800127e:	2102      	movs	r1, #2
 8001280:	0018      	movs	r0, r3
 8001282:	f7ff ff13 	bl	80010ac <read_pin>
 8001286:	0003      	movs	r3, r0
 8001288:	7023      	strb	r3, [r4, #0]
    if(cur && !last_right && (now - t_right) > DEBOUNCE_MS){
 800128a:	1cfb      	adds	r3, r7, #3
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d012      	beq.n	80012b8 <Input_Poll+0x160>
 8001292:	4b1a      	ldr	r3, [pc, #104]	@ (80012fc <Input_Poll+0x1a4>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d10e      	bne.n	80012b8 <Input_Poll+0x160>
 800129a:	4b19      	ldr	r3, [pc, #100]	@ (8001300 <Input_Poll+0x1a8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b1e      	cmp	r3, #30
 80012a4:	d908      	bls.n	80012b8 <Input_Poll+0x160>
        latest_event = DIR_RIGHT;
 80012a6:	4b0f      	ldr	r3, [pc, #60]	@ (80012e4 <Input_Poll+0x18c>)
 80012a8:	2204      	movs	r2, #4
 80012aa:	701a      	strb	r2, [r3, #0]
        last_right = 1; t_right = now;
 80012ac:	4b13      	ldr	r3, [pc, #76]	@ (80012fc <Input_Poll+0x1a4>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	701a      	strb	r2, [r3, #0]
 80012b2:	4b13      	ldr	r3, [pc, #76]	@ (8001300 <Input_Poll+0x1a8>)
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	601a      	str	r2, [r3, #0]
    }
    if(!cur && last_right){ last_right = 0; t_right = now; }
 80012b8:	1cfb      	adds	r3, r7, #3
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d109      	bne.n	80012d4 <Input_Poll+0x17c>
 80012c0:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <Input_Poll+0x1a4>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d005      	beq.n	80012d4 <Input_Poll+0x17c>
 80012c8:	4b0c      	ldr	r3, [pc, #48]	@ (80012fc <Input_Poll+0x1a4>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]
 80012ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <Input_Poll+0x1a8>)
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	601a      	str	r2, [r3, #0]
}
 80012d4:	46c0      	nop			@ (mov r8, r8)
 80012d6:	46bd      	mov	sp, r7
 80012d8:	b003      	add	sp, #12
 80012da:	bd90      	pop	{r4, r7, pc}
 80012dc:	20001eb3 	.word	0x20001eb3
 80012e0:	20001eb8 	.word	0x20001eb8
 80012e4:	20001eb2 	.word	0x20001eb2
 80012e8:	20001eb4 	.word	0x20001eb4
 80012ec:	20001ebc 	.word	0x20001ebc
 80012f0:	20001eb5 	.word	0x20001eb5
 80012f4:	20001ec0 	.word	0x20001ec0
 80012f8:	50000400 	.word	0x50000400
 80012fc:	20001eb6 	.word	0x20001eb6
 8001300:	20001ec4 	.word	0x20001ec4

08001304 <Input_IsHeld>:
    latest_event = DIR_NONE;
    return d;
}

/* hold detection (useful for continuous movement) */
uint8_t Input_IsHeld(Direction d){
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	0002      	movs	r2, r0
 800130c:	1dfb      	adds	r3, r7, #7
 800130e:	701a      	strb	r2, [r3, #0]
    switch(d){
 8001310:	1dfb      	adds	r3, r7, #7
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b04      	cmp	r3, #4
 8001316:	d011      	beq.n	800133c <Input_IsHeld+0x38>
 8001318:	dc13      	bgt.n	8001342 <Input_IsHeld+0x3e>
 800131a:	2b03      	cmp	r3, #3
 800131c:	d00b      	beq.n	8001336 <Input_IsHeld+0x32>
 800131e:	dc10      	bgt.n	8001342 <Input_IsHeld+0x3e>
 8001320:	2b01      	cmp	r3, #1
 8001322:	d002      	beq.n	800132a <Input_IsHeld+0x26>
 8001324:	2b02      	cmp	r3, #2
 8001326:	d003      	beq.n	8001330 <Input_IsHeld+0x2c>
 8001328:	e00b      	b.n	8001342 <Input_IsHeld+0x3e>
        case DIR_UP: return last_up;
 800132a:	4b08      	ldr	r3, [pc, #32]	@ (800134c <Input_IsHeld+0x48>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	e009      	b.n	8001344 <Input_IsHeld+0x40>
        case DIR_DOWN: return last_down;
 8001330:	4b07      	ldr	r3, [pc, #28]	@ (8001350 <Input_IsHeld+0x4c>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	e006      	b.n	8001344 <Input_IsHeld+0x40>
        case DIR_LEFT: return last_left;
 8001336:	4b07      	ldr	r3, [pc, #28]	@ (8001354 <Input_IsHeld+0x50>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	e003      	b.n	8001344 <Input_IsHeld+0x40>
        case DIR_RIGHT: return last_right;
 800133c:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <Input_IsHeld+0x54>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	e000      	b.n	8001344 <Input_IsHeld+0x40>
        default: return 0;
 8001342:	2300      	movs	r3, #0
    }
}
 8001344:	0018      	movs	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	b002      	add	sp, #8
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20001eb3 	.word	0x20001eb3
 8001350:	20001eb4 	.word	0x20001eb4
 8001354:	20001eb5 	.word	0x20001eb5
 8001358:	20001eb6 	.word	0x20001eb6

0800135c <Render_Init>:
static Cmd queue[MAX_QUEUE];
static int q_head=0, q_count=0;
static uint16_t bg_color = 0x0000;
static int clip_rect_to_screen(int *x,int *y,int *w,int *h,int *src_offset_x,int *src_offset_y,int src_w,int src_h);

void Render_Init(void){ q_head=0; q_count=0;}
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
 8001360:	4b04      	ldr	r3, [pc, #16]	@ (8001374 <Render_Init+0x18>)
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	4b04      	ldr	r3, [pc, #16]	@ (8001378 <Render_Init+0x1c>)
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	46c0      	nop			@ (mov r8, r8)
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	46c0      	nop			@ (mov r8, r8)
 8001374:	200027c8 	.word	0x200027c8
 8001378:	200027cc 	.word	0x200027cc

0800137c <Render_SetBackgroundColor>:

void Render_SetBackgroundColor(uint16_t color){    bg_color = color;}
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	0002      	movs	r2, r0
 8001384:	1dbb      	adds	r3, r7, #6
 8001386:	801a      	strh	r2, [r3, #0]
 8001388:	4b03      	ldr	r3, [pc, #12]	@ (8001398 <Render_SetBackgroundColor+0x1c>)
 800138a:	1dba      	adds	r2, r7, #6
 800138c:	8812      	ldrh	r2, [r2, #0]
 800138e:	801a      	strh	r2, [r3, #0]
 8001390:	46c0      	nop			@ (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	b002      	add	sp, #8
 8001396:	bd80      	pop	{r7, pc}
 8001398:	200027d0 	.word	0x200027d0

0800139c <Render_ClearScreen>:

uint16_t Render_GetBackgroundColor(void){    return bg_color;}

void Render_ClearScreen(void){ ILI9341_FillScreen(bg_color); }
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4b03      	ldr	r3, [pc, #12]	@ (80013b0 <Render_ClearScreen+0x14>)
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	0018      	movs	r0, r3
 80013a6:	f001 f867 	bl	8002478 <ILI9341_FillScreen>
 80013aa:	46c0      	nop			@ (mov r8, r8)
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200027d0 	.word	0x200027d0

080013b4 <Render_EnqueueFillRect>:

/* Enqueue fill rect with z */
int Render_EnqueueFillRect(int x,int y,int w,int h,uint16_t color,int z){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	603b      	str	r3, [r7, #0]
    if(q_count >= MAX_QUEUE) return -1;
 80013c2:	4b3d      	ldr	r3, [pc, #244]	@ (80014b8 <Render_EnqueueFillRect+0x104>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80013c8:	dd02      	ble.n	80013d0 <Render_EnqueueFillRect+0x1c>
 80013ca:	2301      	movs	r3, #1
 80013cc:	425b      	negs	r3, r3
 80013ce:	e06e      	b.n	80014ae <Render_EnqueueFillRect+0xfa>
    int idx = (q_head + q_count) % MAX_QUEUE;
 80013d0:	4b3a      	ldr	r3, [pc, #232]	@ (80014bc <Render_EnqueueFillRect+0x108>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b38      	ldr	r3, [pc, #224]	@ (80014b8 <Render_EnqueueFillRect+0x104>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	18d3      	adds	r3, r2, r3
 80013da:	4a39      	ldr	r2, [pc, #228]	@ (80014c0 <Render_EnqueueFillRect+0x10c>)
 80013dc:	4013      	ands	r3, r2
 80013de:	d504      	bpl.n	80013ea <Render_EnqueueFillRect+0x36>
 80013e0:	3b01      	subs	r3, #1
 80013e2:	2240      	movs	r2, #64	@ 0x40
 80013e4:	4252      	negs	r2, r2
 80013e6:	4313      	orrs	r3, r2
 80013e8:	3301      	adds	r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
    queue[idx].type   = CMD_FILL;
 80013ec:	4935      	ldr	r1, [pc, #212]	@ (80014c4 <Render_EnqueueFillRect+0x110>)
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	0013      	movs	r3, r2
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	189b      	adds	r3, r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	2200      	movs	r2, #0
 80013fa:	545a      	strb	r2, [r3, r1]
    queue[idx].x      = x;
 80013fc:	4931      	ldr	r1, [pc, #196]	@ (80014c4 <Render_EnqueueFillRect+0x110>)
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	0013      	movs	r3, r2
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	189b      	adds	r3, r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	18cb      	adds	r3, r1, r3
 800140a:	3304      	adds	r3, #4
 800140c:	68fa      	ldr	r2, [r7, #12]
 800140e:	601a      	str	r2, [r3, #0]
    queue[idx].y      = y;
 8001410:	492c      	ldr	r1, [pc, #176]	@ (80014c4 <Render_EnqueueFillRect+0x110>)
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	0013      	movs	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	189b      	adds	r3, r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	18cb      	adds	r3, r1, r3
 800141e:	3308      	adds	r3, #8
 8001420:	68ba      	ldr	r2, [r7, #8]
 8001422:	601a      	str	r2, [r3, #0]
    queue[idx].w      = w;
 8001424:	4927      	ldr	r1, [pc, #156]	@ (80014c4 <Render_EnqueueFillRect+0x110>)
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	0013      	movs	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	189b      	adds	r3, r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	18cb      	adds	r3, r1, r3
 8001432:	330c      	adds	r3, #12
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	601a      	str	r2, [r3, #0]
    queue[idx].h      = h;
 8001438:	4922      	ldr	r1, [pc, #136]	@ (80014c4 <Render_EnqueueFillRect+0x110>)
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	0013      	movs	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	189b      	adds	r3, r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	18cb      	adds	r3, r1, r3
 8001446:	3310      	adds	r3, #16
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	601a      	str	r2, [r3, #0]
    queue[idx].color  = color;
 800144c:	491d      	ldr	r1, [pc, #116]	@ (80014c4 <Render_EnqueueFillRect+0x110>)
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	0013      	movs	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	189b      	adds	r3, r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	18cb      	adds	r3, r1, r3
 800145a:	3318      	adds	r3, #24
 800145c:	001a      	movs	r2, r3
 800145e:	2320      	movs	r3, #32
 8001460:	18fb      	adds	r3, r7, r3
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	8013      	strh	r3, [r2, #0]
    queue[idx].pixels = NULL;
 8001466:	4917      	ldr	r1, [pc, #92]	@ (80014c4 <Render_EnqueueFillRect+0x110>)
 8001468:	697a      	ldr	r2, [r7, #20]
 800146a:	0013      	movs	r3, r2
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	189b      	adds	r3, r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	18cb      	adds	r3, r1, r3
 8001474:	331c      	adds	r3, #28
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
    queue[idx].src_w = 0;
 800147a:	4912      	ldr	r1, [pc, #72]	@ (80014c4 <Render_EnqueueFillRect+0x110>)
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	0013      	movs	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	189b      	adds	r3, r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	18cb      	adds	r3, r1, r3
 8001488:	3320      	adds	r3, #32
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
    queue[idx].z = z;
 800148e:	490d      	ldr	r1, [pc, #52]	@ (80014c4 <Render_EnqueueFillRect+0x110>)
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	0013      	movs	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	189b      	adds	r3, r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	18cb      	adds	r3, r1, r3
 800149c:	3314      	adds	r3, #20
 800149e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014a0:	601a      	str	r2, [r3, #0]
    q_count++;
 80014a2:	4b05      	ldr	r3, [pc, #20]	@ (80014b8 <Render_EnqueueFillRect+0x104>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	1c5a      	adds	r2, r3, #1
 80014a8:	4b03      	ldr	r3, [pc, #12]	@ (80014b8 <Render_EnqueueFillRect+0x104>)
 80014aa:	601a      	str	r2, [r3, #0]
    return 0;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	0018      	movs	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b006      	add	sp, #24
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	46c0      	nop			@ (mov r8, r8)
 80014b8:	200027cc 	.word	0x200027cc
 80014bc:	200027c8 	.word	0x200027c8
 80014c0:	8000003f 	.word	0x8000003f
 80014c4:	20001ec8 	.word	0x20001ec8

080014c8 <Render_EnqueueBlitBitmap>:

/* Enqueue blit - src_w is sprite width in memory */
int Render_EnqueueBlitBitmap(const uint16_t *pixels,int w,int h,int x,int y,int z,int src_w){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
 80014d4:	603b      	str	r3, [r7, #0]
    if(q_count >= MAX_QUEUE) return -1;
 80014d6:	4b39      	ldr	r3, [pc, #228]	@ (80015bc <Render_EnqueueBlitBitmap+0xf4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b3f      	cmp	r3, #63	@ 0x3f
 80014dc:	dd02      	ble.n	80014e4 <Render_EnqueueBlitBitmap+0x1c>
 80014de:	2301      	movs	r3, #1
 80014e0:	425b      	negs	r3, r3
 80014e2:	e066      	b.n	80015b2 <Render_EnqueueBlitBitmap+0xea>
    int idx = (q_head + q_count) % MAX_QUEUE;
 80014e4:	4b36      	ldr	r3, [pc, #216]	@ (80015c0 <Render_EnqueueBlitBitmap+0xf8>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b34      	ldr	r3, [pc, #208]	@ (80015bc <Render_EnqueueBlitBitmap+0xf4>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	18d3      	adds	r3, r2, r3
 80014ee:	4a35      	ldr	r2, [pc, #212]	@ (80015c4 <Render_EnqueueBlitBitmap+0xfc>)
 80014f0:	4013      	ands	r3, r2
 80014f2:	d504      	bpl.n	80014fe <Render_EnqueueBlitBitmap+0x36>
 80014f4:	3b01      	subs	r3, #1
 80014f6:	2240      	movs	r2, #64	@ 0x40
 80014f8:	4252      	negs	r2, r2
 80014fa:	4313      	orrs	r3, r2
 80014fc:	3301      	adds	r3, #1
 80014fe:	617b      	str	r3, [r7, #20]
    queue[idx].type = CMD_BLIT;
 8001500:	4931      	ldr	r1, [pc, #196]	@ (80015c8 <Render_EnqueueBlitBitmap+0x100>)
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	0013      	movs	r3, r2
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	189b      	adds	r3, r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	2201      	movs	r2, #1
 800150e:	545a      	strb	r2, [r3, r1]
    queue[idx].x = x; queue[idx].y = y;
 8001510:	492d      	ldr	r1, [pc, #180]	@ (80015c8 <Render_EnqueueBlitBitmap+0x100>)
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	0013      	movs	r3, r2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	189b      	adds	r3, r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	18cb      	adds	r3, r1, r3
 800151e:	3304      	adds	r3, #4
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	4928      	ldr	r1, [pc, #160]	@ (80015c8 <Render_EnqueueBlitBitmap+0x100>)
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	0013      	movs	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	189b      	adds	r3, r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	18cb      	adds	r3, r1, r3
 8001532:	3308      	adds	r3, #8
 8001534:	6a3a      	ldr	r2, [r7, #32]
 8001536:	601a      	str	r2, [r3, #0]
    queue[idx].w = w; queue[idx].h = h;
 8001538:	4923      	ldr	r1, [pc, #140]	@ (80015c8 <Render_EnqueueBlitBitmap+0x100>)
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	0013      	movs	r3, r2
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	189b      	adds	r3, r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	18cb      	adds	r3, r1, r3
 8001546:	330c      	adds	r3, #12
 8001548:	68ba      	ldr	r2, [r7, #8]
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	491e      	ldr	r1, [pc, #120]	@ (80015c8 <Render_EnqueueBlitBitmap+0x100>)
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	0013      	movs	r3, r2
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	189b      	adds	r3, r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	18cb      	adds	r3, r1, r3
 800155a:	3310      	adds	r3, #16
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	601a      	str	r2, [r3, #0]
    queue[idx].z = z;
 8001560:	4919      	ldr	r1, [pc, #100]	@ (80015c8 <Render_EnqueueBlitBitmap+0x100>)
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	0013      	movs	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	189b      	adds	r3, r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	18cb      	adds	r3, r1, r3
 800156e:	3314      	adds	r3, #20
 8001570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001572:	601a      	str	r2, [r3, #0]
    queue[idx].pixels = pixels;
 8001574:	4914      	ldr	r1, [pc, #80]	@ (80015c8 <Render_EnqueueBlitBitmap+0x100>)
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	0013      	movs	r3, r2
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	189b      	adds	r3, r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	18cb      	adds	r3, r1, r3
 8001582:	331c      	adds	r3, #28
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	601a      	str	r2, [r3, #0]
    queue[idx].src_w = src_w ? src_w : w; /* if src_w==0 assume tight */
 8001588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <Render_EnqueueBlitBitmap+0xca>
 800158e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001590:	e000      	b.n	8001594 <Render_EnqueueBlitBitmap+0xcc>
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	480c      	ldr	r0, [pc, #48]	@ (80015c8 <Render_EnqueueBlitBitmap+0x100>)
 8001596:	6979      	ldr	r1, [r7, #20]
 8001598:	000b      	movs	r3, r1
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	185b      	adds	r3, r3, r1
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	18c3      	adds	r3, r0, r3
 80015a2:	3320      	adds	r3, #32
 80015a4:	601a      	str	r2, [r3, #0]
    q_count++;
 80015a6:	4b05      	ldr	r3, [pc, #20]	@ (80015bc <Render_EnqueueBlitBitmap+0xf4>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	1c5a      	adds	r2, r3, #1
 80015ac:	4b03      	ldr	r3, [pc, #12]	@ (80015bc <Render_EnqueueBlitBitmap+0xf4>)
 80015ae:	601a      	str	r2, [r3, #0]
    return 0;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	0018      	movs	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	b006      	add	sp, #24
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	46c0      	nop			@ (mov r8, r8)
 80015bc:	200027cc 	.word	0x200027cc
 80015c0:	200027c8 	.word	0x200027c8
 80015c4:	8000003f 	.word	0x8000003f
 80015c8:	20001ec8 	.word	0x20001ec8

080015cc <Render_Process>:


/* Process queue: copy to temp linear array, sort by z asc, then draw. */
void Render_Process(void){
 80015cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ce:	4ced      	ldr	r4, [pc, #948]	@ (8001984 <Render_Process+0x3b8>)
 80015d0:	44a5      	add	sp, r4
 80015d2:	af04      	add	r7, sp, #16
    if(q_count == 0) return;
 80015d4:	4bec      	ldr	r3, [pc, #944]	@ (8001988 <Render_Process+0x3bc>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d100      	bne.n	80015de <Render_Process+0x12>
 80015dc:	e1f0      	b.n	80019c0 <Render_Process+0x3f4>

    /* 1) copy to linear array */
    Cmd list[MAX_QUEUE];
    int n = q_count;
 80015de:	4bea      	ldr	r3, [pc, #936]	@ (8001988 <Render_Process+0x3bc>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4aea      	ldr	r2, [pc, #936]	@ (800198c <Render_Process+0x3c0>)
 80015e4:	18ba      	adds	r2, r7, r2
 80015e6:	6013      	str	r3, [r2, #0]
    for(int i=0;i<n;i++){
 80015e8:	2300      	movs	r3, #0
 80015ea:	4ae9      	ldr	r2, [pc, #932]	@ (8001990 <Render_Process+0x3c4>)
 80015ec:	18ba      	adds	r2, r7, r2
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	e030      	b.n	8001654 <Render_Process+0x88>
        int idx = (q_head + i) % MAX_QUEUE;
 80015f2:	4be8      	ldr	r3, [pc, #928]	@ (8001994 <Render_Process+0x3c8>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	4be6      	ldr	r3, [pc, #920]	@ (8001990 <Render_Process+0x3c4>)
 80015f8:	18fb      	adds	r3, r7, r3
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	18d3      	adds	r3, r2, r3
 80015fe:	4ae6      	ldr	r2, [pc, #920]	@ (8001998 <Render_Process+0x3cc>)
 8001600:	4013      	ands	r3, r2
 8001602:	d504      	bpl.n	800160e <Render_Process+0x42>
 8001604:	3b01      	subs	r3, #1
 8001606:	2240      	movs	r2, #64	@ 0x40
 8001608:	4252      	negs	r2, r2
 800160a:	4313      	orrs	r3, r2
 800160c:	3301      	adds	r3, #1
 800160e:	49e3      	ldr	r1, [pc, #908]	@ (800199c <Render_Process+0x3d0>)
 8001610:	187a      	adds	r2, r7, r1
 8001612:	6013      	str	r3, [r2, #0]
        list[i] = queue[idx];
 8001614:	4be2      	ldr	r3, [pc, #904]	@ (80019a0 <Render_Process+0x3d4>)
 8001616:	2298      	movs	r2, #152	@ 0x98
 8001618:	0112      	lsls	r2, r2, #4
 800161a:	189b      	adds	r3, r3, r2
 800161c:	19dc      	adds	r4, r3, r7
 800161e:	4ddc      	ldr	r5, [pc, #880]	@ (8001990 <Render_Process+0x3c4>)
 8001620:	197b      	adds	r3, r7, r5
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	0013      	movs	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	189b      	adds	r3, r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	48dd      	ldr	r0, [pc, #884]	@ (80019a4 <Render_Process+0x3d8>)
 800162e:	187a      	adds	r2, r7, r1
 8001630:	6811      	ldr	r1, [r2, #0]
 8001632:	000a      	movs	r2, r1
 8001634:	00d2      	lsls	r2, r2, #3
 8001636:	1852      	adds	r2, r2, r1
 8001638:	0092      	lsls	r2, r2, #2
 800163a:	18e3      	adds	r3, r4, r3
 800163c:	1882      	adds	r2, r0, r2
 800163e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001640:	c313      	stmia	r3!, {r0, r1, r4}
 8001642:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001644:	c313      	stmia	r3!, {r0, r1, r4}
 8001646:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001648:	c313      	stmia	r3!, {r0, r1, r4}
    for(int i=0;i<n;i++){
 800164a:	197b      	adds	r3, r7, r5
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	3301      	adds	r3, #1
 8001650:	197a      	adds	r2, r7, r5
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	4bce      	ldr	r3, [pc, #824]	@ (8001990 <Render_Process+0x3c4>)
 8001656:	18fb      	adds	r3, r7, r3
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	4bcc      	ldr	r3, [pc, #816]	@ (800198c <Render_Process+0x3c0>)
 800165c:	18fb      	adds	r3, r7, r3
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	429a      	cmp	r2, r3
 8001662:	dbc6      	blt.n	80015f2 <Render_Process+0x26>
    }
    /* reset queue quickly */
    q_head = 0; q_count = 0;
 8001664:	4bcb      	ldr	r3, [pc, #812]	@ (8001994 <Render_Process+0x3c8>)
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	4bc7      	ldr	r3, [pc, #796]	@ (8001988 <Render_Process+0x3bc>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]

    /* 2) sort by z (ascending) - simple stable sort */
    for(int i=0;i<n-1;i++){
 8001670:	2300      	movs	r3, #0
 8001672:	4acd      	ldr	r2, [pc, #820]	@ (80019a8 <Render_Process+0x3dc>)
 8001674:	18ba      	adds	r2, r7, r2
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	e07c      	b.n	8001774 <Render_Process+0x1a8>
        for(int j=i+1;j<n;j++){
 800167a:	4bcb      	ldr	r3, [pc, #812]	@ (80019a8 <Render_Process+0x3dc>)
 800167c:	18fb      	adds	r3, r7, r3
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	3301      	adds	r3, #1
 8001682:	4aca      	ldr	r2, [pc, #808]	@ (80019ac <Render_Process+0x3e0>)
 8001684:	18ba      	adds	r2, r7, r2
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	e066      	b.n	8001758 <Render_Process+0x18c>
            if(list[i].z > list[j].z){
 800168a:	4bc5      	ldr	r3, [pc, #788]	@ (80019a0 <Render_Process+0x3d4>)
 800168c:	2598      	movs	r5, #152	@ 0x98
 800168e:	012d      	lsls	r5, r5, #4
 8001690:	195b      	adds	r3, r3, r5
 8001692:	19d9      	adds	r1, r3, r7
 8001694:	4cc4      	ldr	r4, [pc, #784]	@ (80019a8 <Render_Process+0x3dc>)
 8001696:	193b      	adds	r3, r7, r4
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	0013      	movs	r3, r2
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	189b      	adds	r3, r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	18cb      	adds	r3, r1, r3
 80016a4:	3314      	adds	r3, #20
 80016a6:	6819      	ldr	r1, [r3, #0]
 80016a8:	4bbd      	ldr	r3, [pc, #756]	@ (80019a0 <Render_Process+0x3d4>)
 80016aa:	195b      	adds	r3, r3, r5
 80016ac:	19d8      	adds	r0, r3, r7
 80016ae:	4ebf      	ldr	r6, [pc, #764]	@ (80019ac <Render_Process+0x3e0>)
 80016b0:	19bb      	adds	r3, r7, r6
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	0013      	movs	r3, r2
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	189b      	adds	r3, r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	18c3      	adds	r3, r0, r3
 80016be:	3314      	adds	r3, #20
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4299      	cmp	r1, r3
 80016c4:	dd42      	ble.n	800174c <Render_Process+0x180>
                Cmd tmp = list[i];
 80016c6:	4bba      	ldr	r3, [pc, #744]	@ (80019b0 <Render_Process+0x3e4>)
 80016c8:	195b      	adds	r3, r3, r5
 80016ca:	19d8      	adds	r0, r3, r7
 80016cc:	4bb4      	ldr	r3, [pc, #720]	@ (80019a0 <Render_Process+0x3d4>)
 80016ce:	195b      	adds	r3, r3, r5
 80016d0:	19d9      	adds	r1, r3, r7
 80016d2:	0026      	movs	r6, r4
 80016d4:	193b      	adds	r3, r7, r4
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	0013      	movs	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	189b      	adds	r3, r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	0002      	movs	r2, r0
 80016e2:	18cb      	adds	r3, r1, r3
 80016e4:	cb13      	ldmia	r3!, {r0, r1, r4}
 80016e6:	c213      	stmia	r2!, {r0, r1, r4}
 80016e8:	cb13      	ldmia	r3!, {r0, r1, r4}
 80016ea:	c213      	stmia	r2!, {r0, r1, r4}
 80016ec:	cb13      	ldmia	r3!, {r0, r1, r4}
 80016ee:	c213      	stmia	r2!, {r0, r1, r4}
                list[i] = list[j];
 80016f0:	4bab      	ldr	r3, [pc, #684]	@ (80019a0 <Render_Process+0x3d4>)
 80016f2:	195b      	adds	r3, r3, r5
 80016f4:	19dc      	adds	r4, r3, r7
 80016f6:	19bb      	adds	r3, r7, r6
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	0013      	movs	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	189b      	adds	r3, r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4aa7      	ldr	r2, [pc, #668]	@ (80019a0 <Render_Process+0x3d4>)
 8001704:	1952      	adds	r2, r2, r5
 8001706:	19d0      	adds	r0, r2, r7
 8001708:	4ea8      	ldr	r6, [pc, #672]	@ (80019ac <Render_Process+0x3e0>)
 800170a:	19ba      	adds	r2, r7, r6
 800170c:	6811      	ldr	r1, [r2, #0]
 800170e:	000a      	movs	r2, r1
 8001710:	00d2      	lsls	r2, r2, #3
 8001712:	1852      	adds	r2, r2, r1
 8001714:	0092      	lsls	r2, r2, #2
 8001716:	18e3      	adds	r3, r4, r3
 8001718:	1882      	adds	r2, r0, r2
 800171a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800171c:	c313      	stmia	r3!, {r0, r1, r4}
 800171e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001720:	c313      	stmia	r3!, {r0, r1, r4}
 8001722:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001724:	c313      	stmia	r3!, {r0, r1, r4}
                list[j] = tmp;
 8001726:	4b9e      	ldr	r3, [pc, #632]	@ (80019a0 <Render_Process+0x3d4>)
 8001728:	195b      	adds	r3, r3, r5
 800172a:	19d9      	adds	r1, r3, r7
 800172c:	19bb      	adds	r3, r7, r6
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	0013      	movs	r3, r2
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	189b      	adds	r3, r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4a9d      	ldr	r2, [pc, #628]	@ (80019b0 <Render_Process+0x3e4>)
 800173a:	1952      	adds	r2, r2, r5
 800173c:	19d2      	adds	r2, r2, r7
 800173e:	18cb      	adds	r3, r1, r3
 8001740:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001742:	c313      	stmia	r3!, {r0, r1, r4}
 8001744:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001746:	c313      	stmia	r3!, {r0, r1, r4}
 8001748:	ca13      	ldmia	r2!, {r0, r1, r4}
 800174a:	c313      	stmia	r3!, {r0, r1, r4}
        for(int j=i+1;j<n;j++){
 800174c:	4a97      	ldr	r2, [pc, #604]	@ (80019ac <Render_Process+0x3e0>)
 800174e:	18bb      	adds	r3, r7, r2
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	3301      	adds	r3, #1
 8001754:	18ba      	adds	r2, r7, r2
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	4b94      	ldr	r3, [pc, #592]	@ (80019ac <Render_Process+0x3e0>)
 800175a:	18fb      	adds	r3, r7, r3
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	4b8b      	ldr	r3, [pc, #556]	@ (800198c <Render_Process+0x3c0>)
 8001760:	18fb      	adds	r3, r7, r3
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	429a      	cmp	r2, r3
 8001766:	db90      	blt.n	800168a <Render_Process+0xbe>
    for(int i=0;i<n-1;i++){
 8001768:	4a8f      	ldr	r2, [pc, #572]	@ (80019a8 <Render_Process+0x3dc>)
 800176a:	18bb      	adds	r3, r7, r2
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	3301      	adds	r3, #1
 8001770:	18ba      	adds	r2, r7, r2
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	4b85      	ldr	r3, [pc, #532]	@ (800198c <Render_Process+0x3c0>)
 8001776:	18fb      	adds	r3, r7, r3
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	3b01      	subs	r3, #1
 800177c:	4a8a      	ldr	r2, [pc, #552]	@ (80019a8 <Render_Process+0x3dc>)
 800177e:	18ba      	adds	r2, r7, r2
 8001780:	6812      	ldr	r2, [r2, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	da00      	bge.n	8001788 <Render_Process+0x1bc>
 8001786:	e778      	b.n	800167a <Render_Process+0xae>
            }
        }
    }

    /* 3) process in order */
    for(int ci=0; ci<n; ci++){
 8001788:	2300      	movs	r3, #0
 800178a:	2297      	movs	r2, #151	@ 0x97
 800178c:	0112      	lsls	r2, r2, #4
 800178e:	18ba      	adds	r2, r7, r2
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	e0ec      	b.n	800196e <Render_Process+0x3a2>
        Cmd *c = &list[ci];
 8001794:	2358      	movs	r3, #88	@ 0x58
 8001796:	18f9      	adds	r1, r7, r3
 8001798:	2397      	movs	r3, #151	@ 0x97
 800179a:	011b      	lsls	r3, r3, #4
 800179c:	18fb      	adds	r3, r7, r3
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	0013      	movs	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	189b      	adds	r3, r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	18cb      	adds	r3, r1, r3
 80017aa:	4d82      	ldr	r5, [pc, #520]	@ (80019b4 <Render_Process+0x3e8>)
 80017ac:	197a      	adds	r2, r7, r5
 80017ae:	6013      	str	r3, [r2, #0]

        if(c->type == CMD_FILL){
 80017b0:	197b      	adds	r3, r7, r5
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d13b      	bne.n	8001832 <Render_Process+0x266>
            /* clip */
            int x = c->x, y = c->y, w = c->w, h = c->h;
 80017ba:	197b      	adds	r3, r7, r5
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80017c2:	197b      	adds	r3, r7, r5
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017ca:	197b      	adds	r3, r7, r5
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80017d2:	197b      	adds	r3, r7, r5
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	633b      	str	r3, [r7, #48]	@ 0x30
            int sox=0, soy=0;
 80017da:	2300      	movs	r3, #0
 80017dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017de:	2300      	movs	r3, #0
 80017e0:	62bb      	str	r3, [r7, #40]	@ 0x28
            if(!clip_rect_to_screen(&x,&y,&w,&h,&sox,&soy,0,0)) continue;
 80017e2:	2330      	movs	r3, #48	@ 0x30
 80017e4:	18fc      	adds	r4, r7, r3
 80017e6:	2334      	movs	r3, #52	@ 0x34
 80017e8:	18fa      	adds	r2, r7, r3
 80017ea:	2338      	movs	r3, #56	@ 0x38
 80017ec:	18f9      	adds	r1, r7, r3
 80017ee:	233c      	movs	r3, #60	@ 0x3c
 80017f0:	18f8      	adds	r0, r7, r3
 80017f2:	2300      	movs	r3, #0
 80017f4:	9303      	str	r3, [sp, #12]
 80017f6:	2300      	movs	r3, #0
 80017f8:	9302      	str	r3, [sp, #8]
 80017fa:	2328      	movs	r3, #40	@ 0x28
 80017fc:	18fb      	adds	r3, r7, r3
 80017fe:	9301      	str	r3, [sp, #4]
 8001800:	232c      	movs	r3, #44	@ 0x2c
 8001802:	18fb      	adds	r3, r7, r3
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	0023      	movs	r3, r4
 8001808:	f000 f8e2 	bl	80019d0 <clip_rect_to_screen>
 800180c:	1e03      	subs	r3, r0, #0
 800180e:	d100      	bne.n	8001812 <Render_Process+0x246>
 8001810:	e0a1      	b.n	8001956 <Render_Process+0x38a>
            ILI9341_DrawRectangle(x,y,w,h,c->color);
 8001812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001814:	b298      	uxth	r0, r3
 8001816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001818:	b299      	uxth	r1, r3
 800181a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800181c:	b29a      	uxth	r2, r3
 800181e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001820:	b29c      	uxth	r4, r3
 8001822:	197b      	adds	r3, r7, r5
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	8b1b      	ldrh	r3, [r3, #24]
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	0023      	movs	r3, r4
 800182c:	f000 fece 	bl	80025cc <ILI9341_DrawRectangle>
            continue;
 8001830:	e096      	b.n	8001960 <Render_Process+0x394>
        }

        /* c->type == CMD_BLIT */
        if(c->pixels == NULL) continue;
 8001832:	4e60      	ldr	r6, [pc, #384]	@ (80019b4 <Render_Process+0x3e8>)
 8001834:	19bb      	adds	r3, r7, r6
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d100      	bne.n	8001840 <Render_Process+0x274>
 800183e:	e08c      	b.n	800195a <Render_Process+0x38e>

        /* clip sprite area and compute src offset */
        int x = c->x, y = c->y, w = c->w, h = c->h;
 8001840:	19bb      	adds	r3, r7, r6
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	657b      	str	r3, [r7, #84]	@ 0x54
 8001848:	19bb      	adds	r3, r7, r6
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001850:	19bb      	adds	r3, r7, r6
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001858:	19bb      	adds	r3, r7, r6
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	64bb      	str	r3, [r7, #72]	@ 0x48
        int src_off_x = 0, src_off_y = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	647b      	str	r3, [r7, #68]	@ 0x44
 8001864:	2300      	movs	r3, #0
 8001866:	643b      	str	r3, [r7, #64]	@ 0x40
        if(!clip_rect_to_screen(&x,&y,&w,&h,&src_off_x,&src_off_y,c->src_w,c->h)) continue;
 8001868:	19bb      	adds	r3, r7, r6
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6a1a      	ldr	r2, [r3, #32]
 800186e:	19bb      	adds	r3, r7, r6
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	2148      	movs	r1, #72	@ 0x48
 8001876:	187d      	adds	r5, r7, r1
 8001878:	214c      	movs	r1, #76	@ 0x4c
 800187a:	187c      	adds	r4, r7, r1
 800187c:	2150      	movs	r1, #80	@ 0x50
 800187e:	1879      	adds	r1, r7, r1
 8001880:	2054      	movs	r0, #84	@ 0x54
 8001882:	1838      	adds	r0, r7, r0
 8001884:	9303      	str	r3, [sp, #12]
 8001886:	9202      	str	r2, [sp, #8]
 8001888:	2340      	movs	r3, #64	@ 0x40
 800188a:	18fb      	adds	r3, r7, r3
 800188c:	9301      	str	r3, [sp, #4]
 800188e:	2344      	movs	r3, #68	@ 0x44
 8001890:	18fb      	adds	r3, r7, r3
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	002b      	movs	r3, r5
 8001896:	0022      	movs	r2, r4
 8001898:	f000 f89a 	bl	80019d0 <clip_rect_to_screen>
 800189c:	1e03      	subs	r3, r0, #0
 800189e:	d05e      	beq.n	800195e <Render_Process+0x392>

        const uint16_t *pixels = c->pixels;
 80018a0:	19bb      	adds	r3, r7, r6
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	2196      	movs	r1, #150	@ 0x96
 80018a8:	0109      	lsls	r1, r1, #4
 80018aa:	187a      	adds	r2, r7, r1
 80018ac:	6013      	str	r3, [r2, #0]
        /* start pointer into source pixels: row = src_off_y, col = src_off_x */
        pixels += (src_off_y * c->src_w) + src_off_x;
 80018ae:	19bb      	adds	r3, r7, r6
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80018b6:	435a      	muls	r2, r3
 80018b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018ba:	18d3      	adds	r3, r2, r3
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	187a      	adds	r2, r7, r1
 80018c0:	6812      	ldr	r2, [r2, #0]
 80018c2:	18d3      	adds	r3, r2, r3
 80018c4:	187a      	adds	r2, r7, r1
 80018c6:	6013      	str	r3, [r2, #0]

            /* contiguous block if we clipped whole rect partially: but rows in source may have stride src_w */
            /* We must write row by row because pixels are arranged with src_w stride. */
            for(int row = 0; row < h; row++){
 80018c8:	2300      	movs	r3, #0
 80018ca:	4a3b      	ldr	r2, [pc, #236]	@ (80019b8 <Render_Process+0x3ec>)
 80018cc:	18ba      	adds	r2, r7, r2
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	e03a      	b.n	8001948 <Render_Process+0x37c>
                const uint16_t *row_ptr = pixels + row * c->src_w;
 80018d2:	4b38      	ldr	r3, [pc, #224]	@ (80019b4 <Render_Process+0x3e8>)
 80018d4:	18fb      	adds	r3, r7, r3
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	4d37      	ldr	r5, [pc, #220]	@ (80019b8 <Render_Process+0x3ec>)
 80018dc:	197a      	adds	r2, r7, r5
 80018de:	6812      	ldr	r2, [r2, #0]
 80018e0:	4353      	muls	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	2296      	movs	r2, #150	@ 0x96
 80018e6:	0112      	lsls	r2, r2, #4
 80018e8:	18ba      	adds	r2, r7, r2
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	18d3      	adds	r3, r2, r3
 80018ee:	4e33      	ldr	r6, [pc, #204]	@ (80019bc <Render_Process+0x3f0>)
 80018f0:	19ba      	adds	r2, r7, r6
 80018f2:	6013      	str	r3, [r2, #0]
                ILI9341_SetAddress((uint16_t)x, (uint16_t)(y + row), (uint16_t)(x + w - 1), (uint16_t)(y + row));
 80018f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018f6:	b298      	uxth	r0, r3
 80018f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	197b      	adds	r3, r7, r5
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	b29b      	uxth	r3, r3
 8001902:	18d3      	adds	r3, r2, r3
 8001904:	b299      	uxth	r1, r3
 8001906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001908:	b29a      	uxth	r2, r3
 800190a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800190c:	b29b      	uxth	r3, r3
 800190e:	18d3      	adds	r3, r2, r3
 8001910:	b29b      	uxth	r3, r3
 8001912:	3b01      	subs	r3, #1
 8001914:	b29c      	uxth	r4, r3
 8001916:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001918:	b29a      	uxth	r2, r3
 800191a:	197b      	adds	r3, r7, r5
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	b29b      	uxth	r3, r3
 8001920:	18d3      	adds	r3, r2, r3
 8001922:	b29b      	uxth	r3, r3
 8001924:	0022      	movs	r2, r4
 8001926:	f000 fb07 	bl	8001f38 <ILI9341_SetAddress>
                /* write contiguous row of w pixels */
                ILI9341_WriteBuffer((uint8_t*)row_ptr, (uint16_t)(w * 2));
 800192a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800192c:	b29b      	uxth	r3, r3
 800192e:	18db      	adds	r3, r3, r3
 8001930:	b29a      	uxth	r2, r3
 8001932:	19bb      	adds	r3, r7, r6
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	0011      	movs	r1, r2
 8001938:	0018      	movs	r0, r3
 800193a:	f000 fadb 	bl	8001ef4 <ILI9341_WriteBuffer>
            for(int row = 0; row < h; row++){
 800193e:	197b      	adds	r3, r7, r5
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	3301      	adds	r3, #1
 8001944:	197a      	adds	r2, r7, r5
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800194a:	4a1b      	ldr	r2, [pc, #108]	@ (80019b8 <Render_Process+0x3ec>)
 800194c:	18ba      	adds	r2, r7, r2
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	429a      	cmp	r2, r3
 8001952:	dbbe      	blt.n	80018d2 <Render_Process+0x306>
 8001954:	e004      	b.n	8001960 <Render_Process+0x394>
            if(!clip_rect_to_screen(&x,&y,&w,&h,&sox,&soy,0,0)) continue;
 8001956:	46c0      	nop			@ (mov r8, r8)
 8001958:	e002      	b.n	8001960 <Render_Process+0x394>
        if(c->pixels == NULL) continue;
 800195a:	46c0      	nop			@ (mov r8, r8)
 800195c:	e000      	b.n	8001960 <Render_Process+0x394>
        if(!clip_rect_to_screen(&x,&y,&w,&h,&src_off_x,&src_off_y,c->src_w,c->h)) continue;
 800195e:	46c0      	nop			@ (mov r8, r8)
    for(int ci=0; ci<n; ci++){
 8001960:	2297      	movs	r2, #151	@ 0x97
 8001962:	0112      	lsls	r2, r2, #4
 8001964:	18bb      	adds	r3, r7, r2
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	3301      	adds	r3, #1
 800196a:	18ba      	adds	r2, r7, r2
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	2397      	movs	r3, #151	@ 0x97
 8001970:	011b      	lsls	r3, r3, #4
 8001972:	18fb      	adds	r3, r7, r3
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	4b05      	ldr	r3, [pc, #20]	@ (800198c <Render_Process+0x3c0>)
 8001978:	18fb      	adds	r3, r7, r3
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	429a      	cmp	r2, r3
 800197e:	da00      	bge.n	8001982 <Render_Process+0x3b6>
 8001980:	e708      	b.n	8001794 <Render_Process+0x1c8>
 8001982:	e01e      	b.n	80019c2 <Render_Process+0x3f6>
 8001984:	fffff66c 	.word	0xfffff66c
 8001988:	200027cc 	.word	0x200027cc
 800198c:	00000968 	.word	0x00000968
 8001990:	0000097c 	.word	0x0000097c
 8001994:	200027c8 	.word	0x200027c8
 8001998:	8000003f 	.word	0x8000003f
 800199c:	00000958 	.word	0x00000958
 80019a0:	fffff6d8 	.word	0xfffff6d8
 80019a4:	20001ec8 	.word	0x20001ec8
 80019a8:	00000978 	.word	0x00000978
 80019ac:	00000974 	.word	0x00000974
 80019b0:	fffff684 	.word	0xfffff684
 80019b4:	00000964 	.word	0x00000964
 80019b8:	0000096c 	.word	0x0000096c
 80019bc:	0000095c 	.word	0x0000095c
    if(q_count == 0) return;
 80019c0:	46c0      	nop			@ (mov r8, r8)
            }
    	}
}
 80019c2:	46bd      	mov	sp, r7
 80019c4:	4b01      	ldr	r3, [pc, #4]	@ (80019cc <Render_Process+0x400>)
 80019c6:	449d      	add	sp, r3
 80019c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ca:	46c0      	nop			@ (mov r8, r8)
 80019cc:	00000984 	.word	0x00000984

080019d0 <clip_rect_to_screen>:

/* helper: clip rectangle to screen. Returns 0 if empty, else returns clipped x,y,w,h and updates src offsets */
static int clip_rect_to_screen(int *x,int *y,int *w,int *h,int *src_offset_x,int *src_offset_y,int src_w,int src_h){
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08a      	sub	sp, #40	@ 0x28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
 80019dc:	603b      	str	r3, [r7, #0]
    int sx = *x, sy = *y, sw = *w, sh = *h;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	623b      	str	r3, [r7, #32]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	61fb      	str	r3, [r7, #28]
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	61bb      	str	r3, [r7, #24]
    int offx = 0, offy = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]

    if(sx < 0){
 80019fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	da08      	bge.n	8001a16 <clip_rect_to_screen+0x46>
        offx = -sx;
 8001a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a06:	425b      	negs	r3, r3
 8001a08:	617b      	str	r3, [r7, #20]
        sw += sx; // reduce width
 8001a0a:	69fa      	ldr	r2, [r7, #28]
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0e:	18d3      	adds	r3, r2, r3
 8001a10:	61fb      	str	r3, [r7, #28]
        sx = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    if(sy < 0){
 8001a16:	6a3b      	ldr	r3, [r7, #32]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	da08      	bge.n	8001a2e <clip_rect_to_screen+0x5e>
        offy = -sy;
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	425b      	negs	r3, r3
 8001a20:	613b      	str	r3, [r7, #16]
        sh += sy;
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	6a3b      	ldr	r3, [r7, #32]
 8001a26:	18d3      	adds	r3, r2, r3
 8001a28:	61bb      	str	r3, [r7, #24]
        sy = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	623b      	str	r3, [r7, #32]
    }
    if(sx + sw > (int)ILI9341_SCREEN_WIDTH) sw = ILI9341_SCREEN_WIDTH - sx;
 8001a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	18d2      	adds	r2, r2, r3
 8001a34:	23a0      	movs	r3, #160	@ 0xa0
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	dd04      	ble.n	8001a46 <clip_rect_to_screen+0x76>
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3e:	22a0      	movs	r2, #160	@ 0xa0
 8001a40:	0052      	lsls	r2, r2, #1
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	61fb      	str	r3, [r7, #28]
    if(sy + sh > (int)ILI9341_SCREEN_HEIGHT) sh = ILI9341_SCREEN_HEIGHT - sy;
 8001a46:	6a3a      	ldr	r2, [r7, #32]
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	18d3      	adds	r3, r2, r3
 8001a4c:	2bf0      	cmp	r3, #240	@ 0xf0
 8001a4e:	dd03      	ble.n	8001a58 <clip_rect_to_screen+0x88>
 8001a50:	6a3b      	ldr	r3, [r7, #32]
 8001a52:	22f0      	movs	r2, #240	@ 0xf0
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	61bb      	str	r3, [r7, #24]

    if(sw <= 0 || sh <= 0) return 0;
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	dd02      	ble.n	8001a64 <clip_rect_to_screen+0x94>
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	dc01      	bgt.n	8001a68 <clip_rect_to_screen+0x98>
 8001a64:	2300      	movs	r3, #0
 8001a66:	e012      	b.n	8001a8e <clip_rect_to_screen+0xbe>

    *x = sx; *y = sy; *w = sw; *h = sh;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	6a3a      	ldr	r2, [r7, #32]
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69fa      	ldr	r2, [r7, #28]
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	601a      	str	r2, [r3, #0]
    *src_offset_x = offx;
 8001a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	601a      	str	r2, [r3, #0]
    *src_offset_y = offy;
 8001a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	601a      	str	r2, [r3, #0]
    return 1;
 8001a8c:	2301      	movs	r3, #1
}
 8001a8e:	0018      	movs	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	b00a      	add	sp, #40	@ 0x28
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <ILI9341_DrawFilledRectangleCoord>:
		ILI9341_DrawPixel(X1, Y1, color);
	}
}

void ILI9341_DrawFilledRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 8001a96:	b5b0      	push	{r4, r5, r7, lr}
 8001a98:	b088      	sub	sp, #32
 8001a9a:	af02      	add	r7, sp, #8
 8001a9c:	0005      	movs	r5, r0
 8001a9e:	000c      	movs	r4, r1
 8001aa0:	0010      	movs	r0, r2
 8001aa2:	0019      	movs	r1, r3
 8001aa4:	1dbb      	adds	r3, r7, #6
 8001aa6:	1c2a      	adds	r2, r5, #0
 8001aa8:	801a      	strh	r2, [r3, #0]
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	1c22      	adds	r2, r4, #0
 8001aae:	801a      	strh	r2, [r3, #0]
 8001ab0:	1cbb      	adds	r3, r7, #2
 8001ab2:	1c02      	adds	r2, r0, #0
 8001ab4:	801a      	strh	r2, [r3, #0]
 8001ab6:	003b      	movs	r3, r7
 8001ab8:	1c0a      	adds	r2, r1, #0
 8001aba:	801a      	strh	r2, [r3, #0]
	uint16_t xLen = 0;
 8001abc:	2316      	movs	r3, #22
 8001abe:	18fb      	adds	r3, r7, r3
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	801a      	strh	r2, [r3, #0]
	uint16_t yLen = 0;
 8001ac4:	2314      	movs	r3, #20
 8001ac6:	18fb      	adds	r3, r7, r3
 8001ac8:	2200      	movs	r2, #0
 8001aca:	801a      	strh	r2, [r3, #0]
	uint8_t negX = 0;
 8001acc:	2113      	movs	r1, #19
 8001ace:	187b      	adds	r3, r7, r1
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
	uint8_t negY = 0;
 8001ad4:	2312      	movs	r3, #18
 8001ad6:	18fb      	adds	r3, r7, r3
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
	int32_t negCalc = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60bb      	str	r3, [r7, #8]
	uint16_t X0True = 0;
 8001ae0:	2310      	movs	r3, #16
 8001ae2:	18fb      	adds	r3, r7, r3
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	801a      	strh	r2, [r3, #0]
	uint16_t Y0True = 0;
 8001ae8:	230e      	movs	r3, #14
 8001aea:	18fb      	adds	r3, r7, r3
 8001aec:	2200      	movs	r2, #0
 8001aee:	801a      	strh	r2, [r3, #0]

	negCalc = X1 - X0;
 8001af0:	1cbb      	adds	r3, r7, #2
 8001af2:	881a      	ldrh	r2, [r3, #0]
 8001af4:	1dbb      	adds	r3, r7, #6
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	60bb      	str	r3, [r7, #8]
	if(negCalc < 0) negX = 1;
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	da02      	bge.n	8001b08 <ILI9341_DrawFilledRectangleCoord+0x72>
 8001b02:	187b      	adds	r3, r7, r1
 8001b04:	2201      	movs	r2, #1
 8001b06:	701a      	strb	r2, [r3, #0]
	negCalc = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60bb      	str	r3, [r7, #8]

	negCalc = Y1 - Y0;
 8001b0c:	003b      	movs	r3, r7
 8001b0e:	881a      	ldrh	r2, [r3, #0]
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	60bb      	str	r3, [r7, #8]
	if(negCalc < 0) negY = 1;
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	da03      	bge.n	8001b26 <ILI9341_DrawFilledRectangleCoord+0x90>
 8001b1e:	2312      	movs	r3, #18
 8001b20:	18fb      	adds	r3, r7, r3
 8001b22:	2201      	movs	r2, #1
 8001b24:	701a      	strb	r2, [r3, #0]

	if(!negX)
 8001b26:	2313      	movs	r3, #19
 8001b28:	18fb      	adds	r3, r7, r3
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d10d      	bne.n	8001b4c <ILI9341_DrawFilledRectangleCoord+0xb6>
	{
		xLen = X1 - X0;
 8001b30:	2316      	movs	r3, #22
 8001b32:	18fb      	adds	r3, r7, r3
 8001b34:	1cb9      	adds	r1, r7, #2
 8001b36:	1dba      	adds	r2, r7, #6
 8001b38:	8809      	ldrh	r1, [r1, #0]
 8001b3a:	8812      	ldrh	r2, [r2, #0]
 8001b3c:	1a8a      	subs	r2, r1, r2
 8001b3e:	801a      	strh	r2, [r3, #0]
		X0True = X0;
 8001b40:	2310      	movs	r3, #16
 8001b42:	18fb      	adds	r3, r7, r3
 8001b44:	1dba      	adds	r2, r7, #6
 8001b46:	8812      	ldrh	r2, [r2, #0]
 8001b48:	801a      	strh	r2, [r3, #0]
 8001b4a:	e00c      	b.n	8001b66 <ILI9341_DrawFilledRectangleCoord+0xd0>
	}
	else
	{
		xLen = X0 - X1;
 8001b4c:	2316      	movs	r3, #22
 8001b4e:	18fb      	adds	r3, r7, r3
 8001b50:	1db9      	adds	r1, r7, #6
 8001b52:	1cba      	adds	r2, r7, #2
 8001b54:	8809      	ldrh	r1, [r1, #0]
 8001b56:	8812      	ldrh	r2, [r2, #0]
 8001b58:	1a8a      	subs	r2, r1, r2
 8001b5a:	801a      	strh	r2, [r3, #0]
		X0True = X1;
 8001b5c:	2310      	movs	r3, #16
 8001b5e:	18fb      	adds	r3, r7, r3
 8001b60:	1cba      	adds	r2, r7, #2
 8001b62:	8812      	ldrh	r2, [r2, #0]
 8001b64:	801a      	strh	r2, [r3, #0]
	}

	if(!negY)
 8001b66:	2312      	movs	r3, #18
 8001b68:	18fb      	adds	r3, r7, r3
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d10d      	bne.n	8001b8c <ILI9341_DrawFilledRectangleCoord+0xf6>
	{
		yLen = Y1 - Y0;
 8001b70:	2314      	movs	r3, #20
 8001b72:	18fb      	adds	r3, r7, r3
 8001b74:	0039      	movs	r1, r7
 8001b76:	1d3a      	adds	r2, r7, #4
 8001b78:	8809      	ldrh	r1, [r1, #0]
 8001b7a:	8812      	ldrh	r2, [r2, #0]
 8001b7c:	1a8a      	subs	r2, r1, r2
 8001b7e:	801a      	strh	r2, [r3, #0]
		Y0True = Y0;
 8001b80:	230e      	movs	r3, #14
 8001b82:	18fb      	adds	r3, r7, r3
 8001b84:	1d3a      	adds	r2, r7, #4
 8001b86:	8812      	ldrh	r2, [r2, #0]
 8001b88:	801a      	strh	r2, [r3, #0]
 8001b8a:	e00c      	b.n	8001ba6 <ILI9341_DrawFilledRectangleCoord+0x110>
	}
	else
	{
		yLen = Y0 - Y1;
 8001b8c:	2314      	movs	r3, #20
 8001b8e:	18fb      	adds	r3, r7, r3
 8001b90:	1d39      	adds	r1, r7, #4
 8001b92:	003a      	movs	r2, r7
 8001b94:	8809      	ldrh	r1, [r1, #0]
 8001b96:	8812      	ldrh	r2, [r2, #0]
 8001b98:	1a8a      	subs	r2, r1, r2
 8001b9a:	801a      	strh	r2, [r3, #0]
		Y0True = Y1;
 8001b9c:	230e      	movs	r3, #14
 8001b9e:	18fb      	adds	r3, r7, r3
 8001ba0:	003a      	movs	r2, r7
 8001ba2:	8812      	ldrh	r2, [r2, #0]
 8001ba4:	801a      	strh	r2, [r3, #0]
	}

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
 8001ba6:	2314      	movs	r3, #20
 8001ba8:	18fb      	adds	r3, r7, r3
 8001baa:	881c      	ldrh	r4, [r3, #0]
 8001bac:	2316      	movs	r3, #22
 8001bae:	18fb      	adds	r3, r7, r3
 8001bb0:	881a      	ldrh	r2, [r3, #0]
 8001bb2:	230e      	movs	r3, #14
 8001bb4:	18fb      	adds	r3, r7, r3
 8001bb6:	8819      	ldrh	r1, [r3, #0]
 8001bb8:	2310      	movs	r3, #16
 8001bba:	18fb      	adds	r3, r7, r3
 8001bbc:	8818      	ldrh	r0, [r3, #0]
 8001bbe:	2328      	movs	r3, #40	@ 0x28
 8001bc0:	18fb      	adds	r3, r7, r3
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	0023      	movs	r3, r4
 8001bc8:	f000 fd00 	bl	80025cc <ILI9341_DrawRectangle>
}
 8001bcc:	46c0      	nop			@ (mov r8, r8)
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	b006      	add	sp, #24
 8001bd2:	bdb0      	pop	{r4, r5, r7, pc}

08001bd4 <ILI9341_DrawChar>:

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8001bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bd6:	b08d      	sub	sp, #52	@ 0x34
 8001bd8:	af02      	add	r7, sp, #8
 8001bda:	0004      	movs	r4, r0
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	0010      	movs	r0, r2
 8001be0:	0019      	movs	r1, r3
 8001be2:	250f      	movs	r5, #15
 8001be4:	197b      	adds	r3, r7, r5
 8001be6:	1c22      	adds	r2, r4, #0
 8001be8:	701a      	strb	r2, [r3, #0]
 8001bea:	260c      	movs	r6, #12
 8001bec:	19bb      	adds	r3, r7, r6
 8001bee:	1c02      	adds	r2, r0, #0
 8001bf0:	801a      	strh	r2, [r3, #0]
 8001bf2:	1dbb      	adds	r3, r7, #6
 8001bf4:	1c0a      	adds	r2, r1, #0
 8001bf6:	801a      	strh	r2, [r3, #0]
	if ((ch < 31) || (ch > 127)) return;
 8001bf8:	0029      	movs	r1, r5
 8001bfa:	187b      	adds	r3, r7, r1
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b1e      	cmp	r3, #30
 8001c00:	d800      	bhi.n	8001c04 <ILI9341_DrawChar+0x30>
 8001c02:	e088      	b.n	8001d16 <ILI9341_DrawChar+0x142>
 8001c04:	187b      	adds	r3, r7, r1
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	b25b      	sxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	da00      	bge.n	8001c10 <ILI9341_DrawChar+0x3c>
 8001c0e:	e082      	b.n	8001d16 <ILI9341_DrawChar+0x142>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 8001c10:	201f      	movs	r0, #31
 8001c12:	183b      	adds	r3, r7, r0
 8001c14:	68ba      	ldr	r2, [r7, #8]
 8001c16:	7812      	ldrb	r2, [r2, #0]
 8001c18:	701a      	strb	r2, [r3, #0]
	fWidth = font[1];
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	241e      	movs	r4, #30
 8001c20:	193b      	adds	r3, r7, r4
 8001c22:	7812      	ldrb	r2, [r2, #0]
 8001c24:	701a      	strb	r2, [r3, #0]
	fHeight = font[2];
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	1c9a      	adds	r2, r3, #2
 8001c2a:	251d      	movs	r5, #29
 8001c2c:	197b      	adds	r3, r7, r5
 8001c2e:	7812      	ldrb	r2, [r2, #0]
 8001c30:	701a      	strb	r2, [r3, #0]
	fBPL = font[3];
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	1cda      	adds	r2, r3, #3
 8001c36:	231c      	movs	r3, #28
 8001c38:	18fb      	adds	r3, r7, r3
 8001c3a:	7812      	ldrb	r2, [r2, #0]
 8001c3c:	701a      	strb	r2, [r3, #0]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8001c3e:	187b      	adds	r3, r7, r1
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	3b20      	subs	r3, #32
 8001c44:	183a      	adds	r2, r7, r0
 8001c46:	7812      	ldrb	r2, [r2, #0]
 8001c48:	4353      	muls	r3, r2
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	18d3      	adds	r3, r2, r3
 8001c50:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8001c52:	193b      	adds	r3, r7, r4
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	197b      	adds	r3, r7, r5
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	b29c      	uxth	r4, r3
 8001c5e:	1dbb      	adds	r3, r7, #6
 8001c60:	8819      	ldrh	r1, [r3, #0]
 8001c62:	19bb      	adds	r3, r7, r6
 8001c64:	8818      	ldrh	r0, [r3, #0]
 8001c66:	233c      	movs	r3, #60	@ 0x3c
 8001c68:	2508      	movs	r5, #8
 8001c6a:	195b      	adds	r3, r3, r5
 8001c6c:	19db      	adds	r3, r3, r7
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	0023      	movs	r3, r4
 8001c74:	f000 fcaa 	bl	80025cc <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c7c:	e044      	b.n	8001d08 <ILI9341_DrawChar+0x134>
	{
		for (int i=0; i < fWidth; i++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	623b      	str	r3, [r7, #32]
 8001c82:	e038      	b.n	8001cf6 <ILI9341_DrawChar+0x122>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8001c84:	231c      	movs	r3, #28
 8001c86:	18fb      	adds	r3, r7, r3
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	6a3a      	ldr	r2, [r7, #32]
 8001c8c:	435a      	muls	r2, r3
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c90:	10db      	asrs	r3, r3, #3
 8001c92:	211f      	movs	r1, #31
 8001c94:	400b      	ands	r3, r1
 8001c96:	18d3      	adds	r3, r2, r3
 8001c98:	3301      	adds	r3, #1
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	18d2      	adds	r2, r2, r3
 8001c9e:	2117      	movs	r1, #23
 8001ca0:	187b      	adds	r3, r7, r1
 8001ca2:	7812      	ldrb	r2, [r2, #0]
 8001ca4:	701a      	strb	r2, [r3, #0]
			uint8_t b = 1 << (j & 0x07);
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca8:	2207      	movs	r2, #7
 8001caa:	4013      	ands	r3, r2
 8001cac:	2201      	movs	r2, #1
 8001cae:	409a      	lsls	r2, r3
 8001cb0:	2016      	movs	r0, #22
 8001cb2:	183b      	adds	r3, r7, r0
 8001cb4:	701a      	strb	r2, [r3, #0]
			if (( z & b ) != 0x00)
 8001cb6:	187b      	adds	r3, r7, r1
 8001cb8:	183a      	adds	r2, r7, r0
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	7812      	ldrb	r2, [r2, #0]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d014      	beq.n	8001cf0 <ILI9341_DrawChar+0x11c>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	230c      	movs	r3, #12
 8001ccc:	18fb      	adds	r3, r7, r3
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	18d3      	adds	r3, r2, r3
 8001cd2:	b298      	uxth	r0, r3
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	1dbb      	adds	r3, r7, #6
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	18d3      	adds	r3, r2, r3
 8001cde:	b299      	uxth	r1, r3
 8001ce0:	2338      	movs	r3, #56	@ 0x38
 8001ce2:	2208      	movs	r2, #8
 8001ce4:	189b      	adds	r3, r3, r2
 8001ce6:	19db      	adds	r3, r3, r7
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	001a      	movs	r2, r3
 8001cec:	f000 fbec 	bl	80024c8 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	623b      	str	r3, [r7, #32]
 8001cf6:	231e      	movs	r3, #30
 8001cf8:	18fb      	adds	r3, r7, r3
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	6a3a      	ldr	r2, [r7, #32]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	dbc0      	blt.n	8001c84 <ILI9341_DrawChar+0xb0>
	for (int j=0; j < fHeight; j++)
 8001d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d04:	3301      	adds	r3, #1
 8001d06:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d08:	231d      	movs	r3, #29
 8001d0a:	18fb      	adds	r3, r7, r3
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d10:	429a      	cmp	r2, r3
 8001d12:	dbb4      	blt.n	8001c7e <ILI9341_DrawChar+0xaa>
 8001d14:	e000      	b.n	8001d18 <ILI9341_DrawChar+0x144>
	if ((ch < 31) || (ch > 127)) return;
 8001d16:	46c0      	nop			@ (mov r8, r8)
			}
		}
	}
}
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	b00b      	add	sp, #44	@ 0x2c
 8001d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d1e <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8001d1e:	b590      	push	{r4, r7, lr}
 8001d20:	b08b      	sub	sp, #44	@ 0x2c
 8001d22:	af02      	add	r7, sp, #8
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	0019      	movs	r1, r3
 8001d2a:	1dbb      	adds	r3, r7, #6
 8001d2c:	801a      	strh	r2, [r3, #0]
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	1c0a      	adds	r2, r1, #0
 8001d32:	801a      	strh	r2, [r3, #0]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 8001d34:	231f      	movs	r3, #31
 8001d36:	18fb      	adds	r3, r7, r3
 8001d38:	68ba      	ldr	r2, [r7, #8]
 8001d3a:	7812      	ldrb	r2, [r2, #0]
 8001d3c:	701a      	strb	r2, [r3, #0]
	uint8_t fWidth = font[1];	/* Width of font */
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	1c5a      	adds	r2, r3, #1
 8001d42:	231e      	movs	r3, #30
 8001d44:	18fb      	adds	r3, r7, r3
 8001d46:	7812      	ldrb	r2, [r2, #0]
 8001d48:	701a      	strb	r2, [r3, #0]

	while (*str)
 8001d4a:	e040      	b.n	8001dce <ILI9341_DrawText+0xb0>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	7818      	ldrb	r0, [r3, #0]
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	881c      	ldrh	r4, [r3, #0]
 8001d54:	1dbb      	adds	r3, r7, #6
 8001d56:	881a      	ldrh	r2, [r3, #0]
 8001d58:	68b9      	ldr	r1, [r7, #8]
 8001d5a:	2334      	movs	r3, #52	@ 0x34
 8001d5c:	18fb      	adds	r3, r7, r3
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	9301      	str	r3, [sp, #4]
 8001d62:	2330      	movs	r3, #48	@ 0x30
 8001d64:	18fb      	adds	r3, r7, r3
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	0023      	movs	r3, r4
 8001d6c:	f7ff ff32 	bl	8001bd4 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	3b20      	subs	r3, #32
 8001d76:	221f      	movs	r2, #31
 8001d78:	18ba      	adds	r2, r7, r2
 8001d7a:	7812      	ldrb	r2, [r2, #0]
 8001d7c:	4353      	muls	r3, r2
 8001d7e:	3304      	adds	r3, #4
 8001d80:	68ba      	ldr	r2, [r7, #8]
 8001d82:	18d3      	adds	r3, r2, r3
 8001d84:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 8001d86:	2117      	movs	r1, #23
 8001d88:	187b      	adds	r3, r7, r1
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	7812      	ldrb	r2, [r2, #0]
 8001d8e:	701a      	strb	r2, [r3, #0]

		if(charWidth + 2 < fWidth)
 8001d90:	187b      	adds	r3, r7, r1
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	1c9a      	adds	r2, r3, #2
 8001d96:	231e      	movs	r3, #30
 8001d98:	18fb      	adds	r3, r7, r3
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	da0a      	bge.n	8001db6 <ILI9341_DrawText+0x98>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 8001da0:	187b      	adds	r3, r7, r1
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	1dbb      	adds	r3, r7, #6
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	18d3      	adds	r3, r2, r3
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	1dbb      	adds	r3, r7, #6
 8001db0:	3202      	adds	r2, #2
 8001db2:	801a      	strh	r2, [r3, #0]
 8001db4:	e008      	b.n	8001dc8 <ILI9341_DrawText+0xaa>
		}
		else
		{
			X += fWidth;
 8001db6:	231e      	movs	r3, #30
 8001db8:	18fb      	adds	r3, r7, r3
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	b299      	uxth	r1, r3
 8001dbe:	1dbb      	adds	r3, r7, #6
 8001dc0:	1dba      	adds	r2, r7, #6
 8001dc2:	8812      	ldrh	r2, [r2, #0]
 8001dc4:	188a      	adds	r2, r1, r2
 8001dc6:	801a      	strh	r2, [r3, #0]
		}

		str++;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	60fb      	str	r3, [r7, #12]
	while (*str)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1ba      	bne.n	8001d4c <ILI9341_DrawText+0x2e>
	}
}
 8001dd6:	46c0      	nop			@ (mov r8, r8)
 8001dd8:	46c0      	nop			@ (mov r8, r8)
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b009      	add	sp, #36	@ 0x24
 8001dde:	bd90      	pop	{r4, r7, pc}

08001de0 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;
static volatile uint8_t spi_busy = 0;
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	4b07      	ldr	r3, [pc, #28]	@ (8001e08 <HAL_SPI_TxCpltCallback+0x28>)
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d106      	bne.n	8001dfe <HAL_SPI_TxCpltCallback+0x1e>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001df0:	2380      	movs	r3, #128	@ 0x80
 8001df2:	01db      	lsls	r3, r3, #7
 8001df4:	4805      	ldr	r0, [pc, #20]	@ (8001e0c <HAL_SPI_TxCpltCallback+0x2c>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	0019      	movs	r1, r3
 8001dfa:	f002 fad2 	bl	80043a2 <HAL_GPIO_WritePin>
  }
}
 8001dfe:	46c0      	nop			@ (mov r8, r8)
 8001e00:	46bd      	mov	sp, r7
 8001e02:	b002      	add	sp, #8
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	46c0      	nop			@ (mov r8, r8)
 8001e08:	200027d4 	.word	0x200027d4
 8001e0c:	50000400 	.word	0x50000400

08001e10 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	000a      	movs	r2, r1
 8001e1a:	1cbb      	adds	r3, r7, #2
 8001e1c:	801a      	strh	r2, [r3, #0]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001e1e:	46c0      	nop			@ (mov r8, r8)
 8001e20:	4b08      	ldr	r3, [pc, #32]	@ (8001e44 <ILI9341_SPI_TxBuffer+0x34>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2202      	movs	r2, #2
 8001e28:	4013      	ands	r3, r2
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d1f8      	bne.n	8001e20 <ILI9341_SPI_TxBuffer+0x10>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 8001e2e:	1cbb      	adds	r3, r7, #2
 8001e30:	881a      	ldrh	r2, [r3, #0]
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	4b03      	ldr	r3, [pc, #12]	@ (8001e44 <ILI9341_SPI_TxBuffer+0x34>)
 8001e36:	0018      	movs	r0, r3
 8001e38:	f003 fbb0 	bl	800559c <HAL_SPI_Transmit_DMA>
//	HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 8001e3c:	46c0      	nop			@ (mov r8, r8)
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	b002      	add	sp, #8
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	200027d4 	.word	0x200027d4

08001e48 <ILI9341_SPI_Tx>:


static void ILI9341_SPI_Tx(uint8_t data)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	0002      	movs	r2, r0
 8001e50:	1dfb      	adds	r3, r7, #7
 8001e52:	701a      	strb	r2, [r3, #0]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001e54:	46c0      	nop			@ (mov r8, r8)
 8001e56:	4b08      	ldr	r3, [pc, #32]	@ (8001e78 <ILI9341_SPI_Tx+0x30>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d1f8      	bne.n	8001e56 <ILI9341_SPI_Tx+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 8001e64:	1df9      	adds	r1, r7, #7
 8001e66:	4b04      	ldr	r3, [pc, #16]	@ (8001e78 <ILI9341_SPI_Tx+0x30>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	f003 fb96 	bl	800559c <HAL_SPI_Transmit_DMA>
//	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 8001e70:	46c0      	nop			@ (mov r8, r8)
 8001e72:	46bd      	mov	sp, r7
 8001e74:	b002      	add	sp, #8
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	200027d4 	.word	0x200027d4

08001e7c <ILI9341_WriteCommand>:



void ILI9341_WriteCommand(uint8_t cmd)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	0002      	movs	r2, r0
 8001e84:	1dfb      	adds	r3, r7, #7
 8001e86:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8001e88:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb4 <ILI9341_WriteCommand+0x38>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2110      	movs	r1, #16
 8001e8e:	0018      	movs	r0, r3
 8001e90:	f002 fa87 	bl	80043a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001e94:	2380      	movs	r3, #128	@ 0x80
 8001e96:	01db      	lsls	r3, r3, #7
 8001e98:	4806      	ldr	r0, [pc, #24]	@ (8001eb4 <ILI9341_WriteCommand+0x38>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	0019      	movs	r1, r3
 8001e9e:	f002 fa80 	bl	80043a2 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 8001ea2:	1dfb      	adds	r3, r7, #7
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f7ff ffce 	bl	8001e48 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001eac:	46c0      	nop			@ (mov r8, r8)
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	b002      	add	sp, #8
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	50000400 	.word	0x50000400

08001eb8 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	0002      	movs	r2, r0
 8001ec0:	1dfb      	adds	r3, r7, #7
 8001ec2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8001ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef0 <ILI9341_WriteData+0x38>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	2110      	movs	r1, #16
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f002 fa69 	bl	80043a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001ed0:	2380      	movs	r3, #128	@ 0x80
 8001ed2:	01db      	lsls	r3, r3, #7
 8001ed4:	4806      	ldr	r0, [pc, #24]	@ (8001ef0 <ILI9341_WriteData+0x38>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	0019      	movs	r1, r3
 8001eda:	f002 fa62 	bl	80043a2 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8001ede:	1dfb      	adds	r3, r7, #7
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f7ff ffb0 	bl	8001e48 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001ee8:	46c0      	nop			@ (mov r8, r8)
 8001eea:	46bd      	mov	sp, r7
 8001eec:	b002      	add	sp, #8
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	50000400 	.word	0x50000400

08001ef4 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	000a      	movs	r2, r1
 8001efe:	1cbb      	adds	r3, r7, #2
 8001f00:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8001f02:	4b0c      	ldr	r3, [pc, #48]	@ (8001f34 <ILI9341_WriteBuffer+0x40>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	2110      	movs	r1, #16
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f002 fa4a 	bl	80043a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001f0e:	2380      	movs	r3, #128	@ 0x80
 8001f10:	01db      	lsls	r3, r3, #7
 8001f12:	4808      	ldr	r0, [pc, #32]	@ (8001f34 <ILI9341_WriteBuffer+0x40>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	0019      	movs	r1, r3
 8001f18:	f002 fa43 	bl	80043a2 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8001f1c:	1cbb      	adds	r3, r7, #2
 8001f1e:	881a      	ldrh	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	0011      	movs	r1, r2
 8001f24:	0018      	movs	r0, r3
 8001f26:	f7ff ff73 	bl	8001e10 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001f2a:	46c0      	nop			@ (mov r8, r8)
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	b002      	add	sp, #8
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	46c0      	nop			@ (mov r8, r8)
 8001f34:	50000400 	.word	0x50000400

08001f38 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8001f38:	b5b0      	push	{r4, r5, r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	0005      	movs	r5, r0
 8001f40:	000c      	movs	r4, r1
 8001f42:	0010      	movs	r0, r2
 8001f44:	0019      	movs	r1, r3
 8001f46:	1dbb      	adds	r3, r7, #6
 8001f48:	1c2a      	adds	r2, r5, #0
 8001f4a:	801a      	strh	r2, [r3, #0]
 8001f4c:	1d3b      	adds	r3, r7, #4
 8001f4e:	1c22      	adds	r2, r4, #0
 8001f50:	801a      	strh	r2, [r3, #0]
 8001f52:	1cbb      	adds	r3, r7, #2
 8001f54:	1c02      	adds	r2, r0, #0
 8001f56:	801a      	strh	r2, [r3, #0]
 8001f58:	003b      	movs	r3, r7
 8001f5a:	1c0a      	adds	r2, r1, #0
 8001f5c:	801a      	strh	r2, [r3, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8001f5e:	1dbb      	adds	r3, r7, #6
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	0a1b      	lsrs	r3, r3, #8
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	210c      	movs	r1, #12
 8001f6a:	187b      	adds	r3, r7, r1
 8001f6c:	701a      	strb	r2, [r3, #0]
	buffer[1] = x1;
 8001f6e:	1dbb      	adds	r3, r7, #6
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	187b      	adds	r3, r7, r1
 8001f76:	705a      	strb	r2, [r3, #1]
	buffer[2] = x2 >> 8;
 8001f78:	1cbb      	adds	r3, r7, #2
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	0a1b      	lsrs	r3, r3, #8
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	187b      	adds	r3, r7, r1
 8001f84:	709a      	strb	r2, [r3, #2]
	buffer[3] = x2;
 8001f86:	1cbb      	adds	r3, r7, #2
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	000c      	movs	r4, r1
 8001f8e:	187b      	adds	r3, r7, r1
 8001f90:	70da      	strb	r2, [r3, #3]

	ILI9341_WriteCommand(0x2A);
 8001f92:	202a      	movs	r0, #42	@ 0x2a
 8001f94:	f7ff ff72 	bl	8001e7c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8001f98:	193b      	adds	r3, r7, r4
 8001f9a:	2104      	movs	r1, #4
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f7ff ffa9 	bl	8001ef4 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	0a1b      	lsrs	r3, r3, #8
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	0021      	movs	r1, r4
 8001fae:	187b      	adds	r3, r7, r1
 8001fb0:	701a      	strb	r2, [r3, #0]
	buffer[1] = y1;
 8001fb2:	1d3b      	adds	r3, r7, #4
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	187b      	adds	r3, r7, r1
 8001fba:	705a      	strb	r2, [r3, #1]
	buffer[2] = y2 >> 8;
 8001fbc:	003b      	movs	r3, r7
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	0a1b      	lsrs	r3, r3, #8
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	187b      	adds	r3, r7, r1
 8001fc8:	709a      	strb	r2, [r3, #2]
	buffer[3] = y2;
 8001fca:	003b      	movs	r3, r7
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	000c      	movs	r4, r1
 8001fd2:	187b      	adds	r3, r7, r1
 8001fd4:	70da      	strb	r2, [r3, #3]

	ILI9341_WriteCommand(0x2B);
 8001fd6:	202b      	movs	r0, #43	@ 0x2b
 8001fd8:	f7ff ff50 	bl	8001e7c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8001fdc:	193b      	adds	r3, r7, r4
 8001fde:	2104      	movs	r1, #4
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f7ff ff87 	bl	8001ef4 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 8001fe6:	202c      	movs	r0, #44	@ 0x2c
 8001fe8:	f7ff ff48 	bl	8001e7c <ILI9341_WriteCommand>
}
 8001fec:	46c0      	nop			@ (mov r8, r8)
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	b004      	add	sp, #16
 8001ff2:	bdb0      	pop	{r4, r5, r7, pc}

08001ff4 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8001ff8:	2380      	movs	r3, #128	@ 0x80
 8001ffa:	0059      	lsls	r1, r3, #1
 8001ffc:	23a0      	movs	r3, #160	@ 0xa0
 8001ffe:	05db      	lsls	r3, r3, #23
 8002000:	2200      	movs	r2, #0
 8002002:	0018      	movs	r0, r3
 8002004:	f002 f9cd 	bl	80043a2 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002008:	200a      	movs	r0, #10
 800200a:	f001 fcf5 	bl	80039f8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 800200e:	2380      	movs	r3, #128	@ 0x80
 8002010:	01db      	lsls	r3, r3, #7
 8002012:	480d      	ldr	r0, [pc, #52]	@ (8002048 <ILI9341_Reset+0x54>)
 8002014:	2200      	movs	r2, #0
 8002016:	0019      	movs	r1, r3
 8002018:	f002 f9c3 	bl	80043a2 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800201c:	200a      	movs	r0, #10
 800201e:	f001 fceb 	bl	80039f8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);//Enable
 8002022:	2380      	movs	r3, #128	@ 0x80
 8002024:	0059      	lsls	r1, r3, #1
 8002026:	23a0      	movs	r3, #160	@ 0xa0
 8002028:	05db      	lsls	r3, r3, #23
 800202a:	2201      	movs	r2, #1
 800202c:	0018      	movs	r0, r3
 800202e:	f002 f9b8 	bl	80043a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);//Deselect
 8002032:	2380      	movs	r3, #128	@ 0x80
 8002034:	01db      	lsls	r3, r3, #7
 8002036:	4804      	ldr	r0, [pc, #16]	@ (8002048 <ILI9341_Reset+0x54>)
 8002038:	2201      	movs	r2, #1
 800203a:	0019      	movs	r1, r3
 800203c:	f002 f9b1 	bl	80043a2 <HAL_GPIO_WritePin>
}
 8002040:	46c0      	nop			@ (mov r8, r8)
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	46c0      	nop			@ (mov r8, r8)
 8002048:	50000400 	.word	0x50000400

0800204c <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8002050:	2380      	movs	r3, #128	@ 0x80
 8002052:	0059      	lsls	r1, r3, #1
 8002054:	23a0      	movs	r3, #160	@ 0xa0
 8002056:	05db      	lsls	r3, r3, #23
 8002058:	2201      	movs	r2, #1
 800205a:	0018      	movs	r0, r3
 800205c:	f002 f9a1 	bl	80043a2 <HAL_GPIO_WritePin>
}
 8002060:	46c0      	nop			@ (mov r8, r8)
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 800206a:	f7ff ffef 	bl	800204c <ILI9341_Enable>
	ILI9341_Reset();
 800206e:	f7ff ffc1 	bl	8001ff4 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8002072:	2001      	movs	r0, #1
 8002074:	f7ff ff02 	bl	8001e7c <ILI9341_WriteCommand>
	HAL_Delay(10);
 8002078:	200a      	movs	r0, #10
 800207a:	f001 fcbd 	bl	80039f8 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 800207e:	20cb      	movs	r0, #203	@ 0xcb
 8002080:	f7ff fefc 	bl	8001e7c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 8002084:	2039      	movs	r0, #57	@ 0x39
 8002086:	f7ff ff17 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 800208a:	202c      	movs	r0, #44	@ 0x2c
 800208c:	f7ff ff14 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8002090:	2000      	movs	r0, #0
 8002092:	f7ff ff11 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8002096:	2034      	movs	r0, #52	@ 0x34
 8002098:	f7ff ff0e 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 800209c:	2002      	movs	r0, #2
 800209e:	f7ff ff0b 	bl	8001eb8 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 80020a2:	20cf      	movs	r0, #207	@ 0xcf
 80020a4:	f7ff feea 	bl	8001e7c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80020a8:	2000      	movs	r0, #0
 80020aa:	f7ff ff05 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80020ae:	20c1      	movs	r0, #193	@ 0xc1
 80020b0:	f7ff ff02 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 80020b4:	2030      	movs	r0, #48	@ 0x30
 80020b6:	f7ff feff 	bl	8001eb8 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 80020ba:	20e8      	movs	r0, #232	@ 0xe8
 80020bc:	f7ff fede 	bl	8001e7c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 80020c0:	2085      	movs	r0, #133	@ 0x85
 80020c2:	f7ff fef9 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80020c6:	2000      	movs	r0, #0
 80020c8:	f7ff fef6 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 80020cc:	2078      	movs	r0, #120	@ 0x78
 80020ce:	f7ff fef3 	bl	8001eb8 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 80020d2:	20ea      	movs	r0, #234	@ 0xea
 80020d4:	f7ff fed2 	bl	8001e7c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80020d8:	2000      	movs	r0, #0
 80020da:	f7ff feed 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80020de:	2000      	movs	r0, #0
 80020e0:	f7ff feea 	bl	8001eb8 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 80020e4:	20ed      	movs	r0, #237	@ 0xed
 80020e6:	f7ff fec9 	bl	8001e7c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 80020ea:	2064      	movs	r0, #100	@ 0x64
 80020ec:	f7ff fee4 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80020f0:	2003      	movs	r0, #3
 80020f2:	f7ff fee1 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 80020f6:	2012      	movs	r0, #18
 80020f8:	f7ff fede 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 80020fc:	2081      	movs	r0, #129	@ 0x81
 80020fe:	f7ff fedb 	bl	8001eb8 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8002102:	20f7      	movs	r0, #247	@ 0xf7
 8002104:	f7ff feba 	bl	8001e7c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8002108:	2020      	movs	r0, #32
 800210a:	f7ff fed5 	bl	8001eb8 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 800210e:	20c0      	movs	r0, #192	@ 0xc0
 8002110:	f7ff feb4 	bl	8001e7c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8002114:	2023      	movs	r0, #35	@ 0x23
 8002116:	f7ff fecf 	bl	8001eb8 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 800211a:	20c1      	movs	r0, #193	@ 0xc1
 800211c:	f7ff feae 	bl	8001e7c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8002120:	2010      	movs	r0, #16
 8002122:	f7ff fec9 	bl	8001eb8 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8002126:	20c5      	movs	r0, #197	@ 0xc5
 8002128:	f7ff fea8 	bl	8001e7c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 800212c:	203e      	movs	r0, #62	@ 0x3e
 800212e:	f7ff fec3 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8002132:	2028      	movs	r0, #40	@ 0x28
 8002134:	f7ff fec0 	bl	8001eb8 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8002138:	20c7      	movs	r0, #199	@ 0xc7
 800213a:	f7ff fe9f 	bl	8001e7c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 800213e:	2086      	movs	r0, #134	@ 0x86
 8002140:	f7ff feba 	bl	8001eb8 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8002144:	2036      	movs	r0, #54	@ 0x36
 8002146:	f7ff fe99 	bl	8001e7c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 800214a:	2048      	movs	r0, #72	@ 0x48
 800214c:	f7ff feb4 	bl	8001eb8 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8002150:	203a      	movs	r0, #58	@ 0x3a
 8002152:	f7ff fe93 	bl	8001e7c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8002156:	2055      	movs	r0, #85	@ 0x55
 8002158:	f7ff feae 	bl	8001eb8 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 800215c:	20b1      	movs	r0, #177	@ 0xb1
 800215e:	f7ff fe8d 	bl	8001e7c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8002162:	2000      	movs	r0, #0
 8002164:	f7ff fea8 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8002168:	2018      	movs	r0, #24
 800216a:	f7ff fea5 	bl	8001eb8 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 800216e:	20b6      	movs	r0, #182	@ 0xb6
 8002170:	f7ff fe84 	bl	8001e7c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8002174:	2008      	movs	r0, #8
 8002176:	f7ff fe9f 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 800217a:	2082      	movs	r0, #130	@ 0x82
 800217c:	f7ff fe9c 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8002180:	2027      	movs	r0, #39	@ 0x27
 8002182:	f7ff fe99 	bl	8001eb8 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8002186:	20f2      	movs	r0, #242	@ 0xf2
 8002188:	f7ff fe78 	bl	8001e7c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800218c:	2000      	movs	r0, #0
 800218e:	f7ff fe93 	bl	8001eb8 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8002192:	2026      	movs	r0, #38	@ 0x26
 8002194:	f7ff fe72 	bl	8001e7c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8002198:	2001      	movs	r0, #1
 800219a:	f7ff fe8d 	bl	8001eb8 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 800219e:	20e0      	movs	r0, #224	@ 0xe0
 80021a0:	f7ff fe6c 	bl	8001e7c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 80021a4:	200f      	movs	r0, #15
 80021a6:	f7ff fe87 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80021aa:	2031      	movs	r0, #49	@ 0x31
 80021ac:	f7ff fe84 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 80021b0:	202b      	movs	r0, #43	@ 0x2b
 80021b2:	f7ff fe81 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 80021b6:	200c      	movs	r0, #12
 80021b8:	f7ff fe7e 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80021bc:	200e      	movs	r0, #14
 80021be:	f7ff fe7b 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 80021c2:	2008      	movs	r0, #8
 80021c4:	f7ff fe78 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 80021c8:	204e      	movs	r0, #78	@ 0x4e
 80021ca:	f7ff fe75 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 80021ce:	20f1      	movs	r0, #241	@ 0xf1
 80021d0:	f7ff fe72 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 80021d4:	2037      	movs	r0, #55	@ 0x37
 80021d6:	f7ff fe6f 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 80021da:	2007      	movs	r0, #7
 80021dc:	f7ff fe6c 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 80021e0:	2010      	movs	r0, #16
 80021e2:	f7ff fe69 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80021e6:	2003      	movs	r0, #3
 80021e8:	f7ff fe66 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80021ec:	200e      	movs	r0, #14
 80021ee:	f7ff fe63 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 80021f2:	2009      	movs	r0, #9
 80021f4:	f7ff fe60 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80021f8:	2000      	movs	r0, #0
 80021fa:	f7ff fe5d 	bl	8001eb8 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 80021fe:	20e1      	movs	r0, #225	@ 0xe1
 8002200:	f7ff fe3c 	bl	8001e7c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8002204:	2000      	movs	r0, #0
 8002206:	f7ff fe57 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 800220a:	200e      	movs	r0, #14
 800220c:	f7ff fe54 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8002210:	2014      	movs	r0, #20
 8002212:	f7ff fe51 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8002216:	2003      	movs	r0, #3
 8002218:	f7ff fe4e 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 800221c:	2011      	movs	r0, #17
 800221e:	f7ff fe4b 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8002222:	2007      	movs	r0, #7
 8002224:	f7ff fe48 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8002228:	2031      	movs	r0, #49	@ 0x31
 800222a:	f7ff fe45 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 800222e:	20c1      	movs	r0, #193	@ 0xc1
 8002230:	f7ff fe42 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8002234:	2048      	movs	r0, #72	@ 0x48
 8002236:	f7ff fe3f 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 800223a:	2008      	movs	r0, #8
 800223c:	f7ff fe3c 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8002240:	200f      	movs	r0, #15
 8002242:	f7ff fe39 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8002246:	200c      	movs	r0, #12
 8002248:	f7ff fe36 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 800224c:	2031      	movs	r0, #49	@ 0x31
 800224e:	f7ff fe33 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8002252:	2036      	movs	r0, #54	@ 0x36
 8002254:	f7ff fe30 	bl	8001eb8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8002258:	200f      	movs	r0, #15
 800225a:	f7ff fe2d 	bl	8001eb8 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 800225e:	2011      	movs	r0, #17
 8002260:	f7ff fe0c 	bl	8001e7c <ILI9341_WriteCommand>
	HAL_Delay(100);
 8002264:	2064      	movs	r0, #100	@ 0x64
 8002266:	f001 fbc7 	bl	80039f8 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 800226a:	2029      	movs	r0, #41	@ 0x29
 800226c:	f7ff fe06 	bl	8001e7c <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8002270:	2000      	movs	r0, #0
 8002272:	f000 f803 	bl	800227c <ILI9341_SetRotation>
}
 8002276:	46c0      	nop			@ (mov r8, r8)
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	0002      	movs	r2, r0
 8002284:	1dfb      	adds	r3, r7, #7
 8002286:	701a      	strb	r2, [r3, #0]
	ILI9341_WriteCommand(0x36);
 8002288:	2036      	movs	r0, #54	@ 0x36
 800228a:	f7ff fdf7 	bl	8001e7c <ILI9341_WriteCommand>
	HAL_Delay(1);
 800228e:	2001      	movs	r0, #1
 8002290:	f001 fbb2 	bl	80039f8 <HAL_Delay>

	switch(rotation)
 8002294:	1dfb      	adds	r3, r7, #7
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b03      	cmp	r3, #3
 800229a:	d029      	beq.n	80022f0 <ILI9341_SetRotation+0x74>
 800229c:	dc33      	bgt.n	8002306 <ILI9341_SetRotation+0x8a>
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d01b      	beq.n	80022da <ILI9341_SetRotation+0x5e>
 80022a2:	dc30      	bgt.n	8002306 <ILI9341_SetRotation+0x8a>
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d002      	beq.n	80022ae <ILI9341_SetRotation+0x32>
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d00b      	beq.n	80022c4 <ILI9341_SetRotation+0x48>
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
		LCD_WIDTH  = 320;
		LCD_HEIGHT = 240;
		break;
	default:
		break;
 80022ac:	e02b      	b.n	8002306 <ILI9341_SetRotation+0x8a>
		ILI9341_WriteData(0x40|0x08);
 80022ae:	2048      	movs	r0, #72	@ 0x48
 80022b0:	f7ff fe02 	bl	8001eb8 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 80022b4:	4b16      	ldr	r3, [pc, #88]	@ (8002310 <ILI9341_SetRotation+0x94>)
 80022b6:	22f0      	movs	r2, #240	@ 0xf0
 80022b8:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80022ba:	4b16      	ldr	r3, [pc, #88]	@ (8002314 <ILI9341_SetRotation+0x98>)
 80022bc:	22a0      	movs	r2, #160	@ 0xa0
 80022be:	0052      	lsls	r2, r2, #1
 80022c0:	801a      	strh	r2, [r3, #0]
		break;
 80022c2:	e021      	b.n	8002308 <ILI9341_SetRotation+0x8c>
		ILI9341_WriteData(0x20|0x08);
 80022c4:	2028      	movs	r0, #40	@ 0x28
 80022c6:	f7ff fdf7 	bl	8001eb8 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80022ca:	4b11      	ldr	r3, [pc, #68]	@ (8002310 <ILI9341_SetRotation+0x94>)
 80022cc:	22a0      	movs	r2, #160	@ 0xa0
 80022ce:	0052      	lsls	r2, r2, #1
 80022d0:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80022d2:	4b10      	ldr	r3, [pc, #64]	@ (8002314 <ILI9341_SetRotation+0x98>)
 80022d4:	22f0      	movs	r2, #240	@ 0xf0
 80022d6:	801a      	strh	r2, [r3, #0]
		break;
 80022d8:	e016      	b.n	8002308 <ILI9341_SetRotation+0x8c>
		ILI9341_WriteData(0x80|0x08);
 80022da:	2088      	movs	r0, #136	@ 0x88
 80022dc:	f7ff fdec 	bl	8001eb8 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 80022e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002310 <ILI9341_SetRotation+0x94>)
 80022e2:	22f0      	movs	r2, #240	@ 0xf0
 80022e4:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80022e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002314 <ILI9341_SetRotation+0x98>)
 80022e8:	22a0      	movs	r2, #160	@ 0xa0
 80022ea:	0052      	lsls	r2, r2, #1
 80022ec:	801a      	strh	r2, [r3, #0]
		break;
 80022ee:	e00b      	b.n	8002308 <ILI9341_SetRotation+0x8c>
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 80022f0:	20e8      	movs	r0, #232	@ 0xe8
 80022f2:	f7ff fde1 	bl	8001eb8 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80022f6:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <ILI9341_SetRotation+0x94>)
 80022f8:	22a0      	movs	r2, #160	@ 0xa0
 80022fa:	0052      	lsls	r2, r2, #1
 80022fc:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80022fe:	4b05      	ldr	r3, [pc, #20]	@ (8002314 <ILI9341_SetRotation+0x98>)
 8002300:	22f0      	movs	r2, #240	@ 0xf0
 8002302:	801a      	strh	r2, [r3, #0]
		break;
 8002304:	e000      	b.n	8002308 <ILI9341_SetRotation+0x8c>
		break;
 8002306:	46c0      	nop			@ (mov r8, r8)
	}
}
 8002308:	46c0      	nop			@ (mov r8, r8)
 800230a:	46bd      	mov	sp, r7
 800230c:	b002      	add	sp, #8
 800230e:	bd80      	pop	{r7, pc}
 8002310:	2000000a 	.word	0x2000000a
 8002314:	20000008 	.word	0x20000008

08002318 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8002318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800231a:	46c6      	mov	lr, r8
 800231c:	b500      	push	{lr}
 800231e:	b092      	sub	sp, #72	@ 0x48
 8002320:	af00      	add	r7, sp, #0
 8002322:	0002      	movs	r2, r0
 8002324:	61b9      	str	r1, [r7, #24]
 8002326:	231e      	movs	r3, #30
 8002328:	18fb      	adds	r3, r7, r3
 800232a:	801a      	strh	r2, [r3, #0]
 800232c:	466b      	mov	r3, sp
 800232e:	4698      	mov	r8, r3
	uint32_t BufferSize = 0;
 8002330:	2300      	movs	r3, #0
 8002332:	647b      	str	r3, [r7, #68]	@ 0x44

	if((size*2) < BURST_MAX_SIZE)
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	2bc7      	cmp	r3, #199	@ 0xc7
 800233a:	d802      	bhi.n	8002342 <ILI9341_DrawColorBurst+0x2a>
	{
		BufferSize = size;
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002340:	e001      	b.n	8002346 <ILI9341_DrawColorBurst+0x2e>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8002342:	23c8      	movs	r3, #200	@ 0xc8
 8002344:	647b      	str	r3, [r7, #68]	@ 0x44
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002346:	4b4a      	ldr	r3, [pc, #296]	@ (8002470 <ILI9341_DrawColorBurst+0x158>)
 8002348:	2201      	movs	r2, #1
 800234a:	2110      	movs	r1, #16
 800234c:	0018      	movs	r0, r3
 800234e:	f002 f828 	bl	80043a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002352:	2380      	movs	r3, #128	@ 0x80
 8002354:	01db      	lsls	r3, r3, #7
 8002356:	4846      	ldr	r0, [pc, #280]	@ (8002470 <ILI9341_DrawColorBurst+0x158>)
 8002358:	2200      	movs	r2, #0
 800235a:	0019      	movs	r1, r3
 800235c:	f002 f821 	bl	80043a2 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8002360:	231e      	movs	r3, #30
 8002362:	18fb      	adds	r3, r7, r3
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	0a1b      	lsrs	r3, r3, #8
 8002368:	b29a      	uxth	r2, r3
 800236a:	2323      	movs	r3, #35	@ 0x23
 800236c:	2118      	movs	r1, #24
 800236e:	185b      	adds	r3, r3, r1
 8002370:	19db      	adds	r3, r3, r7
 8002372:	701a      	strb	r2, [r3, #0]
	uint8_t BurstBuffer[BufferSize];
 8002374:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002376:	001a      	movs	r2, r3
 8002378:	3a01      	subs	r2, #1
 800237a:	637a      	str	r2, [r7, #52]	@ 0x34
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	2200      	movs	r2, #0
 8002380:	60fa      	str	r2, [r7, #12]
 8002382:	68b8      	ldr	r0, [r7, #8]
 8002384:	68f9      	ldr	r1, [r7, #12]
 8002386:	0002      	movs	r2, r0
 8002388:	0f52      	lsrs	r2, r2, #29
 800238a:	000e      	movs	r6, r1
 800238c:	00f6      	lsls	r6, r6, #3
 800238e:	617e      	str	r6, [r7, #20]
 8002390:	697e      	ldr	r6, [r7, #20]
 8002392:	4316      	orrs	r6, r2
 8002394:	617e      	str	r6, [r7, #20]
 8002396:	0002      	movs	r2, r0
 8002398:	00d2      	lsls	r2, r2, #3
 800239a:	613a      	str	r2, [r7, #16]
 800239c:	603b      	str	r3, [r7, #0]
 800239e:	2200      	movs	r2, #0
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	6838      	ldr	r0, [r7, #0]
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	0002      	movs	r2, r0
 80023a8:	0f52      	lsrs	r2, r2, #29
 80023aa:	000e      	movs	r6, r1
 80023ac:	00f5      	lsls	r5, r6, #3
 80023ae:	4315      	orrs	r5, r2
 80023b0:	0002      	movs	r2, r0
 80023b2:	00d4      	lsls	r4, r2, #3
 80023b4:	3307      	adds	r3, #7
 80023b6:	08db      	lsrs	r3, r3, #3
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	466a      	mov	r2, sp
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	469d      	mov	sp, r3
 80023c0:	466b      	mov	r3, sp
 80023c2:	3300      	adds	r3, #0
 80023c4:	633b      	str	r3, [r7, #48]	@ 0x30

	for(uint32_t j = 0; j < BufferSize; j+=2)
 80023c6:	2300      	movs	r3, #0
 80023c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80023ca:	e013      	b.n	80023f4 <ILI9341_DrawColorBurst+0xdc>
	{
		BurstBuffer[j] = chifted;
 80023cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023d0:	18d3      	adds	r3, r2, r3
 80023d2:	2223      	movs	r2, #35	@ 0x23
 80023d4:	2118      	movs	r1, #24
 80023d6:	1852      	adds	r2, r2, r1
 80023d8:	19d2      	adds	r2, r2, r7
 80023da:	7812      	ldrb	r2, [r2, #0]
 80023dc:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 80023de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023e0:	3301      	adds	r3, #1
 80023e2:	221e      	movs	r2, #30
 80023e4:	18ba      	adds	r2, r7, r2
 80023e6:	8812      	ldrh	r2, [r2, #0]
 80023e8:	b2d1      	uxtb	r1, r2
 80023ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023ec:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 80023ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023f0:	3302      	adds	r3, #2
 80023f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80023f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80023f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d3e7      	bcc.n	80023cc <ILI9341_DrawColorBurst+0xb4>
	}

	uint32_t SendingSize = size * 2;
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8002402:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002404:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002406:	f7fd fe87 	bl	8000118 <__udivsi3>
 800240a:	0003      	movs	r3, r0
 800240c:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 800240e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002410:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002412:	0018      	movs	r0, r3
 8002414:	f7fd ff06 	bl	8000224 <__aeabi_uidivmod>
 8002418:	000b      	movs	r3, r1
 800241a:	627b      	str	r3, [r7, #36]	@ 0x24

	if(SendingInBlock != 0)
 800241c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800241e:	2b00      	cmp	r3, #0
 8002420:	d010      	beq.n	8002444 <ILI9341_DrawColorBurst+0x12c>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8002422:	2300      	movs	r3, #0
 8002424:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002426:	e009      	b.n	800243c <ILI9341_DrawColorBurst+0x124>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8002428:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800242a:	b29a      	uxth	r2, r3
 800242c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800242e:	4811      	ldr	r0, [pc, #68]	@ (8002474 <ILI9341_DrawColorBurst+0x15c>)
 8002430:	230a      	movs	r3, #10
 8002432:	f002 ff53 	bl	80052dc <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8002436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002438:	3301      	adds	r3, #1
 800243a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800243c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800243e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002440:	429a      	cmp	r2, r3
 8002442:	d3f1      	bcc.n	8002428 <ILI9341_DrawColorBurst+0x110>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8002444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002446:	b29a      	uxth	r2, r3
 8002448:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800244a:	480a      	ldr	r0, [pc, #40]	@ (8002474 <ILI9341_DrawColorBurst+0x15c>)
 800244c:	230a      	movs	r3, #10
 800244e:	f002 ff45 	bl	80052dc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002452:	2380      	movs	r3, #128	@ 0x80
 8002454:	01db      	lsls	r3, r3, #7
 8002456:	4806      	ldr	r0, [pc, #24]	@ (8002470 <ILI9341_DrawColorBurst+0x158>)
 8002458:	2201      	movs	r2, #1
 800245a:	0019      	movs	r1, r3
 800245c:	f001 ffa1 	bl	80043a2 <HAL_GPIO_WritePin>
 8002460:	46c5      	mov	sp, r8
}
 8002462:	46c0      	nop			@ (mov r8, r8)
 8002464:	46bd      	mov	sp, r7
 8002466:	b012      	add	sp, #72	@ 0x48
 8002468:	bc80      	pop	{r7}
 800246a:	46b8      	mov	r8, r7
 800246c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800246e:	46c0      	nop			@ (mov r8, r8)
 8002470:	50000400 	.word	0x50000400
 8002474:	200027d4 	.word	0x200027d4

08002478 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	0002      	movs	r2, r0
 8002480:	1dbb      	adds	r3, r7, #6
 8002482:	801a      	strh	r2, [r3, #0]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8002484:	4b0e      	ldr	r3, [pc, #56]	@ (80024c0 <ILI9341_FillScreen+0x48>)
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	b29a      	uxth	r2, r3
 800248a:	4b0e      	ldr	r3, [pc, #56]	@ (80024c4 <ILI9341_FillScreen+0x4c>)
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	b29b      	uxth	r3, r3
 8002490:	2100      	movs	r1, #0
 8002492:	2000      	movs	r0, #0
 8002494:	f7ff fd50 	bl	8001f38 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8002498:	4b09      	ldr	r3, [pc, #36]	@ (80024c0 <ILI9341_FillScreen+0x48>)
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	b29b      	uxth	r3, r3
 800249e:	001a      	movs	r2, r3
 80024a0:	4b08      	ldr	r3, [pc, #32]	@ (80024c4 <ILI9341_FillScreen+0x4c>)
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	4353      	muls	r3, r2
 80024a8:	001a      	movs	r2, r3
 80024aa:	1dbb      	adds	r3, r7, #6
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	0011      	movs	r1, r2
 80024b0:	0018      	movs	r0, r3
 80024b2:	f7ff ff31 	bl	8002318 <ILI9341_DrawColorBurst>
}
 80024b6:	46c0      	nop			@ (mov r8, r8)
 80024b8:	46bd      	mov	sp, r7
 80024ba:	b002      	add	sp, #8
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	46c0      	nop			@ (mov r8, r8)
 80024c0:	2000000a 	.word	0x2000000a
 80024c4:	20000008 	.word	0x20000008

080024c8 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 80024c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	0004      	movs	r4, r0
 80024d0:	0008      	movs	r0, r1
 80024d2:	0011      	movs	r1, r2
 80024d4:	1dbb      	adds	r3, r7, #6
 80024d6:	1c22      	adds	r2, r4, #0
 80024d8:	801a      	strh	r2, [r3, #0]
 80024da:	1d3b      	adds	r3, r7, #4
 80024dc:	1c02      	adds	r2, r0, #0
 80024de:	801a      	strh	r2, [r3, #0]
 80024e0:	1cbb      	adds	r3, r7, #2
 80024e2:	1c0a      	adds	r2, r1, #0
 80024e4:	801a      	strh	r2, [r3, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80024e6:	4b37      	ldr	r3, [pc, #220]	@ (80025c4 <ILI9341_DrawPixel+0xfc>)
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	1dba      	adds	r2, r7, #6
 80024ee:	8812      	ldrh	r2, [r2, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d262      	bcs.n	80025ba <ILI9341_DrawPixel+0xf2>
 80024f4:	4b34      	ldr	r3, [pc, #208]	@ (80025c8 <ILI9341_DrawPixel+0x100>)
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	1d3a      	adds	r2, r7, #4
 80024fc:	8812      	ldrh	r2, [r2, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d25b      	bcs.n	80025ba <ILI9341_DrawPixel+0xf2>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8002502:	1dbb      	adds	r3, r7, #6
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	0a1b      	lsrs	r3, r3, #8
 8002508:	b29b      	uxth	r3, r3
 800250a:	b2da      	uxtb	r2, r3
 800250c:	2414      	movs	r4, #20
 800250e:	193b      	adds	r3, r7, r4
 8002510:	701a      	strb	r2, [r3, #0]
 8002512:	1dbb      	adds	r3, r7, #6
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	b2da      	uxtb	r2, r3
 8002518:	193b      	adds	r3, r7, r4
 800251a:	705a      	strb	r2, [r3, #1]
 800251c:	1dbb      	adds	r3, r7, #6
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	3301      	adds	r3, #1
 8002522:	121b      	asrs	r3, r3, #8
 8002524:	b2da      	uxtb	r2, r3
 8002526:	193b      	adds	r3, r7, r4
 8002528:	709a      	strb	r2, [r3, #2]
 800252a:	1dbb      	adds	r3, r7, #6
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	b2db      	uxtb	r3, r3
 8002530:	3301      	adds	r3, #1
 8002532:	b2da      	uxtb	r2, r3
 8002534:	193b      	adds	r3, r7, r4
 8002536:	70da      	strb	r2, [r3, #3]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8002538:	1d3b      	adds	r3, r7, #4
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	0a1b      	lsrs	r3, r3, #8
 800253e:	b29b      	uxth	r3, r3
 8002540:	b2da      	uxtb	r2, r3
 8002542:	2510      	movs	r5, #16
 8002544:	197b      	adds	r3, r7, r5
 8002546:	701a      	strb	r2, [r3, #0]
 8002548:	1d3b      	adds	r3, r7, #4
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	b2da      	uxtb	r2, r3
 800254e:	197b      	adds	r3, r7, r5
 8002550:	705a      	strb	r2, [r3, #1]
 8002552:	1d3b      	adds	r3, r7, #4
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	3301      	adds	r3, #1
 8002558:	121b      	asrs	r3, r3, #8
 800255a:	b2da      	uxtb	r2, r3
 800255c:	197b      	adds	r3, r7, r5
 800255e:	709a      	strb	r2, [r3, #2]
 8002560:	1d3b      	adds	r3, r7, #4
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	b2db      	uxtb	r3, r3
 8002566:	3301      	adds	r3, #1
 8002568:	b2da      	uxtb	r2, r3
 800256a:	197b      	adds	r3, r7, r5
 800256c:	70da      	strb	r2, [r3, #3]
	uint8_t bufferC[2] = {color>>8, color}; ///////////////////////////////////
 800256e:	1cbb      	adds	r3, r7, #2
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	0a1b      	lsrs	r3, r3, #8
 8002574:	b29b      	uxth	r3, r3
 8002576:	b2da      	uxtb	r2, r3
 8002578:	260c      	movs	r6, #12
 800257a:	19bb      	adds	r3, r7, r6
 800257c:	701a      	strb	r2, [r3, #0]
 800257e:	1cbb      	adds	r3, r7, #2
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	b2da      	uxtb	r2, r3
 8002584:	19bb      	adds	r3, r7, r6
 8002586:	705a      	strb	r2, [r3, #1]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8002588:	202a      	movs	r0, #42	@ 0x2a
 800258a:	f7ff fc77 	bl	8001e7c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 800258e:	193b      	adds	r3, r7, r4
 8002590:	2104      	movs	r1, #4
 8002592:	0018      	movs	r0, r3
 8002594:	f7ff fcae 	bl	8001ef4 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8002598:	202b      	movs	r0, #43	@ 0x2b
 800259a:	f7ff fc6f 	bl	8001e7c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 800259e:	197b      	adds	r3, r7, r5
 80025a0:	2104      	movs	r1, #4
 80025a2:	0018      	movs	r0, r3
 80025a4:	f7ff fca6 	bl	8001ef4 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 80025a8:	202c      	movs	r0, #44	@ 0x2c
 80025aa:	f7ff fc67 	bl	8001e7c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 80025ae:	19bb      	adds	r3, r7, r6
 80025b0:	2102      	movs	r1, #2
 80025b2:	0018      	movs	r0, r3
 80025b4:	f7ff fc9e 	bl	8001ef4 <ILI9341_WriteBuffer>
 80025b8:	e000      	b.n	80025bc <ILI9341_DrawPixel+0xf4>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80025ba:	46c0      	nop			@ (mov r8, r8)
}
 80025bc:	46bd      	mov	sp, r7
 80025be:	b007      	add	sp, #28
 80025c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025c2:	46c0      	nop			@ (mov r8, r8)
 80025c4:	2000000a 	.word	0x2000000a
 80025c8:	20000008 	.word	0x20000008

080025cc <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 80025cc:	b5b0      	push	{r4, r5, r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	0005      	movs	r5, r0
 80025d4:	000c      	movs	r4, r1
 80025d6:	0010      	movs	r0, r2
 80025d8:	0019      	movs	r1, r3
 80025da:	1dbb      	adds	r3, r7, #6
 80025dc:	1c2a      	adds	r2, r5, #0
 80025de:	801a      	strh	r2, [r3, #0]
 80025e0:	1d3b      	adds	r3, r7, #4
 80025e2:	1c22      	adds	r2, r4, #0
 80025e4:	801a      	strh	r2, [r3, #0]
 80025e6:	1cbb      	adds	r3, r7, #2
 80025e8:	1c02      	adds	r2, r0, #0
 80025ea:	801a      	strh	r2, [r3, #0]
 80025ec:	003b      	movs	r3, r7
 80025ee:	1c0a      	adds	r2, r1, #0
 80025f0:	801a      	strh	r2, [r3, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80025f2:	4b2e      	ldr	r3, [pc, #184]	@ (80026ac <ILI9341_DrawRectangle+0xe0>)
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	1dba      	adds	r2, r7, #6
 80025fa:	8812      	ldrh	r2, [r2, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d250      	bcs.n	80026a2 <ILI9341_DrawRectangle+0xd6>
 8002600:	4b2b      	ldr	r3, [pc, #172]	@ (80026b0 <ILI9341_DrawRectangle+0xe4>)
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	b29b      	uxth	r3, r3
 8002606:	1d3a      	adds	r2, r7, #4
 8002608:	8812      	ldrh	r2, [r2, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d249      	bcs.n	80026a2 <ILI9341_DrawRectangle+0xd6>

	if((x+width-1)>=LCD_WIDTH)
 800260e:	1dbb      	adds	r3, r7, #6
 8002610:	881a      	ldrh	r2, [r3, #0]
 8002612:	1cbb      	adds	r3, r7, #2
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	18d3      	adds	r3, r2, r3
 8002618:	4a24      	ldr	r2, [pc, #144]	@ (80026ac <ILI9341_DrawRectangle+0xe0>)
 800261a:	8812      	ldrh	r2, [r2, #0]
 800261c:	b292      	uxth	r2, r2
 800261e:	4293      	cmp	r3, r2
 8002620:	dd07      	ble.n	8002632 <ILI9341_DrawRectangle+0x66>
	{
		width=LCD_WIDTH-x;
 8002622:	4b22      	ldr	r3, [pc, #136]	@ (80026ac <ILI9341_DrawRectangle+0xe0>)
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	b299      	uxth	r1, r3
 8002628:	1cbb      	adds	r3, r7, #2
 800262a:	1dba      	adds	r2, r7, #6
 800262c:	8812      	ldrh	r2, [r2, #0]
 800262e:	1a8a      	subs	r2, r1, r2
 8002630:	801a      	strh	r2, [r3, #0]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8002632:	1d3b      	adds	r3, r7, #4
 8002634:	881a      	ldrh	r2, [r3, #0]
 8002636:	003b      	movs	r3, r7
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	18d3      	adds	r3, r2, r3
 800263c:	4a1c      	ldr	r2, [pc, #112]	@ (80026b0 <ILI9341_DrawRectangle+0xe4>)
 800263e:	8812      	ldrh	r2, [r2, #0]
 8002640:	b292      	uxth	r2, r2
 8002642:	4293      	cmp	r3, r2
 8002644:	dd07      	ble.n	8002656 <ILI9341_DrawRectangle+0x8a>
	{
		height=LCD_HEIGHT-y;
 8002646:	4b1a      	ldr	r3, [pc, #104]	@ (80026b0 <ILI9341_DrawRectangle+0xe4>)
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	b299      	uxth	r1, r3
 800264c:	003b      	movs	r3, r7
 800264e:	1d3a      	adds	r2, r7, #4
 8002650:	8812      	ldrh	r2, [r2, #0]
 8002652:	1a8a      	subs	r2, r1, r2
 8002654:	801a      	strh	r2, [r3, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8002656:	1dba      	adds	r2, r7, #6
 8002658:	1cbb      	adds	r3, r7, #2
 800265a:	8812      	ldrh	r2, [r2, #0]
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	18d3      	adds	r3, r2, r3
 8002660:	b29b      	uxth	r3, r3
 8002662:	3b01      	subs	r3, #1
 8002664:	b29c      	uxth	r4, r3
 8002666:	1d3a      	adds	r2, r7, #4
 8002668:	003b      	movs	r3, r7
 800266a:	8812      	ldrh	r2, [r2, #0]
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	18d3      	adds	r3, r2, r3
 8002670:	b29b      	uxth	r3, r3
 8002672:	3b01      	subs	r3, #1
 8002674:	b29a      	uxth	r2, r3
 8002676:	1d3b      	adds	r3, r7, #4
 8002678:	8819      	ldrh	r1, [r3, #0]
 800267a:	1dbb      	adds	r3, r7, #6
 800267c:	8818      	ldrh	r0, [r3, #0]
 800267e:	0013      	movs	r3, r2
 8002680:	0022      	movs	r2, r4
 8002682:	f7ff fc59 	bl	8001f38 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8002686:	003b      	movs	r3, r7
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	1cba      	adds	r2, r7, #2
 800268c:	8812      	ldrh	r2, [r2, #0]
 800268e:	4353      	muls	r3, r2
 8002690:	001a      	movs	r2, r3
 8002692:	2318      	movs	r3, #24
 8002694:	18fb      	adds	r3, r7, r3
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	0011      	movs	r1, r2
 800269a:	0018      	movs	r0, r3
 800269c:	f7ff fe3c 	bl	8002318 <ILI9341_DrawColorBurst>
 80026a0:	e000      	b.n	80026a4 <ILI9341_DrawRectangle+0xd8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80026a2:	46c0      	nop			@ (mov r8, r8)
}
 80026a4:	46bd      	mov	sp, r7
 80026a6:	b002      	add	sp, #8
 80026a8:	bdb0      	pop	{r4, r5, r7, pc}
 80026aa:	46c0      	nop			@ (mov r8, r8)
 80026ac:	2000000a 	.word	0x2000000a
 80026b0:	20000008 	.word	0x20000008

080026b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026b8:	f001 f918 	bl	80038ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026bc:	f000 f819 	bl	80026f2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026c0:	f000 f920 	bl	8002904 <MX_GPIO_Init>
  MX_DMA_Init();
 80026c4:	f000 f900 	bl	80028c8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80026c8:	f000 f8b0 	bl	800282c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80026cc:	f000 f870 	bl	80027b0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  /* init tft first (driver in project) */
  ILI9341_Init();
 80026d0:	f7ff fcc9 	bl	8002066 <ILI9341_Init>
  ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 80026d4:	2003      	movs	r0, #3
 80026d6:	f7ff fdd1 	bl	800227c <ILI9341_SetRotation>
     /* Configure engine ticks (opţional) */
     Engine_SetLogicTick(40);  /* 25 Hz logic */
 80026da:	2028      	movs	r0, #40	@ 0x28
 80026dc:	f7fd ffa8 	bl	8000630 <Engine_SetLogicTick>
     Engine_SetRenderTick(25); /* 40 ms -> 25 Hz render */
 80026e0:	2019      	movs	r0, #25
 80026e2:	f7fd ffb5 	bl	8000650 <Engine_SetRenderTick>

     /* Init engine (will call Start()) and start runloop */
     Engine_Init();
 80026e6:	f7fd ffc3 	bl	8000670 <Engine_Init>
     Engine_RunLoop();
 80026ea:	f7fd ffcf 	bl	800068c <Engine_RunLoop>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80026ee:	46c0      	nop			@ (mov r8, r8)
 80026f0:	e7fd      	b.n	80026ee <main+0x3a>

080026f2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026f2:	b590      	push	{r4, r7, lr}
 80026f4:	b093      	sub	sp, #76	@ 0x4c
 80026f6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026f8:	2410      	movs	r4, #16
 80026fa:	193b      	adds	r3, r7, r4
 80026fc:	0018      	movs	r0, r3
 80026fe:	2338      	movs	r3, #56	@ 0x38
 8002700:	001a      	movs	r2, r3
 8002702:	2100      	movs	r1, #0
 8002704:	f004 f8dc 	bl	80068c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002708:	003b      	movs	r3, r7
 800270a:	0018      	movs	r0, r3
 800270c:	2310      	movs	r3, #16
 800270e:	001a      	movs	r2, r3
 8002710:	2100      	movs	r1, #0
 8002712:	f004 f8d5 	bl	80068c0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002716:	2380      	movs	r3, #128	@ 0x80
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	0018      	movs	r0, r3
 800271c:	f001 fe5e 	bl	80043dc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002720:	193b      	adds	r3, r7, r4
 8002722:	2202      	movs	r2, #2
 8002724:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002726:	193b      	adds	r3, r7, r4
 8002728:	2280      	movs	r2, #128	@ 0x80
 800272a:	0052      	lsls	r2, r2, #1
 800272c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800272e:	0021      	movs	r1, r4
 8002730:	187b      	adds	r3, r7, r1
 8002732:	2200      	movs	r2, #0
 8002734:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002736:	187b      	adds	r3, r7, r1
 8002738:	2240      	movs	r2, #64	@ 0x40
 800273a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800273c:	187b      	adds	r3, r7, r1
 800273e:	2202      	movs	r2, #2
 8002740:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002742:	187b      	adds	r3, r7, r1
 8002744:	2202      	movs	r2, #2
 8002746:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002748:	187b      	adds	r3, r7, r1
 800274a:	2200      	movs	r2, #0
 800274c:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800274e:	187b      	adds	r3, r7, r1
 8002750:	2208      	movs	r2, #8
 8002752:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002754:	187b      	adds	r3, r7, r1
 8002756:	2280      	movs	r2, #128	@ 0x80
 8002758:	0292      	lsls	r2, r2, #10
 800275a:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800275c:	187b      	adds	r3, r7, r1
 800275e:	2280      	movs	r2, #128	@ 0x80
 8002760:	0492      	lsls	r2, r2, #18
 8002762:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002764:	187b      	adds	r3, r7, r1
 8002766:	2280      	movs	r2, #128	@ 0x80
 8002768:	0592      	lsls	r2, r2, #22
 800276a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800276c:	187b      	adds	r3, r7, r1
 800276e:	0018      	movs	r0, r3
 8002770:	f001 fe80 	bl	8004474 <HAL_RCC_OscConfig>
 8002774:	1e03      	subs	r3, r0, #0
 8002776:	d001      	beq.n	800277c <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002778:	f000 f95e 	bl	8002a38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800277c:	003b      	movs	r3, r7
 800277e:	2207      	movs	r2, #7
 8002780:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002782:	003b      	movs	r3, r7
 8002784:	2202      	movs	r2, #2
 8002786:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002788:	003b      	movs	r3, r7
 800278a:	2200      	movs	r2, #0
 800278c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800278e:	003b      	movs	r3, r7
 8002790:	2200      	movs	r2, #0
 8002792:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002794:	003b      	movs	r3, r7
 8002796:	2102      	movs	r1, #2
 8002798:	0018      	movs	r0, r3
 800279a:	f002 f985 	bl	8004aa8 <HAL_RCC_ClockConfig>
 800279e:	1e03      	subs	r3, r0, #0
 80027a0:	d001      	beq.n	80027a6 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80027a2:	f000 f949 	bl	8002a38 <Error_Handler>
  }
}
 80027a6:	46c0      	nop			@ (mov r8, r8)
 80027a8:	46bd      	mov	sp, r7
 80027aa:	b013      	add	sp, #76	@ 0x4c
 80027ac:	bd90      	pop	{r4, r7, pc}
	...

080027b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80027b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002824 <MX_SPI1_Init+0x74>)
 80027b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002828 <MX_SPI1_Init+0x78>)
 80027b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002824 <MX_SPI1_Init+0x74>)
 80027bc:	2282      	movs	r2, #130	@ 0x82
 80027be:	0052      	lsls	r2, r2, #1
 80027c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80027c2:	4b18      	ldr	r3, [pc, #96]	@ (8002824 <MX_SPI1_Init+0x74>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027c8:	4b16      	ldr	r3, [pc, #88]	@ (8002824 <MX_SPI1_Init+0x74>)
 80027ca:	22e0      	movs	r2, #224	@ 0xe0
 80027cc:	00d2      	lsls	r2, r2, #3
 80027ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027d0:	4b14      	ldr	r3, [pc, #80]	@ (8002824 <MX_SPI1_Init+0x74>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027d6:	4b13      	ldr	r3, [pc, #76]	@ (8002824 <MX_SPI1_Init+0x74>)
 80027d8:	2200      	movs	r2, #0
 80027da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027dc:	4b11      	ldr	r3, [pc, #68]	@ (8002824 <MX_SPI1_Init+0x74>)
 80027de:	2280      	movs	r2, #128	@ 0x80
 80027e0:	0092      	lsls	r2, r2, #2
 80027e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002824 <MX_SPI1_Init+0x74>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002824 <MX_SPI1_Init+0x74>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002824 <MX_SPI1_Init+0x74>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002824 <MX_SPI1_Init+0x74>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80027fc:	4b09      	ldr	r3, [pc, #36]	@ (8002824 <MX_SPI1_Init+0x74>)
 80027fe:	2207      	movs	r2, #7
 8002800:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002802:	4b08      	ldr	r3, [pc, #32]	@ (8002824 <MX_SPI1_Init+0x74>)
 8002804:	2200      	movs	r2, #0
 8002806:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002808:	4b06      	ldr	r3, [pc, #24]	@ (8002824 <MX_SPI1_Init+0x74>)
 800280a:	2208      	movs	r2, #8
 800280c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800280e:	4b05      	ldr	r3, [pc, #20]	@ (8002824 <MX_SPI1_Init+0x74>)
 8002810:	0018      	movs	r0, r3
 8002812:	f002 fcab 	bl	800516c <HAL_SPI_Init>
 8002816:	1e03      	subs	r3, r0, #0
 8002818:	d001      	beq.n	800281e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800281a:	f000 f90d 	bl	8002a38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800281e:	46c0      	nop			@ (mov r8, r8)
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	200027d4 	.word	0x200027d4
 8002828:	40013000 	.word	0x40013000

0800282c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002830:	4b23      	ldr	r3, [pc, #140]	@ (80028c0 <MX_USART2_UART_Init+0x94>)
 8002832:	4a24      	ldr	r2, [pc, #144]	@ (80028c4 <MX_USART2_UART_Init+0x98>)
 8002834:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002836:	4b22      	ldr	r3, [pc, #136]	@ (80028c0 <MX_USART2_UART_Init+0x94>)
 8002838:	22e1      	movs	r2, #225	@ 0xe1
 800283a:	0252      	lsls	r2, r2, #9
 800283c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800283e:	4b20      	ldr	r3, [pc, #128]	@ (80028c0 <MX_USART2_UART_Init+0x94>)
 8002840:	2200      	movs	r2, #0
 8002842:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002844:	4b1e      	ldr	r3, [pc, #120]	@ (80028c0 <MX_USART2_UART_Init+0x94>)
 8002846:	2200      	movs	r2, #0
 8002848:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800284a:	4b1d      	ldr	r3, [pc, #116]	@ (80028c0 <MX_USART2_UART_Init+0x94>)
 800284c:	2200      	movs	r2, #0
 800284e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002850:	4b1b      	ldr	r3, [pc, #108]	@ (80028c0 <MX_USART2_UART_Init+0x94>)
 8002852:	220c      	movs	r2, #12
 8002854:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002856:	4b1a      	ldr	r3, [pc, #104]	@ (80028c0 <MX_USART2_UART_Init+0x94>)
 8002858:	2200      	movs	r2, #0
 800285a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800285c:	4b18      	ldr	r3, [pc, #96]	@ (80028c0 <MX_USART2_UART_Init+0x94>)
 800285e:	2200      	movs	r2, #0
 8002860:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002862:	4b17      	ldr	r3, [pc, #92]	@ (80028c0 <MX_USART2_UART_Init+0x94>)
 8002864:	2200      	movs	r2, #0
 8002866:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002868:	4b15      	ldr	r3, [pc, #84]	@ (80028c0 <MX_USART2_UART_Init+0x94>)
 800286a:	2200      	movs	r2, #0
 800286c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800286e:	4b14      	ldr	r3, [pc, #80]	@ (80028c0 <MX_USART2_UART_Init+0x94>)
 8002870:	2200      	movs	r2, #0
 8002872:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002874:	4b12      	ldr	r3, [pc, #72]	@ (80028c0 <MX_USART2_UART_Init+0x94>)
 8002876:	0018      	movs	r0, r3
 8002878:	f003 f99e 	bl	8005bb8 <HAL_UART_Init>
 800287c:	1e03      	subs	r3, r0, #0
 800287e:	d001      	beq.n	8002884 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002880:	f000 f8da 	bl	8002a38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002884:	4b0e      	ldr	r3, [pc, #56]	@ (80028c0 <MX_USART2_UART_Init+0x94>)
 8002886:	2100      	movs	r1, #0
 8002888:	0018      	movs	r0, r3
 800288a:	f003 ff17 	bl	80066bc <HAL_UARTEx_SetTxFifoThreshold>
 800288e:	1e03      	subs	r3, r0, #0
 8002890:	d001      	beq.n	8002896 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002892:	f000 f8d1 	bl	8002a38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002896:	4b0a      	ldr	r3, [pc, #40]	@ (80028c0 <MX_USART2_UART_Init+0x94>)
 8002898:	2100      	movs	r1, #0
 800289a:	0018      	movs	r0, r3
 800289c:	f003 ff4e 	bl	800673c <HAL_UARTEx_SetRxFifoThreshold>
 80028a0:	1e03      	subs	r3, r0, #0
 80028a2:	d001      	beq.n	80028a8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80028a4:	f000 f8c8 	bl	8002a38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80028a8:	4b05      	ldr	r3, [pc, #20]	@ (80028c0 <MX_USART2_UART_Init+0x94>)
 80028aa:	0018      	movs	r0, r3
 80028ac:	f003 fecc 	bl	8006648 <HAL_UARTEx_DisableFifoMode>
 80028b0:	1e03      	subs	r3, r0, #0
 80028b2:	d001      	beq.n	80028b8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80028b4:	f000 f8c0 	bl	8002a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028b8:	46c0      	nop			@ (mov r8, r8)
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	46c0      	nop			@ (mov r8, r8)
 80028c0:	20002894 	.word	0x20002894
 80028c4:	40004400 	.word	0x40004400

080028c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002900 <MX_DMA_Init+0x38>)
 80028d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002900 <MX_DMA_Init+0x38>)
 80028d4:	2101      	movs	r1, #1
 80028d6:	430a      	orrs	r2, r1
 80028d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80028da:	4b09      	ldr	r3, [pc, #36]	@ (8002900 <MX_DMA_Init+0x38>)
 80028dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028de:	2201      	movs	r2, #1
 80028e0:	4013      	ands	r3, r2
 80028e2:	607b      	str	r3, [r7, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2100      	movs	r1, #0
 80028ea:	2009      	movs	r0, #9
 80028ec:	f001 f954 	bl	8003b98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80028f0:	2009      	movs	r0, #9
 80028f2:	f001 f966 	bl	8003bc2 <HAL_NVIC_EnableIRQ>

}
 80028f6:	46c0      	nop			@ (mov r8, r8)
 80028f8:	46bd      	mov	sp, r7
 80028fa:	b002      	add	sp, #8
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	46c0      	nop			@ (mov r8, r8)
 8002900:	40021000 	.word	0x40021000

08002904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002904:	b590      	push	{r4, r7, lr}
 8002906:	b08b      	sub	sp, #44	@ 0x2c
 8002908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800290a:	2414      	movs	r4, #20
 800290c:	193b      	adds	r3, r7, r4
 800290e:	0018      	movs	r0, r3
 8002910:	2314      	movs	r3, #20
 8002912:	001a      	movs	r2, r3
 8002914:	2100      	movs	r1, #0
 8002916:	f003 ffd3 	bl	80068c0 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800291a:	4b44      	ldr	r3, [pc, #272]	@ (8002a2c <MX_GPIO_Init+0x128>)
 800291c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800291e:	4b43      	ldr	r3, [pc, #268]	@ (8002a2c <MX_GPIO_Init+0x128>)
 8002920:	2104      	movs	r1, #4
 8002922:	430a      	orrs	r2, r1
 8002924:	635a      	str	r2, [r3, #52]	@ 0x34
 8002926:	4b41      	ldr	r3, [pc, #260]	@ (8002a2c <MX_GPIO_Init+0x128>)
 8002928:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800292a:	2204      	movs	r2, #4
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
 8002930:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002932:	4b3e      	ldr	r3, [pc, #248]	@ (8002a2c <MX_GPIO_Init+0x128>)
 8002934:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002936:	4b3d      	ldr	r3, [pc, #244]	@ (8002a2c <MX_GPIO_Init+0x128>)
 8002938:	2120      	movs	r1, #32
 800293a:	430a      	orrs	r2, r1
 800293c:	635a      	str	r2, [r3, #52]	@ 0x34
 800293e:	4b3b      	ldr	r3, [pc, #236]	@ (8002a2c <MX_GPIO_Init+0x128>)
 8002940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002942:	2220      	movs	r2, #32
 8002944:	4013      	ands	r3, r2
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800294a:	4b38      	ldr	r3, [pc, #224]	@ (8002a2c <MX_GPIO_Init+0x128>)
 800294c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800294e:	4b37      	ldr	r3, [pc, #220]	@ (8002a2c <MX_GPIO_Init+0x128>)
 8002950:	2101      	movs	r1, #1
 8002952:	430a      	orrs	r2, r1
 8002954:	635a      	str	r2, [r3, #52]	@ 0x34
 8002956:	4b35      	ldr	r3, [pc, #212]	@ (8002a2c <MX_GPIO_Init+0x128>)
 8002958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800295a:	2201      	movs	r2, #1
 800295c:	4013      	ands	r3, r2
 800295e:	60bb      	str	r3, [r7, #8]
 8002960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002962:	4b32      	ldr	r3, [pc, #200]	@ (8002a2c <MX_GPIO_Init+0x128>)
 8002964:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002966:	4b31      	ldr	r3, [pc, #196]	@ (8002a2c <MX_GPIO_Init+0x128>)
 8002968:	2102      	movs	r1, #2
 800296a:	430a      	orrs	r2, r1
 800296c:	635a      	str	r2, [r3, #52]	@ 0x34
 800296e:	4b2f      	ldr	r3, [pc, #188]	@ (8002a2c <MX_GPIO_Init+0x128>)
 8002970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002972:	2202      	movs	r2, #2
 8002974:	4013      	ands	r3, r2
 8002976:	607b      	str	r3, [r7, #4]
 8002978:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_4, GPIO_PIN_RESET);
 800297a:	492d      	ldr	r1, [pc, #180]	@ (8002a30 <MX_GPIO_Init+0x12c>)
 800297c:	4b2d      	ldr	r3, [pc, #180]	@ (8002a34 <MX_GPIO_Init+0x130>)
 800297e:	2200      	movs	r2, #0
 8002980:	0018      	movs	r0, r3
 8002982:	f001 fd0e 	bl	80043a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002986:	2380      	movs	r3, #128	@ 0x80
 8002988:	0059      	lsls	r1, r3, #1
 800298a:	23a0      	movs	r3, #160	@ 0xa0
 800298c:	05db      	lsls	r3, r3, #23
 800298e:	2200      	movs	r2, #0
 8002990:	0018      	movs	r0, r3
 8002992:	f001 fd06 	bl	80043a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BTN_Pin BTNA1_Pin BTNA4_Pin */
  GPIO_InitStruct.Pin = BTN_Pin|BTNA1_Pin|BTNA4_Pin;
 8002996:	193b      	adds	r3, r7, r4
 8002998:	2213      	movs	r2, #19
 800299a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800299c:	193b      	adds	r3, r7, r4
 800299e:	2200      	movs	r2, #0
 80029a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029a2:	193b      	adds	r3, r7, r4
 80029a4:	2201      	movs	r2, #1
 80029a6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a8:	193a      	adds	r2, r7, r4
 80029aa:	23a0      	movs	r3, #160	@ 0xa0
 80029ac:	05db      	lsls	r3, r3, #23
 80029ae:	0011      	movs	r1, r2
 80029b0:	0018      	movs	r0, r3
 80029b2:	f001 fb75 	bl	80040a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTNB1_Pin */
  GPIO_InitStruct.Pin = BTNB1_Pin;
 80029b6:	193b      	adds	r3, r7, r4
 80029b8:	2202      	movs	r2, #2
 80029ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029bc:	193b      	adds	r3, r7, r4
 80029be:	2200      	movs	r2, #0
 80029c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029c2:	193b      	adds	r3, r7, r4
 80029c4:	2201      	movs	r2, #1
 80029c6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTNB1_GPIO_Port, &GPIO_InitStruct);
 80029c8:	193b      	adds	r3, r7, r4
 80029ca:	4a1a      	ldr	r2, [pc, #104]	@ (8002a34 <MX_GPIO_Init+0x130>)
 80029cc:	0019      	movs	r1, r3
 80029ce:	0010      	movs	r0, r2
 80029d0:	f001 fb66 	bl	80040a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_4;
 80029d4:	193b      	adds	r3, r7, r4
 80029d6:	4a16      	ldr	r2, [pc, #88]	@ (8002a30 <MX_GPIO_Init+0x12c>)
 80029d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029da:	193b      	adds	r3, r7, r4
 80029dc:	2201      	movs	r2, #1
 80029de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e0:	193b      	adds	r3, r7, r4
 80029e2:	2200      	movs	r2, #0
 80029e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029e6:	193b      	adds	r3, r7, r4
 80029e8:	2202      	movs	r2, #2
 80029ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ec:	193b      	adds	r3, r7, r4
 80029ee:	4a11      	ldr	r2, [pc, #68]	@ (8002a34 <MX_GPIO_Init+0x130>)
 80029f0:	0019      	movs	r1, r3
 80029f2:	0010      	movs	r0, r2
 80029f4:	f001 fb54 	bl	80040a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029f8:	0021      	movs	r1, r4
 80029fa:	187b      	adds	r3, r7, r1
 80029fc:	2280      	movs	r2, #128	@ 0x80
 80029fe:	0052      	lsls	r2, r2, #1
 8002a00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a02:	187b      	adds	r3, r7, r1
 8002a04:	2201      	movs	r2, #1
 8002a06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	187b      	adds	r3, r7, r1
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0e:	187b      	adds	r3, r7, r1
 8002a10:	2200      	movs	r2, #0
 8002a12:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a14:	187a      	adds	r2, r7, r1
 8002a16:	23a0      	movs	r3, #160	@ 0xa0
 8002a18:	05db      	lsls	r3, r3, #23
 8002a1a:	0011      	movs	r1, r2
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f001 fb3f 	bl	80040a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002a22:	46c0      	nop			@ (mov r8, r8)
 8002a24:	46bd      	mov	sp, r7
 8002a26:	b00b      	add	sp, #44	@ 0x2c
 8002a28:	bd90      	pop	{r4, r7, pc}
 8002a2a:	46c0      	nop			@ (mov r8, r8)
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	00004010 	.word	0x00004010
 8002a34:	50000400 	.word	0x50000400

08002a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a3c:	b672      	cpsid	i
}
 8002a3e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a40:	46c0      	nop			@ (mov r8, r8)
 8002a42:	e7fd      	b.n	8002a40 <Error_Handler+0x8>

08002a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8002a88 <HAL_MspInit+0x44>)
 8002a4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a88 <HAL_MspInit+0x44>)
 8002a50:	2101      	movs	r1, #1
 8002a52:	430a      	orrs	r2, r1
 8002a54:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a56:	4b0c      	ldr	r3, [pc, #48]	@ (8002a88 <HAL_MspInit+0x44>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	607b      	str	r3, [r7, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a62:	4b09      	ldr	r3, [pc, #36]	@ (8002a88 <HAL_MspInit+0x44>)
 8002a64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a66:	4b08      	ldr	r3, [pc, #32]	@ (8002a88 <HAL_MspInit+0x44>)
 8002a68:	2180      	movs	r1, #128	@ 0x80
 8002a6a:	0549      	lsls	r1, r1, #21
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a70:	4b05      	ldr	r3, [pc, #20]	@ (8002a88 <HAL_MspInit+0x44>)
 8002a72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a74:	2380      	movs	r3, #128	@ 0x80
 8002a76:	055b      	lsls	r3, r3, #21
 8002a78:	4013      	ands	r3, r2
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a7e:	46c0      	nop			@ (mov r8, r8)
 8002a80:	46bd      	mov	sp, r7
 8002a82:	b002      	add	sp, #8
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	46c0      	nop			@ (mov r8, r8)
 8002a88:	40021000 	.word	0x40021000

08002a8c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a8c:	b590      	push	{r4, r7, lr}
 8002a8e:	b08b      	sub	sp, #44	@ 0x2c
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a94:	2414      	movs	r4, #20
 8002a96:	193b      	adds	r3, r7, r4
 8002a98:	0018      	movs	r0, r3
 8002a9a:	2314      	movs	r3, #20
 8002a9c:	001a      	movs	r2, r3
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	f003 ff0e 	bl	80068c0 <memset>
  if(hspi->Instance==SPI1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a30      	ldr	r2, [pc, #192]	@ (8002b6c <HAL_SPI_MspInit+0xe0>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d159      	bne.n	8002b62 <HAL_SPI_MspInit+0xd6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002aae:	4b30      	ldr	r3, [pc, #192]	@ (8002b70 <HAL_SPI_MspInit+0xe4>)
 8002ab0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ab2:	4b2f      	ldr	r3, [pc, #188]	@ (8002b70 <HAL_SPI_MspInit+0xe4>)
 8002ab4:	2180      	movs	r1, #128	@ 0x80
 8002ab6:	0149      	lsls	r1, r1, #5
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	641a      	str	r2, [r3, #64]	@ 0x40
 8002abc:	4b2c      	ldr	r3, [pc, #176]	@ (8002b70 <HAL_SPI_MspInit+0xe4>)
 8002abe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ac0:	2380      	movs	r3, #128	@ 0x80
 8002ac2:	015b      	lsls	r3, r3, #5
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aca:	4b29      	ldr	r3, [pc, #164]	@ (8002b70 <HAL_SPI_MspInit+0xe4>)
 8002acc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ace:	4b28      	ldr	r3, [pc, #160]	@ (8002b70 <HAL_SPI_MspInit+0xe4>)
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ad6:	4b26      	ldr	r3, [pc, #152]	@ (8002b70 <HAL_SPI_MspInit+0xe4>)
 8002ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ada:	2201      	movs	r2, #1
 8002adc:	4013      	ands	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002ae2:	0021      	movs	r1, r4
 8002ae4:	187b      	adds	r3, r7, r1
 8002ae6:	22a0      	movs	r2, #160	@ 0xa0
 8002ae8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aea:	187b      	adds	r3, r7, r1
 8002aec:	2202      	movs	r2, #2
 8002aee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	187b      	adds	r3, r7, r1
 8002af2:	2200      	movs	r2, #0
 8002af4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af6:	187b      	adds	r3, r7, r1
 8002af8:	2203      	movs	r2, #3
 8002afa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002afc:	187b      	adds	r3, r7, r1
 8002afe:	2200      	movs	r2, #0
 8002b00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b02:	187a      	adds	r2, r7, r1
 8002b04:	23a0      	movs	r3, #160	@ 0xa0
 8002b06:	05db      	lsls	r3, r3, #23
 8002b08:	0011      	movs	r1, r2
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f001 fac8 	bl	80040a0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8002b10:	4b18      	ldr	r3, [pc, #96]	@ (8002b74 <HAL_SPI_MspInit+0xe8>)
 8002b12:	4a19      	ldr	r2, [pc, #100]	@ (8002b78 <HAL_SPI_MspInit+0xec>)
 8002b14:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002b16:	4b17      	ldr	r3, [pc, #92]	@ (8002b74 <HAL_SPI_MspInit+0xe8>)
 8002b18:	2211      	movs	r2, #17
 8002b1a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b1c:	4b15      	ldr	r3, [pc, #84]	@ (8002b74 <HAL_SPI_MspInit+0xe8>)
 8002b1e:	2210      	movs	r2, #16
 8002b20:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b22:	4b14      	ldr	r3, [pc, #80]	@ (8002b74 <HAL_SPI_MspInit+0xe8>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b28:	4b12      	ldr	r3, [pc, #72]	@ (8002b74 <HAL_SPI_MspInit+0xe8>)
 8002b2a:	2280      	movs	r2, #128	@ 0x80
 8002b2c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b2e:	4b11      	ldr	r3, [pc, #68]	@ (8002b74 <HAL_SPI_MspInit+0xe8>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b34:	4b0f      	ldr	r3, [pc, #60]	@ (8002b74 <HAL_SPI_MspInit+0xe8>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b74 <HAL_SPI_MspInit+0xe8>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b40:	4b0c      	ldr	r3, [pc, #48]	@ (8002b74 <HAL_SPI_MspInit+0xe8>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002b46:	4b0b      	ldr	r3, [pc, #44]	@ (8002b74 <HAL_SPI_MspInit+0xe8>)
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f001 f857 	bl	8003bfc <HAL_DMA_Init>
 8002b4e:	1e03      	subs	r3, r0, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8002b52:	f7ff ff71 	bl	8002a38 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a06      	ldr	r2, [pc, #24]	@ (8002b74 <HAL_SPI_MspInit+0xe8>)
 8002b5a:	655a      	str	r2, [r3, #84]	@ 0x54
 8002b5c:	4b05      	ldr	r3, [pc, #20]	@ (8002b74 <HAL_SPI_MspInit+0xe8>)
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002b62:	46c0      	nop			@ (mov r8, r8)
 8002b64:	46bd      	mov	sp, r7
 8002b66:	b00b      	add	sp, #44	@ 0x2c
 8002b68:	bd90      	pop	{r4, r7, pc}
 8002b6a:	46c0      	nop			@ (mov r8, r8)
 8002b6c:	40013000 	.word	0x40013000
 8002b70:	40021000 	.word	0x40021000
 8002b74:	20002838 	.word	0x20002838
 8002b78:	40020008 	.word	0x40020008

08002b7c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b7c:	b590      	push	{r4, r7, lr}
 8002b7e:	b097      	sub	sp, #92	@ 0x5c
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b84:	2344      	movs	r3, #68	@ 0x44
 8002b86:	18fb      	adds	r3, r7, r3
 8002b88:	0018      	movs	r0, r3
 8002b8a:	2314      	movs	r3, #20
 8002b8c:	001a      	movs	r2, r3
 8002b8e:	2100      	movs	r1, #0
 8002b90:	f003 fe96 	bl	80068c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b94:	2410      	movs	r4, #16
 8002b96:	193b      	adds	r3, r7, r4
 8002b98:	0018      	movs	r0, r3
 8002b9a:	2334      	movs	r3, #52	@ 0x34
 8002b9c:	001a      	movs	r2, r3
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	f003 fe8e 	bl	80068c0 <memset>
  if(huart->Instance==USART2)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a22      	ldr	r2, [pc, #136]	@ (8002c34 <HAL_UART_MspInit+0xb8>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d13e      	bne.n	8002c2c <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002bae:	193b      	adds	r3, r7, r4
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002bb4:	193b      	adds	r3, r7, r4
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bba:	193b      	adds	r3, r7, r4
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f002 f91d 	bl	8004dfc <HAL_RCCEx_PeriphCLKConfig>
 8002bc2:	1e03      	subs	r3, r0, #0
 8002bc4:	d001      	beq.n	8002bca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002bc6:	f7ff ff37 	bl	8002a38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bca:	4b1b      	ldr	r3, [pc, #108]	@ (8002c38 <HAL_UART_MspInit+0xbc>)
 8002bcc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bce:	4b1a      	ldr	r3, [pc, #104]	@ (8002c38 <HAL_UART_MspInit+0xbc>)
 8002bd0:	2180      	movs	r1, #128	@ 0x80
 8002bd2:	0289      	lsls	r1, r1, #10
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002bd8:	4b17      	ldr	r3, [pc, #92]	@ (8002c38 <HAL_UART_MspInit+0xbc>)
 8002bda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bdc:	2380      	movs	r3, #128	@ 0x80
 8002bde:	029b      	lsls	r3, r3, #10
 8002be0:	4013      	ands	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be6:	4b14      	ldr	r3, [pc, #80]	@ (8002c38 <HAL_UART_MspInit+0xbc>)
 8002be8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bea:	4b13      	ldr	r3, [pc, #76]	@ (8002c38 <HAL_UART_MspInit+0xbc>)
 8002bec:	2101      	movs	r1, #1
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002bf2:	4b11      	ldr	r3, [pc, #68]	@ (8002c38 <HAL_UART_MspInit+0xbc>)
 8002bf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	60bb      	str	r3, [r7, #8]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8002bfe:	2144      	movs	r1, #68	@ 0x44
 8002c00:	187b      	adds	r3, r7, r1
 8002c02:	220c      	movs	r2, #12
 8002c04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c06:	187b      	adds	r3, r7, r1
 8002c08:	2202      	movs	r2, #2
 8002c0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c0c:	187b      	adds	r3, r7, r1
 8002c0e:	2201      	movs	r2, #1
 8002c10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c12:	187b      	adds	r3, r7, r1
 8002c14:	2200      	movs	r2, #0
 8002c16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002c18:	187b      	adds	r3, r7, r1
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1e:	187a      	adds	r2, r7, r1
 8002c20:	23a0      	movs	r3, #160	@ 0xa0
 8002c22:	05db      	lsls	r3, r3, #23
 8002c24:	0011      	movs	r1, r2
 8002c26:	0018      	movs	r0, r3
 8002c28:	f001 fa3a 	bl	80040a0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002c2c:	46c0      	nop			@ (mov r8, r8)
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	b017      	add	sp, #92	@ 0x5c
 8002c32:	bd90      	pop	{r4, r7, pc}
 8002c34:	40004400 	.word	0x40004400
 8002c38:	40021000 	.word	0x40021000

08002c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c40:	46c0      	nop			@ (mov r8, r8)
 8002c42:	e7fd      	b.n	8002c40 <NMI_Handler+0x4>

08002c44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c48:	46c0      	nop			@ (mov r8, r8)
 8002c4a:	e7fd      	b.n	8002c48 <HardFault_Handler+0x4>

08002c4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002c50:	46c0      	nop			@ (mov r8, r8)
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c5a:	46c0      	nop			@ (mov r8, r8)
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c64:	f000 feac 	bl	80039c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c68:	46c0      	nop			@ (mov r8, r8)
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
	...

08002c70 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002c74:	4b03      	ldr	r3, [pc, #12]	@ (8002c84 <DMA1_Channel1_IRQHandler+0x14>)
 8002c76:	0018      	movs	r0, r3
 8002c78:	f001 f8d0 	bl	8003e1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c7c:	46c0      	nop			@ (mov r8, r8)
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	46c0      	nop			@ (mov r8, r8)
 8002c84:	20002838 	.word	0x20002838

08002c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c90:	4a14      	ldr	r2, [pc, #80]	@ (8002ce4 <_sbrk+0x5c>)
 8002c92:	4b15      	ldr	r3, [pc, #84]	@ (8002ce8 <_sbrk+0x60>)
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c9c:	4b13      	ldr	r3, [pc, #76]	@ (8002cec <_sbrk+0x64>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d102      	bne.n	8002caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ca4:	4b11      	ldr	r3, [pc, #68]	@ (8002cec <_sbrk+0x64>)
 8002ca6:	4a12      	ldr	r2, [pc, #72]	@ (8002cf0 <_sbrk+0x68>)
 8002ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002caa:	4b10      	ldr	r3, [pc, #64]	@ (8002cec <_sbrk+0x64>)
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	18d3      	adds	r3, r2, r3
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d207      	bcs.n	8002cc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cb8:	f003 fe0a 	bl	80068d0 <__errno>
 8002cbc:	0003      	movs	r3, r0
 8002cbe:	220c      	movs	r2, #12
 8002cc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	425b      	negs	r3, r3
 8002cc6:	e009      	b.n	8002cdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cc8:	4b08      	ldr	r3, [pc, #32]	@ (8002cec <_sbrk+0x64>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cce:	4b07      	ldr	r3, [pc, #28]	@ (8002cec <_sbrk+0x64>)
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	18d2      	adds	r2, r2, r3
 8002cd6:	4b05      	ldr	r3, [pc, #20]	@ (8002cec <_sbrk+0x64>)
 8002cd8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002cda:	68fb      	ldr	r3, [r7, #12]
}
 8002cdc:	0018      	movs	r0, r3
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	b006      	add	sp, #24
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	20009000 	.word	0x20009000
 8002ce8:	00000400 	.word	0x00000400
 8002cec:	20002928 	.word	0x20002928
 8002cf0:	20002d28 	.word	0x20002d28

08002cf4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cf8:	46c0      	nop			@ (mov r8, r8)
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <rects_overlap>:
#define MAX_COINS 16
static GameObject *coins[MAX_COINS];
static int coin_count = 0;

/* util */
static int rects_overlap(int ax,int ay,int aw,int ah, int bx,int by,int bw,int bh){
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b084      	sub	sp, #16
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	607a      	str	r2, [r7, #4]
 8002d0a:	603b      	str	r3, [r7, #0]
    if(ax + aw <= bx) return 0;
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	18d3      	adds	r3, r2, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	db01      	blt.n	8002d1c <rects_overlap+0x1e>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	e018      	b.n	8002d4e <rects_overlap+0x50>
    if(bx + bw <= ax) return 0;
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	18d3      	adds	r3, r2, r3
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	db01      	blt.n	8002d2c <rects_overlap+0x2e>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	e010      	b.n	8002d4e <rects_overlap+0x50>
    if(ay + ah <= by) return 0;
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	18d3      	adds	r3, r2, r3
 8002d32:	69fa      	ldr	r2, [r7, #28]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	db01      	blt.n	8002d3c <rects_overlap+0x3e>
 8002d38:	2300      	movs	r3, #0
 8002d3a:	e008      	b.n	8002d4e <rects_overlap+0x50>
    if(by + bh <= ay) return 0;
 8002d3c:	69fa      	ldr	r2, [r7, #28]
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d40:	18d3      	adds	r3, r2, r3
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	db01      	blt.n	8002d4c <rects_overlap+0x4e>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	e000      	b.n	8002d4e <rects_overlap+0x50>
    return 1;
 8002d4c:	2301      	movs	r3, #1
}
 8002d4e:	0018      	movs	r0, r3
 8002d50:	46bd      	mov	sp, r7
 8002d52:	b004      	add	sp, #16
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <CreateSolid>:

/* Create solid colored sprite convenience */
static int CreateSolid(int w,int h,uint16_t color){
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b084      	sub	sp, #16
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	60f8      	str	r0, [r7, #12]
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	1dbb      	adds	r3, r7, #6
 8002d62:	801a      	strh	r2, [r3, #0]
    return GameObject_CreateSprite_Solid(w,h,color);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	b298      	uxth	r0, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	b299      	uxth	r1, r3
 8002d6c:	1dbb      	adds	r3, r7, #6
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	001a      	movs	r2, r3
 8002d72:	f7fd fd05 	bl	8000780 <GameObject_CreateSprite_Solid>
 8002d76:	0003      	movs	r3, r0
}
 8002d78:	0018      	movs	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	b004      	add	sp, #16
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <AddBlock>:

/* blocks list and GameObjects creation */
static void AddBlock(int x,int y,int w,int h,uint16_t color){
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
 8002d8c:	603b      	str	r3, [r7, #0]
    if(block_count >= MAX_BLOCKS) return;
 8002d8e:	4b26      	ldr	r3, [pc, #152]	@ (8002e28 <AddBlock+0xa8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b1f      	cmp	r3, #31
 8002d94:	dc44      	bgt.n	8002e20 <AddBlock+0xa0>
    blocks[block_count].x = x; blocks[block_count].y = y;
 8002d96:	4b24      	ldr	r3, [pc, #144]	@ (8002e28 <AddBlock+0xa8>)
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	4b24      	ldr	r3, [pc, #144]	@ (8002e2c <AddBlock+0xac>)
 8002d9c:	0112      	lsls	r2, r2, #4
 8002d9e:	68f9      	ldr	r1, [r7, #12]
 8002da0:	50d1      	str	r1, [r2, r3]
 8002da2:	4b21      	ldr	r3, [pc, #132]	@ (8002e28 <AddBlock+0xa8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a21      	ldr	r2, [pc, #132]	@ (8002e2c <AddBlock+0xac>)
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	18d3      	adds	r3, r2, r3
 8002dac:	3304      	adds	r3, #4
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	601a      	str	r2, [r3, #0]
    blocks[block_count].w = w; blocks[block_count].h = h;
 8002db2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e28 <AddBlock+0xa8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a1d      	ldr	r2, [pc, #116]	@ (8002e2c <AddBlock+0xac>)
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	18d3      	adds	r3, r2, r3
 8002dbc:	3308      	adds	r3, #8
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	4b19      	ldr	r3, [pc, #100]	@ (8002e28 <AddBlock+0xa8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a19      	ldr	r2, [pc, #100]	@ (8002e2c <AddBlock+0xac>)
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	18d3      	adds	r3, r2, r3
 8002dcc:	330c      	adds	r3, #12
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	601a      	str	r2, [r3, #0]
    block_count++;
 8002dd2:	4b15      	ldr	r3, [pc, #84]	@ (8002e28 <AddBlock+0xa8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	1c5a      	adds	r2, r3, #1
 8002dd8:	4b13      	ldr	r3, [pc, #76]	@ (8002e28 <AddBlock+0xa8>)
 8002dda:	601a      	str	r2, [r3, #0]

    int sid = CreateSolid(w,h,color);
 8002ddc:	2320      	movs	r3, #32
 8002dde:	18fb      	adds	r3, r7, r3
 8002de0:	881a      	ldrh	r2, [r3, #0]
 8002de2:	6839      	ldr	r1, [r7, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	0018      	movs	r0, r3
 8002de8:	f7ff ffb5 	bl	8002d56 <CreateSolid>
 8002dec:	0003      	movs	r3, r0
 8002dee:	617b      	str	r3, [r7, #20]
    GameObject *b = GameObject_Spawn(sid, x, y);
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	68f9      	ldr	r1, [r7, #12]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	0018      	movs	r0, r3
 8002df8:	f7fd fd48 	bl	800088c <GameObject_Spawn>
 8002dfc:	0003      	movs	r3, r0
 8002dfe:	613b      	str	r3, [r7, #16]
    if(b){ b->visible = 1; b->active = 0; b->z = 0; }
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00d      	beq.n	8002e22 <AddBlock+0xa2>
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	2228      	movs	r2, #40	@ 0x28
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	5499      	strb	r1, [r3, r2]
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	2229      	movs	r2, #41	@ 0x29
 8002e12:	2100      	movs	r1, #0
 8002e14:	5499      	strb	r1, [r3, r2]
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	2230      	movs	r2, #48	@ 0x30
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	5499      	strb	r1, [r3, r2]
 8002e1e:	e000      	b.n	8002e22 <AddBlock+0xa2>
    if(block_count >= MAX_BLOCKS) return;
 8002e20:	46c0      	nop			@ (mov r8, r8)
}
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b006      	add	sp, #24
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	20002b84 	.word	0x20002b84
 8002e2c:	20002984 	.word	0x20002984

08002e30 <SpawnGoomba>:

/* spawn goomba - stores in enemies[] */
static void SpawnGoomba(int x,int y,int vx){
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
    for(int i=0;i<MAX_ENEMIES;i++){
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	e037      	b.n	8002eb2 <SpawnGoomba+0x82>
        if(enemies[i].o == NULL){
 8002e42:	4b20      	ldr	r3, [pc, #128]	@ (8002ec4 <SpawnGoomba+0x94>)
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	00d2      	lsls	r2, r2, #3
 8002e48:	58d3      	ldr	r3, [r2, r3]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d12e      	bne.n	8002eac <SpawnGoomba+0x7c>
            GameObject *g = GameObject_Spawn(spr_goomba, x, y);
 8002e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ec8 <SpawnGoomba+0x98>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	68f9      	ldr	r1, [r7, #12]
 8002e56:	0018      	movs	r0, r3
 8002e58:	f7fd fd18 	bl	800088c <GameObject_Spawn>
 8002e5c:	0003      	movs	r3, r0
 8002e5e:	613b      	str	r3, [r7, #16]
            if(g){
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d029      	beq.n	8002eba <SpawnGoomba+0x8a>
                g->visible = 1; g->active = 1; g->z = 1;
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	2228      	movs	r2, #40	@ 0x28
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	5499      	strb	r1, [r3, r2]
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	2229      	movs	r2, #41	@ 0x29
 8002e72:	2101      	movs	r1, #1
 8002e74:	5499      	strb	r1, [r3, r2]
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	2230      	movs	r2, #48	@ 0x30
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	5499      	strb	r1, [r3, r2]
                GameObject_EnableLogic(g, NULL); /* set logic below */
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	2100      	movs	r1, #0
 8002e82:	0018      	movs	r0, r3
 8002e84:	f7fd ff94 	bl	8000db0 <GameObject_EnableLogic>
                /* attach GoombaLogic using engine API if available; we will set active logic pointer:
                   Assume engine offers GameObject_EnableLogic(g, func). Use engine function directly. */
                GameObject_EnableLogic(g, NULL); /* placeholder if engine requires call before pointer set */
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f7fd ff8f 	bl	8000db0 <GameObject_EnableLogic>
                enemies[i].o = g;
 8002e92:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec4 <SpawnGoomba+0x94>)
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	00d2      	lsls	r2, r2, #3
 8002e98:	6939      	ldr	r1, [r7, #16]
 8002e9a:	50d1      	str	r1, [r2, r3]
                enemies[i].vx = vx;
 8002e9c:	4a09      	ldr	r2, [pc, #36]	@ (8002ec4 <SpawnGoomba+0x94>)
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	18d3      	adds	r3, r2, r3
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	601a      	str	r2, [r3, #0]
            }
            return;
 8002eaa:	e006      	b.n	8002eba <SpawnGoomba+0x8a>
    for(int i=0;i<MAX_ENEMIES;i++){
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2b07      	cmp	r3, #7
 8002eb6:	ddc4      	ble.n	8002e42 <SpawnGoomba+0x12>
 8002eb8:	e000      	b.n	8002ebc <SpawnGoomba+0x8c>
            return;
 8002eba:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	b006      	add	sp, #24
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	46c0      	nop			@ (mov r8, r8)
 8002ec4:	20002944 	.word	0x20002944
 8002ec8:	20000020 	.word	0x20000020

08002ecc <GoombaLogic>:

/* we will implement Goomba logic as a separate function and enable it after spawn */
static void GoombaLogic(GameObject *o, uint32_t dt_ms){
 8002ecc:	b5b0      	push	{r4, r5, r7, lr}
 8002ece:	b090      	sub	sp, #64	@ 0x40
 8002ed0:	af04      	add	r7, sp, #16
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
    (void)dt_ms;
    Enemy *en = NULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for(int i=0;i<MAX_ENEMIES;i++){
 8002eda:	2300      	movs	r3, #0
 8002edc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ede:	e00f      	b.n	8002f00 <GoombaLogic+0x34>
        if(enemies[i].o == o){ en = &enemies[i]; break; }
 8002ee0:	4b55      	ldr	r3, [pc, #340]	@ (8003038 <GoombaLogic+0x16c>)
 8002ee2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ee4:	00d2      	lsls	r2, r2, #3
 8002ee6:	58d3      	ldr	r3, [r2, r3]
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d105      	bne.n	8002efa <GoombaLogic+0x2e>
 8002eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef0:	00da      	lsls	r2, r3, #3
 8002ef2:	4b51      	ldr	r3, [pc, #324]	@ (8003038 <GoombaLogic+0x16c>)
 8002ef4:	18d3      	adds	r3, r2, r3
 8002ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ef8:	e005      	b.n	8002f06 <GoombaLogic+0x3a>
    for(int i=0;i<MAX_ENEMIES;i++){
 8002efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002efc:	3301      	adds	r3, #1
 8002efe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f02:	2b07      	cmp	r3, #7
 8002f04:	ddec      	ble.n	8002ee0 <GoombaLogic+0x14>
    }
    if(!en) return;
 8002f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d100      	bne.n	8002f0e <GoombaLogic+0x42>
 8002f0c:	e08f      	b.n	800302e <GoombaLogic+0x162>
    int curx = o->x;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	627b      	str	r3, [r7, #36]	@ 0x24
    int cury = o->y;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	613b      	str	r3, [r7, #16]
    int nx = curx + en->vx;
 8002f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f20:	18d3      	adds	r3, r2, r3
 8002f22:	60fb      	str	r3, [r7, #12]

    /* horizontal collision with blocks -> reverse */
    int collided = 0;
 8002f24:	2300      	movs	r3, #0
 8002f26:	623b      	str	r3, [r7, #32]
    for(int i=0;i<block_count;i++){
 8002f28:	2300      	movs	r3, #0
 8002f2a:	61fb      	str	r3, [r7, #28]
 8002f2c:	e029      	b.n	8002f82 <GoombaLogic+0xb6>
        if(rects_overlap(nx, cury, GOOMBA_W, GOOMBA_H,
 8002f2e:	4b43      	ldr	r3, [pc, #268]	@ (800303c <GoombaLogic+0x170>)
 8002f30:	69fa      	ldr	r2, [r7, #28]
 8002f32:	0112      	lsls	r2, r2, #4
 8002f34:	58d2      	ldr	r2, [r2, r3]
 8002f36:	4941      	ldr	r1, [pc, #260]	@ (800303c <GoombaLogic+0x170>)
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	18cb      	adds	r3, r1, r3
 8002f3e:	3304      	adds	r3, #4
 8002f40:	6819      	ldr	r1, [r3, #0]
 8002f42:	483e      	ldr	r0, [pc, #248]	@ (800303c <GoombaLogic+0x170>)
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	18c3      	adds	r3, r0, r3
 8002f4a:	3308      	adds	r3, #8
 8002f4c:	6818      	ldr	r0, [r3, #0]
 8002f4e:	4c3b      	ldr	r4, [pc, #236]	@ (800303c <GoombaLogic+0x170>)
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	18e3      	adds	r3, r4, r3
 8002f56:	330c      	adds	r3, #12
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	693d      	ldr	r5, [r7, #16]
 8002f5c:	68fc      	ldr	r4, [r7, #12]
 8002f5e:	9303      	str	r3, [sp, #12]
 8002f60:	9002      	str	r0, [sp, #8]
 8002f62:	9101      	str	r1, [sp, #4]
 8002f64:	9200      	str	r2, [sp, #0]
 8002f66:	230c      	movs	r3, #12
 8002f68:	2210      	movs	r2, #16
 8002f6a:	0029      	movs	r1, r5
 8002f6c:	0020      	movs	r0, r4
 8002f6e:	f7ff fec6 	bl	8002cfe <rects_overlap>
 8002f72:	1e03      	subs	r3, r0, #0
 8002f74:	d002      	beq.n	8002f7c <GoombaLogic+0xb0>
                         blocks[i].x, blocks[i].y, blocks[i].w, blocks[i].h)){
            collided = 1; break;
 8002f76:	2301      	movs	r3, #1
 8002f78:	623b      	str	r3, [r7, #32]
 8002f7a:	e007      	b.n	8002f8c <GoombaLogic+0xc0>
    for(int i=0;i<block_count;i++){
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	61fb      	str	r3, [r7, #28]
 8002f82:	4b2f      	ldr	r3, [pc, #188]	@ (8003040 <GoombaLogic+0x174>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	69fa      	ldr	r2, [r7, #28]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	dbd0      	blt.n	8002f2e <GoombaLogic+0x62>
        }
    }
    if(collided){
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d005      	beq.n	8002f9e <GoombaLogic+0xd2>
        en->vx = -en->vx;
 8002f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	425a      	negs	r2, r3
 8002f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f9a:	605a      	str	r2, [r3, #4]
 8002f9c:	e007      	b.n	8002fae <GoombaLogic+0xe2>
    } else {
        GameObject_SetPos(o, nx, cury);
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	68f9      	ldr	r1, [r7, #12]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f7fd fe03 	bl	8000bb0 <GameObject_SetPos>
        curx = nx;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* basic gravity */
    int on_ground = 0;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61bb      	str	r3, [r7, #24]
    for(int i=0;i<block_count;i++){
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	e02a      	b.n	800300e <GoombaLogic+0x142>
        if(rects_overlap(curx, cury+1, GOOMBA_W, GOOMBA_H,
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1c5d      	adds	r5, r3, #1
 8002fbc:	4b1f      	ldr	r3, [pc, #124]	@ (800303c <GoombaLogic+0x170>)
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	0112      	lsls	r2, r2, #4
 8002fc2:	58d2      	ldr	r2, [r2, r3]
 8002fc4:	491d      	ldr	r1, [pc, #116]	@ (800303c <GoombaLogic+0x170>)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	18cb      	adds	r3, r1, r3
 8002fcc:	3304      	adds	r3, #4
 8002fce:	6819      	ldr	r1, [r3, #0]
 8002fd0:	481a      	ldr	r0, [pc, #104]	@ (800303c <GoombaLogic+0x170>)
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	18c3      	adds	r3, r0, r3
 8002fd8:	3308      	adds	r3, #8
 8002fda:	6818      	ldr	r0, [r3, #0]
 8002fdc:	4c17      	ldr	r4, [pc, #92]	@ (800303c <GoombaLogic+0x170>)
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	18e3      	adds	r3, r4, r3
 8002fe4:	330c      	adds	r3, #12
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8002fea:	9303      	str	r3, [sp, #12]
 8002fec:	9002      	str	r0, [sp, #8]
 8002fee:	9101      	str	r1, [sp, #4]
 8002ff0:	9200      	str	r2, [sp, #0]
 8002ff2:	230c      	movs	r3, #12
 8002ff4:	2210      	movs	r2, #16
 8002ff6:	0029      	movs	r1, r5
 8002ff8:	0020      	movs	r0, r4
 8002ffa:	f7ff fe80 	bl	8002cfe <rects_overlap>
 8002ffe:	1e03      	subs	r3, r0, #0
 8003000:	d002      	beq.n	8003008 <GoombaLogic+0x13c>
                         blocks[i].x, blocks[i].y, blocks[i].w, blocks[i].h)){
            on_ground = 1; break;
 8003002:	2301      	movs	r3, #1
 8003004:	61bb      	str	r3, [r7, #24]
 8003006:	e007      	b.n	8003018 <GoombaLogic+0x14c>
    for(int i=0;i<block_count;i++){
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	3301      	adds	r3, #1
 800300c:	617b      	str	r3, [r7, #20]
 800300e:	4b0c      	ldr	r3, [pc, #48]	@ (8003040 <GoombaLogic+0x174>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	429a      	cmp	r2, r3
 8003016:	dbcf      	blt.n	8002fb8 <GoombaLogic+0xec>
        }
    }
    if(!on_ground){
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d108      	bne.n	8003030 <GoombaLogic+0x164>
        GameObject_SetPos(o, curx, cury+1);
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	0018      	movs	r0, r3
 8003028:	f7fd fdc2 	bl	8000bb0 <GameObject_SetPos>
 800302c:	e000      	b.n	8003030 <GoombaLogic+0x164>
    if(!en) return;
 800302e:	46c0      	nop			@ (mov r8, r8)
    }
}
 8003030:	46bd      	mov	sp, r7
 8003032:	b00c      	add	sp, #48	@ 0x30
 8003034:	bdb0      	pop	{r4, r5, r7, pc}
 8003036:	46c0      	nop			@ (mov r8, r8)
 8003038:	20002944 	.word	0x20002944
 800303c:	20002984 	.word	0x20002984
 8003040:	20002b84 	.word	0x20002b84

08003044 <PlayerLogic>:

/* Player logic uses setter for every move to avoid artifacts */
static void PlayerLogic(GameObject *o, uint32_t dt_ms){
 8003044:	b5b0      	push	{r4, r5, r7, lr}
 8003046:	b096      	sub	sp, #88	@ 0x58
 8003048:	af04      	add	r7, sp, #16
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
    (void)dt_ms;
    int curx = o->x;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	647b      	str	r3, [r7, #68]	@ 0x44
    int cury = o->y;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	62bb      	str	r3, [r7, #40]	@ 0x28

    int left = Input_IsHeld(DIR_LEFT);
 800305a:	2003      	movs	r0, #3
 800305c:	f7fe f952 	bl	8001304 <Input_IsHeld>
 8003060:	0003      	movs	r3, r0
 8003062:	627b      	str	r3, [r7, #36]	@ 0x24
    int right = Input_IsHeld(DIR_RIGHT);
 8003064:	2004      	movs	r0, #4
 8003066:	f7fe f94d 	bl	8001304 <Input_IsHeld>
 800306a:	0003      	movs	r3, r0
 800306c:	623b      	str	r3, [r7, #32]
    int up = Input_IsHeld(DIR_UP) || Input_IsHeld(BUTTON_JUMP);
 800306e:	2001      	movs	r0, #1
 8003070:	f7fe f948 	bl	8001304 <Input_IsHeld>
 8003074:	1e03      	subs	r3, r0, #0
 8003076:	d104      	bne.n	8003082 <PlayerLogic+0x3e>
 8003078:	2000      	movs	r0, #0
 800307a:	f7fe f943 	bl	8001304 <Input_IsHeld>
 800307e:	1e03      	subs	r3, r0, #0
 8003080:	d001      	beq.n	8003086 <PlayerLogic+0x42>
 8003082:	2301      	movs	r3, #1
 8003084:	e000      	b.n	8003088 <PlayerLogic+0x44>
 8003086:	2300      	movs	r3, #0
 8003088:	61fb      	str	r3, [r7, #28]

    if(left && !right) player_vx = -MOVE_SPEED;
 800308a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308c:	2b00      	cmp	r3, #0
 800308e:	d007      	beq.n	80030a0 <PlayerLogic+0x5c>
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d104      	bne.n	80030a0 <PlayerLogic+0x5c>
 8003096:	4bc9      	ldr	r3, [pc, #804]	@ (80033bc <PlayerLogic+0x378>)
 8003098:	2202      	movs	r2, #2
 800309a:	4252      	negs	r2, r2
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	e00c      	b.n	80030ba <PlayerLogic+0x76>
    else if(right && !left) player_vx = MOVE_SPEED;
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d006      	beq.n	80030b4 <PlayerLogic+0x70>
 80030a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d103      	bne.n	80030b4 <PlayerLogic+0x70>
 80030ac:	4bc3      	ldr	r3, [pc, #780]	@ (80033bc <PlayerLogic+0x378>)
 80030ae:	2202      	movs	r2, #2
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	e002      	b.n	80030ba <PlayerLogic+0x76>
    else player_vx = 0;
 80030b4:	4bc1      	ldr	r3, [pc, #772]	@ (80033bc <PlayerLogic+0x378>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]

    if(up && player_on_ground){
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00a      	beq.n	80030d6 <PlayerLogic+0x92>
 80030c0:	4bbf      	ldr	r3, [pc, #764]	@ (80033c0 <PlayerLogic+0x37c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d006      	beq.n	80030d6 <PlayerLogic+0x92>
        player_vy = JUMP_V;
 80030c8:	4bbe      	ldr	r3, [pc, #760]	@ (80033c4 <PlayerLogic+0x380>)
 80030ca:	220e      	movs	r2, #14
 80030cc:	4252      	negs	r2, r2
 80030ce:	601a      	str	r2, [r3, #0]
        player_on_ground = 0;
 80030d0:	4bbb      	ldr	r3, [pc, #748]	@ (80033c0 <PlayerLogic+0x37c>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]
    }

    /* gravity */
    player_vy += GRAVITY_PIX;
 80030d6:	4bbb      	ldr	r3, [pc, #748]	@ (80033c4 <PlayerLogic+0x380>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	1c5a      	adds	r2, r3, #1
 80030dc:	4bb9      	ldr	r3, [pc, #740]	@ (80033c4 <PlayerLogic+0x380>)
 80030de:	601a      	str	r2, [r3, #0]
    if(player_vy > MAX_FALL_V) player_vy = MAX_FALL_V;
 80030e0:	4bb8      	ldr	r3, [pc, #736]	@ (80033c4 <PlayerLogic+0x380>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b0a      	cmp	r3, #10
 80030e6:	dd02      	ble.n	80030ee <PlayerLogic+0xaa>
 80030e8:	4bb6      	ldr	r3, [pc, #728]	@ (80033c4 <PlayerLogic+0x380>)
 80030ea:	220a      	movs	r2, #10
 80030ec:	601a      	str	r2, [r3, #0]

    int nx = curx + player_vx;
 80030ee:	4bb3      	ldr	r3, [pc, #716]	@ (80033bc <PlayerLogic+0x378>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030f4:	18d3      	adds	r3, r2, r3
 80030f6:	61bb      	str	r3, [r7, #24]
    int ny = cury + player_vy;
 80030f8:	4bb2      	ldr	r3, [pc, #712]	@ (80033c4 <PlayerLogic+0x380>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030fe:	18d3      	adds	r3, r2, r3
 8003100:	617b      	str	r3, [r7, #20]

    /* horizontal collision */
    int blockedX = 0;
 8003102:	2300      	movs	r3, #0
 8003104:	643b      	str	r3, [r7, #64]	@ 0x40
    for(int i=0;i<block_count;i++){
 8003106:	2300      	movs	r3, #0
 8003108:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800310a:	e029      	b.n	8003160 <PlayerLogic+0x11c>
        if(rects_overlap(nx, cury, PLAYER_W, PLAYER_H,
 800310c:	4bae      	ldr	r3, [pc, #696]	@ (80033c8 <PlayerLogic+0x384>)
 800310e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003110:	0112      	lsls	r2, r2, #4
 8003112:	58d2      	ldr	r2, [r2, r3]
 8003114:	49ac      	ldr	r1, [pc, #688]	@ (80033c8 <PlayerLogic+0x384>)
 8003116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	18cb      	adds	r3, r1, r3
 800311c:	3304      	adds	r3, #4
 800311e:	6819      	ldr	r1, [r3, #0]
 8003120:	48a9      	ldr	r0, [pc, #676]	@ (80033c8 <PlayerLogic+0x384>)
 8003122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003124:	011b      	lsls	r3, r3, #4
 8003126:	18c3      	adds	r3, r0, r3
 8003128:	3308      	adds	r3, #8
 800312a:	6818      	ldr	r0, [r3, #0]
 800312c:	4ca6      	ldr	r4, [pc, #664]	@ (80033c8 <PlayerLogic+0x384>)
 800312e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	18e3      	adds	r3, r4, r3
 8003134:	330c      	adds	r3, #12
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6abd      	ldr	r5, [r7, #40]	@ 0x28
 800313a:	69bc      	ldr	r4, [r7, #24]
 800313c:	9303      	str	r3, [sp, #12]
 800313e:	9002      	str	r0, [sp, #8]
 8003140:	9101      	str	r1, [sp, #4]
 8003142:	9200      	str	r2, [sp, #0]
 8003144:	2310      	movs	r3, #16
 8003146:	2210      	movs	r2, #16
 8003148:	0029      	movs	r1, r5
 800314a:	0020      	movs	r0, r4
 800314c:	f7ff fdd7 	bl	8002cfe <rects_overlap>
 8003150:	1e03      	subs	r3, r0, #0
 8003152:	d002      	beq.n	800315a <PlayerLogic+0x116>
                         blocks[i].x, blocks[i].y, blocks[i].w, blocks[i].h)){
            blockedX = 1; break;
 8003154:	2301      	movs	r3, #1
 8003156:	643b      	str	r3, [r7, #64]	@ 0x40
 8003158:	e007      	b.n	800316a <PlayerLogic+0x126>
    for(int i=0;i<block_count;i++){
 800315a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800315c:	3301      	adds	r3, #1
 800315e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003160:	4b9a      	ldr	r3, [pc, #616]	@ (80033cc <PlayerLogic+0x388>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003166:	429a      	cmp	r2, r3
 8003168:	dbd0      	blt.n	800310c <PlayerLogic+0xc8>
        }
    }
    if(!blockedX){
 800316a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800316c:	2b00      	cmp	r3, #0
 800316e:	d107      	bne.n	8003180 <PlayerLogic+0x13c>
        GameObject_SetPos(o, nx, cury);
 8003170:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003172:	69b9      	ldr	r1, [r7, #24]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	0018      	movs	r0, r3
 8003178:	f7fd fd1a 	bl	8000bb0 <GameObject_SetPos>
        curx = nx;
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    /* vertical collision */
    int blockedY = 0;
 8003180:	2300      	movs	r3, #0
 8003182:	63bb      	str	r3, [r7, #56]	@ 0x38
    player_on_ground = 0;
 8003184:	4b8e      	ldr	r3, [pc, #568]	@ (80033c0 <PlayerLogic+0x37c>)
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
    for(int i=0;i<block_count;i++){
 800318a:	2300      	movs	r3, #0
 800318c:	637b      	str	r3, [r7, #52]	@ 0x34
 800318e:	e056      	b.n	800323e <PlayerLogic+0x1fa>
        if(rects_overlap(curx, ny, PLAYER_W, PLAYER_H,
 8003190:	4b8d      	ldr	r3, [pc, #564]	@ (80033c8 <PlayerLogic+0x384>)
 8003192:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003194:	0112      	lsls	r2, r2, #4
 8003196:	58d2      	ldr	r2, [r2, r3]
 8003198:	498b      	ldr	r1, [pc, #556]	@ (80033c8 <PlayerLogic+0x384>)
 800319a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	18cb      	adds	r3, r1, r3
 80031a0:	3304      	adds	r3, #4
 80031a2:	6819      	ldr	r1, [r3, #0]
 80031a4:	4888      	ldr	r0, [pc, #544]	@ (80033c8 <PlayerLogic+0x384>)
 80031a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	18c3      	adds	r3, r0, r3
 80031ac:	3308      	adds	r3, #8
 80031ae:	6818      	ldr	r0, [r3, #0]
 80031b0:	4c85      	ldr	r4, [pc, #532]	@ (80033c8 <PlayerLogic+0x384>)
 80031b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	18e3      	adds	r3, r4, r3
 80031b8:	330c      	adds	r3, #12
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	697d      	ldr	r5, [r7, #20]
 80031be:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80031c0:	9303      	str	r3, [sp, #12]
 80031c2:	9002      	str	r0, [sp, #8]
 80031c4:	9101      	str	r1, [sp, #4]
 80031c6:	9200      	str	r2, [sp, #0]
 80031c8:	2310      	movs	r3, #16
 80031ca:	2210      	movs	r2, #16
 80031cc:	0029      	movs	r1, r5
 80031ce:	0020      	movs	r0, r4
 80031d0:	f7ff fd95 	bl	8002cfe <rects_overlap>
 80031d4:	1e03      	subs	r3, r0, #0
 80031d6:	d02f      	beq.n	8003238 <PlayerLogic+0x1f4>
                         blocks[i].x, blocks[i].y, blocks[i].w, blocks[i].h)){
            blockedY = 1;
 80031d8:	2301      	movs	r3, #1
 80031da:	63bb      	str	r3, [r7, #56]	@ 0x38
            if(player_vy > 0){
 80031dc:	4b79      	ldr	r3, [pc, #484]	@ (80033c4 <PlayerLogic+0x380>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	dd13      	ble.n	800320c <PlayerLogic+0x1c8>
                /* land on top */
                GameObject_SetPos(o, curx, blocks[i].y - PLAYER_H);
 80031e4:	4a78      	ldr	r2, [pc, #480]	@ (80033c8 <PlayerLogic+0x384>)
 80031e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	18d3      	adds	r3, r2, r3
 80031ec:	3304      	adds	r3, #4
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	3b10      	subs	r3, #16
 80031f2:	001a      	movs	r2, r3
 80031f4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	0018      	movs	r0, r3
 80031fa:	f7fd fcd9 	bl	8000bb0 <GameObject_SetPos>
                player_vy = 0;
 80031fe:	4b71      	ldr	r3, [pc, #452]	@ (80033c4 <PlayerLogic+0x380>)
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
                player_on_ground = 1;
 8003204:	4b6e      	ldr	r3, [pc, #440]	@ (80033c0 <PlayerLogic+0x37c>)
 8003206:	2201      	movs	r2, #1
 8003208:	601a      	str	r2, [r3, #0]
            } else {
                /* hit head */
                GameObject_SetPos(o, curx, blocks[i].y + blocks[i].h);
                player_vy = 0;
            }
            break;
 800320a:	e01d      	b.n	8003248 <PlayerLogic+0x204>
                GameObject_SetPos(o, curx, blocks[i].y + blocks[i].h);
 800320c:	4a6e      	ldr	r2, [pc, #440]	@ (80033c8 <PlayerLogic+0x384>)
 800320e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	18d3      	adds	r3, r2, r3
 8003214:	3304      	adds	r3, #4
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	496b      	ldr	r1, [pc, #428]	@ (80033c8 <PlayerLogic+0x384>)
 800321a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	18cb      	adds	r3, r1, r3
 8003220:	330c      	adds	r3, #12
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	18d2      	adds	r2, r2, r3
 8003226:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	0018      	movs	r0, r3
 800322c:	f7fd fcc0 	bl	8000bb0 <GameObject_SetPos>
                player_vy = 0;
 8003230:	4b64      	ldr	r3, [pc, #400]	@ (80033c4 <PlayerLogic+0x380>)
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]
            break;
 8003236:	e007      	b.n	8003248 <PlayerLogic+0x204>
    for(int i=0;i<block_count;i++){
 8003238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800323a:	3301      	adds	r3, #1
 800323c:	637b      	str	r3, [r7, #52]	@ 0x34
 800323e:	4b63      	ldr	r3, [pc, #396]	@ (80033cc <PlayerLogic+0x388>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003244:	429a      	cmp	r2, r3
 8003246:	dba3      	blt.n	8003190 <PlayerLogic+0x14c>
        }
    }
    if(!blockedY){
 8003248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800324a:	2b00      	cmp	r3, #0
 800324c:	d105      	bne.n	800325a <PlayerLogic+0x216>
        GameObject_SetPos(o, curx, ny);
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	0018      	movs	r0, r3
 8003256:	f7fd fcab 	bl	8000bb0 <GameObject_SetPos>
    }

    /* coins collision */
    for(int i=0;i<coin_count;i++){
 800325a:	2300      	movs	r3, #0
 800325c:	633b      	str	r3, [r7, #48]	@ 0x30
 800325e:	e034      	b.n	80032ca <PlayerLogic+0x286>
        GameObject *c = coins[i];
 8003260:	4b5b      	ldr	r3, [pc, #364]	@ (80033d0 <PlayerLogic+0x38c>)
 8003262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003264:	0092      	lsls	r2, r2, #2
 8003266:	58d3      	ldr	r3, [r2, r3]
 8003268:	60fb      	str	r3, [r7, #12]
        if(c && c->visible){
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d029      	beq.n	80032c4 <PlayerLogic+0x280>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2228      	movs	r2, #40	@ 0x28
 8003274:	5c9b      	ldrb	r3, [r3, r2]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d024      	beq.n	80032c4 <PlayerLogic+0x280>
            if(rects_overlap(o->x, o->y, PLAYER_W, PLAYER_H, c->x, c->y, 8, 8)){
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6958      	ldr	r0, [r3, #20]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6999      	ldr	r1, [r3, #24]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	695a      	ldr	r2, [r3, #20]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	2408      	movs	r4, #8
 800328c:	9403      	str	r4, [sp, #12]
 800328e:	2408      	movs	r4, #8
 8003290:	9402      	str	r4, [sp, #8]
 8003292:	9301      	str	r3, [sp, #4]
 8003294:	9200      	str	r2, [sp, #0]
 8003296:	2310      	movs	r3, #16
 8003298:	2210      	movs	r2, #16
 800329a:	f7ff fd30 	bl	8002cfe <rects_overlap>
 800329e:	1e03      	subs	r3, r0, #0
 80032a0:	d010      	beq.n	80032c4 <PlayerLogic+0x280>
                /* collect */
                c->visible = 0;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2228      	movs	r2, #40	@ 0x28
 80032a6:	2100      	movs	r1, #0
 80032a8:	5499      	strb	r1, [r3, r2]
                c->active = 0;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2229      	movs	r2, #41	@ 0x29
 80032ae:	2100      	movs	r1, #0
 80032b0:	5499      	strb	r1, [r3, r2]
                score += 10;
 80032b2:	4b48      	ldr	r3, [pc, #288]	@ (80033d4 <PlayerLogic+0x390>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	330a      	adds	r3, #10
 80032b8:	001a      	movs	r2, r3
 80032ba:	4b46      	ldr	r3, [pc, #280]	@ (80033d4 <PlayerLogic+0x390>)
 80032bc:	601a      	str	r2, [r3, #0]
                score_dirty = 1;
 80032be:	4b46      	ldr	r3, [pc, #280]	@ (80033d8 <PlayerLogic+0x394>)
 80032c0:	2201      	movs	r2, #1
 80032c2:	601a      	str	r2, [r3, #0]
    for(int i=0;i<coin_count;i++){
 80032c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c6:	3301      	adds	r3, #1
 80032c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80032ca:	4b44      	ldr	r3, [pc, #272]	@ (80033dc <PlayerLogic+0x398>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032d0:	429a      	cmp	r2, r3
 80032d2:	dbc5      	blt.n	8003260 <PlayerLogic+0x21c>
            }
        }
    }

    /* enemy collisions */
    for(int i=0;i<MAX_ENEMIES;i++){
 80032d4:	2300      	movs	r3, #0
 80032d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032d8:	e05b      	b.n	8003392 <PlayerLogic+0x34e>
        if(enemies[i].o){
 80032da:	4b41      	ldr	r3, [pc, #260]	@ (80033e0 <PlayerLogic+0x39c>)
 80032dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032de:	00d2      	lsls	r2, r2, #3
 80032e0:	58d3      	ldr	r3, [r2, r3]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d052      	beq.n	800338c <PlayerLogic+0x348>
            GameObject *e = enemies[i].o;
 80032e6:	4b3e      	ldr	r3, [pc, #248]	@ (80033e0 <PlayerLogic+0x39c>)
 80032e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032ea:	00d2      	lsls	r2, r2, #3
 80032ec:	58d3      	ldr	r3, [r2, r3]
 80032ee:	613b      	str	r3, [r7, #16]
            if(rects_overlap(o->x, o->y, PLAYER_W, PLAYER_H, e->x, e->y, GOOMBA_W, GOOMBA_H)){
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6958      	ldr	r0, [r3, #20]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6999      	ldr	r1, [r3, #24]
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	695a      	ldr	r2, [r3, #20]
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	240c      	movs	r4, #12
 8003302:	9403      	str	r4, [sp, #12]
 8003304:	2410      	movs	r4, #16
 8003306:	9402      	str	r4, [sp, #8]
 8003308:	9301      	str	r3, [sp, #4]
 800330a:	9200      	str	r2, [sp, #0]
 800330c:	2310      	movs	r3, #16
 800330e:	2210      	movs	r2, #16
 8003310:	f7ff fcf5 	bl	8002cfe <rects_overlap>
 8003314:	1e03      	subs	r3, r0, #0
 8003316:	d039      	beq.n	800338c <PlayerLogic+0x348>
                /* if falling onto enemy -> stomp */
                if(player_vy > 0 && (o->y + PLAYER_H - e->y) < 12){
 8003318:	4b2a      	ldr	r3, [pc, #168]	@ (80033c4 <PlayerLogic+0x380>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	dd23      	ble.n	8003368 <PlayerLogic+0x324>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	3310      	adds	r3, #16
 8003326:	001a      	movs	r2, r3
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b0b      	cmp	r3, #11
 8003330:	dc1a      	bgt.n	8003368 <PlayerLogic+0x324>
                    /* remove enemy */
                    e->visible = 0; e->active = 0;
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	2228      	movs	r2, #40	@ 0x28
 8003336:	2100      	movs	r1, #0
 8003338:	5499      	strb	r1, [r3, r2]
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	2229      	movs	r2, #41	@ 0x29
 800333e:	2100      	movs	r1, #0
 8003340:	5499      	strb	r1, [r3, r2]
                    enemies[i].o = NULL; /* free slot */
 8003342:	4b27      	ldr	r3, [pc, #156]	@ (80033e0 <PlayerLogic+0x39c>)
 8003344:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003346:	00d2      	lsls	r2, r2, #3
 8003348:	2100      	movs	r1, #0
 800334a:	50d1      	str	r1, [r2, r3]
                    player_vy = JUMP_V/2;
 800334c:	4b1d      	ldr	r3, [pc, #116]	@ (80033c4 <PlayerLogic+0x380>)
 800334e:	2207      	movs	r2, #7
 8003350:	4252      	negs	r2, r2
 8003352:	601a      	str	r2, [r3, #0]
                    score += 100;
 8003354:	4b1f      	ldr	r3, [pc, #124]	@ (80033d4 <PlayerLogic+0x390>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	3364      	adds	r3, #100	@ 0x64
 800335a:	001a      	movs	r2, r3
 800335c:	4b1d      	ldr	r3, [pc, #116]	@ (80033d4 <PlayerLogic+0x390>)
 800335e:	601a      	str	r2, [r3, #0]
                    score_dirty = 1;
 8003360:	4b1d      	ldr	r3, [pc, #116]	@ (80033d8 <PlayerLogic+0x394>)
 8003362:	2201      	movs	r2, #1
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	e011      	b.n	800338c <PlayerLogic+0x348>
                } else {
                    /* player hurt -> respawn */
                    GameObject_SetPos(o, start_x, start_y);
 8003368:	4b1e      	ldr	r3, [pc, #120]	@ (80033e4 <PlayerLogic+0x3a0>)
 800336a:	6819      	ldr	r1, [r3, #0]
 800336c:	4b1e      	ldr	r3, [pc, #120]	@ (80033e8 <PlayerLogic+0x3a4>)
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	0018      	movs	r0, r3
 8003374:	f7fd fc1c 	bl	8000bb0 <GameObject_SetPos>
                    player_vx = player_vy = 0;
 8003378:	4b12      	ldr	r3, [pc, #72]	@ (80033c4 <PlayerLogic+0x380>)
 800337a:	2200      	movs	r2, #0
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	4b11      	ldr	r3, [pc, #68]	@ (80033c4 <PlayerLogic+0x380>)
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	4b0e      	ldr	r3, [pc, #56]	@ (80033bc <PlayerLogic+0x378>)
 8003384:	601a      	str	r2, [r3, #0]
                    player_on_ground = 0;
 8003386:	4b0e      	ldr	r3, [pc, #56]	@ (80033c0 <PlayerLogic+0x37c>)
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
    for(int i=0;i<MAX_ENEMIES;i++){
 800338c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800338e:	3301      	adds	r3, #1
 8003390:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003394:	2b07      	cmp	r3, #7
 8003396:	dda0      	ble.n	80032da <PlayerLogic+0x296>
            }
        }
    }

    /* animation control */
    if(player_vx != 0){
 8003398:	4b08      	ldr	r3, [pc, #32]	@ (80033bc <PlayerLogic+0x378>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d027      	beq.n	80033f0 <PlayerLogic+0x3ac>
        if(o->animId != anim_player_run) GameObject_PlayAnimation(o, anim_player_run);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	4b11      	ldr	r3, [pc, #68]	@ (80033ec <PlayerLogic+0x3a8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d039      	beq.n	8003420 <PlayerLogic+0x3dc>
 80033ac:	4b0f      	ldr	r3, [pc, #60]	@ (80033ec <PlayerLogic+0x3a8>)
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	0011      	movs	r1, r2
 80033b4:	0018      	movs	r0, r3
 80033b6:	f7fd fcc1 	bl	8000d3c <GameObject_PlayAnimation>
 80033ba:	e031      	b.n	8003420 <PlayerLogic+0x3dc>
 80033bc:	20002930 	.word	0x20002930
 80033c0:	20002938 	.word	0x20002938
 80033c4:	20002934 	.word	0x20002934
 80033c8:	20002984 	.word	0x20002984
 80033cc:	20002b84 	.word	0x20002b84
 80033d0:	20002b88 	.word	0x20002b88
 80033d4:	20002940 	.word	0x20002940
 80033d8:	2000002c 	.word	0x2000002c
 80033dc:	20002bc8 	.word	0x20002bc8
 80033e0:	20002944 	.word	0x20002944
 80033e4:	20000028 	.word	0x20000028
 80033e8:	2000293c 	.word	0x2000293c
 80033ec:	2000001c 	.word	0x2000001c
    } else {
        if(o->animId != -1) GameObject_PlayAnimation(o, -1);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	3301      	adds	r3, #1
 80033f6:	d006      	beq.n	8003406 <PlayerLogic+0x3c2>
 80033f8:	2301      	movs	r3, #1
 80033fa:	425a      	negs	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	0011      	movs	r1, r2
 8003400:	0018      	movs	r0, r3
 8003402:	f7fd fc9b 	bl	8000d3c <GameObject_PlayAnimation>
        if(o->spriteId != spr_player_idle) GameObject_SetSprite(o, spr_player_idle);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	4b13      	ldr	r3, [pc, #76]	@ (8003458 <PlayerLogic+0x414>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d006      	beq.n	8003420 <PlayerLogic+0x3dc>
 8003412:	4b11      	ldr	r3, [pc, #68]	@ (8003458 <PlayerLogic+0x414>)
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	0011      	movs	r1, r2
 800341a:	0018      	movs	r0, r3
 800341c:	f7fd fb02 	bl	8000a24 <GameObject_SetSprite>
    }

    /* fall off world -> respawn */
    if(o->y > ILI9341_SCREEN_HEIGHT + 64){
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699a      	ldr	r2, [r3, #24]
 8003424:	2398      	movs	r3, #152	@ 0x98
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	429a      	cmp	r2, r3
 800342a:	dd11      	ble.n	8003450 <PlayerLogic+0x40c>
        GameObject_SetPos(o, start_x, start_y);
 800342c:	4b0b      	ldr	r3, [pc, #44]	@ (800345c <PlayerLogic+0x418>)
 800342e:	6819      	ldr	r1, [r3, #0]
 8003430:	4b0b      	ldr	r3, [pc, #44]	@ (8003460 <PlayerLogic+0x41c>)
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	0018      	movs	r0, r3
 8003438:	f7fd fbba 	bl	8000bb0 <GameObject_SetPos>
        player_vx = player_vy = 0;
 800343c:	4b09      	ldr	r3, [pc, #36]	@ (8003464 <PlayerLogic+0x420>)
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	4b08      	ldr	r3, [pc, #32]	@ (8003464 <PlayerLogic+0x420>)
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	4b08      	ldr	r3, [pc, #32]	@ (8003468 <PlayerLogic+0x424>)
 8003448:	601a      	str	r2, [r3, #0]
        player_on_ground = 0;
 800344a:	4b08      	ldr	r3, [pc, #32]	@ (800346c <PlayerLogic+0x428>)
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
    }
}
 8003450:	46c0      	nop			@ (mov r8, r8)
 8003452:	46bd      	mov	sp, r7
 8003454:	b012      	add	sp, #72	@ 0x48
 8003456:	bdb0      	pop	{r4, r5, r7, pc}
 8003458:	20000010 	.word	0x20000010
 800345c:	20000028 	.word	0x20000028
 8003460:	2000293c 	.word	0x2000293c
 8003464:	20002934 	.word	0x20002934
 8003468:	20002930 	.word	0x20002930
 800346c:	20002938 	.word	0x20002938

08003470 <CreateLevel_World1_1>:

/* Level builder */
static void CreateLevel_World1_1(void){
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af02      	add	r7, sp, #8
    block_count = 0;
 8003476:	4b63      	ldr	r3, [pc, #396]	@ (8003604 <CreateLevel_World1_1+0x194>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
    score = 0;
 800347c:	4b62      	ldr	r3, [pc, #392]	@ (8003608 <CreateLevel_World1_1+0x198>)
 800347e:	2200      	movs	r2, #0
 8003480:	601a      	str	r2, [r3, #0]
    coin_count = 0;
 8003482:	4b62      	ldr	r3, [pc, #392]	@ (800360c <CreateLevel_World1_1+0x19c>)
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]

    int ground_y = ILI9341_SCREEN_HEIGHT - 16;
 8003488:	23e0      	movs	r3, #224	@ 0xe0
 800348a:	60fb      	str	r3, [r7, #12]
    AddBlock(0, ground_y, ILI9341_SCREEN_WIDTH, 16, RGB565(100,50,10));
 800348c:	23a0      	movs	r3, #160	@ 0xa0
 800348e:	005a      	lsls	r2, r3, #1
 8003490:	68f9      	ldr	r1, [r7, #12]
 8003492:	4b5f      	ldr	r3, [pc, #380]	@ (8003610 <CreateLevel_World1_1+0x1a0>)
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	2310      	movs	r3, #16
 8003498:	2000      	movs	r0, #0
 800349a:	f7ff fc71 	bl	8002d80 <AddBlock>

    AddBlock(60, ground_y - 32, 32, 16, RGB565(180,180,50));
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	3b20      	subs	r3, #32
 80034a2:	0019      	movs	r1, r3
 80034a4:	4b5b      	ldr	r3, [pc, #364]	@ (8003614 <CreateLevel_World1_1+0x1a4>)
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	2310      	movs	r3, #16
 80034aa:	2220      	movs	r2, #32
 80034ac:	203c      	movs	r0, #60	@ 0x3c
 80034ae:	f7ff fc67 	bl	8002d80 <AddBlock>
    AddBlock(110, ground_y - 64, 32, 16, RGB565(180,180,50));
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	3b40      	subs	r3, #64	@ 0x40
 80034b6:	0019      	movs	r1, r3
 80034b8:	4b56      	ldr	r3, [pc, #344]	@ (8003614 <CreateLevel_World1_1+0x1a4>)
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	2310      	movs	r3, #16
 80034be:	2220      	movs	r2, #32
 80034c0:	206e      	movs	r0, #110	@ 0x6e
 80034c2:	f7ff fc5d 	bl	8002d80 <AddBlock>
    AddBlock(180, ground_y - 48, 48, 16, RGB565(180,180,50));
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	3b30      	subs	r3, #48	@ 0x30
 80034ca:	0019      	movs	r1, r3
 80034cc:	4b51      	ldr	r3, [pc, #324]	@ (8003614 <CreateLevel_World1_1+0x1a4>)
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	2310      	movs	r3, #16
 80034d2:	2230      	movs	r2, #48	@ 0x30
 80034d4:	20b4      	movs	r0, #180	@ 0xb4
 80034d6:	f7ff fc53 	bl	8002d80 <AddBlock>

    AddBlock(260, ground_y - 16, 16, 16, RGB565(100,200,100));
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	3b10      	subs	r3, #16
 80034de:	0019      	movs	r1, r3
 80034e0:	2382      	movs	r3, #130	@ 0x82
 80034e2:	0058      	lsls	r0, r3, #1
 80034e4:	4b4c      	ldr	r3, [pc, #304]	@ (8003618 <CreateLevel_World1_1+0x1a8>)
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	2310      	movs	r3, #16
 80034ea:	2210      	movs	r2, #16
 80034ec:	f7ff fc48 	bl	8002d80 <AddBlock>
    AddBlock(260, ground_y - 32, 16, 16, RGB565(100,200,100));
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	3b20      	subs	r3, #32
 80034f4:	0019      	movs	r1, r3
 80034f6:	2382      	movs	r3, #130	@ 0x82
 80034f8:	0058      	lsls	r0, r3, #1
 80034fa:	4b47      	ldr	r3, [pc, #284]	@ (8003618 <CreateLevel_World1_1+0x1a8>)
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	2310      	movs	r3, #16
 8003500:	2210      	movs	r2, #16
 8003502:	f7ff fc3d 	bl	8002d80 <AddBlock>
    AddBlock(260, ground_y - 48, 16, 16, RGB565(100,200,100));
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	3b30      	subs	r3, #48	@ 0x30
 800350a:	0019      	movs	r1, r3
 800350c:	2382      	movs	r3, #130	@ 0x82
 800350e:	0058      	lsls	r0, r3, #1
 8003510:	4b41      	ldr	r3, [pc, #260]	@ (8003618 <CreateLevel_World1_1+0x1a8>)
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	2310      	movs	r3, #16
 8003516:	2210      	movs	r2, #16
 8003518:	f7ff fc32 	bl	8002d80 <AddBlock>

    AddBlock(ILI9341_SCREEN_WIDTH - 40, ground_y - 32, 40, 32, RGB565(40,160,40));
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	3b20      	subs	r3, #32
 8003520:	0019      	movs	r1, r3
 8003522:	238c      	movs	r3, #140	@ 0x8c
 8003524:	0058      	lsls	r0, r3, #1
 8003526:	4b3d      	ldr	r3, [pc, #244]	@ (800361c <CreateLevel_World1_1+0x1ac>)
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	2320      	movs	r3, #32
 800352c:	2228      	movs	r2, #40	@ 0x28
 800352e:	f7ff fc27 	bl	8002d80 <AddBlock>

    /* spawn goombas */
    SpawnGoomba(120, ground_y - GOOMBA_H, -1);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	3b0c      	subs	r3, #12
 8003536:	2201      	movs	r2, #1
 8003538:	4252      	negs	r2, r2
 800353a:	0019      	movs	r1, r3
 800353c:	2078      	movs	r0, #120	@ 0x78
 800353e:	f7ff fc77 	bl	8002e30 <SpawnGoomba>
    SpawnGoomba(200, ground_y - GOOMBA_H, 1);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	3b0c      	subs	r3, #12
 8003546:	2201      	movs	r2, #1
 8003548:	0019      	movs	r1, r3
 800354a:	20c8      	movs	r0, #200	@ 0xc8
 800354c:	f7ff fc70 	bl	8002e30 <SpawnGoomba>

    /* coins */
    spr_coin = CreateSolid(8,8, RGB565(255,200,0));
 8003550:	4b33      	ldr	r3, [pc, #204]	@ (8003620 <CreateLevel_World1_1+0x1b0>)
 8003552:	001a      	movs	r2, r3
 8003554:	2108      	movs	r1, #8
 8003556:	2008      	movs	r0, #8
 8003558:	f7ff fbfd 	bl	8002d56 <CreateSolid>
 800355c:	0002      	movs	r2, r0
 800355e:	4b31      	ldr	r3, [pc, #196]	@ (8003624 <CreateLevel_World1_1+0x1b4>)
 8003560:	601a      	str	r2, [r3, #0]
    GameObject *c1 = GameObject_Spawn(spr_coin, 65, ground_y - 32 - 12);
 8003562:	4b30      	ldr	r3, [pc, #192]	@ (8003624 <CreateLevel_World1_1+0x1b4>)
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	3b2c      	subs	r3, #44	@ 0x2c
 800356a:	001a      	movs	r2, r3
 800356c:	2141      	movs	r1, #65	@ 0x41
 800356e:	f7fd f98d 	bl	800088c <GameObject_Spawn>
 8003572:	0003      	movs	r3, r0
 8003574:	60bb      	str	r3, [r7, #8]
    if(c1){ c1->visible = 1; c1->active = 0; c1->z = 2; if(coin_count < MAX_COINS) coins[coin_count++] = c1; }
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d018      	beq.n	80035ae <CreateLevel_World1_1+0x13e>
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2228      	movs	r2, #40	@ 0x28
 8003580:	2101      	movs	r1, #1
 8003582:	5499      	strb	r1, [r3, r2]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2229      	movs	r2, #41	@ 0x29
 8003588:	2100      	movs	r1, #0
 800358a:	5499      	strb	r1, [r3, r2]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2230      	movs	r2, #48	@ 0x30
 8003590:	2102      	movs	r1, #2
 8003592:	5499      	strb	r1, [r3, r2]
 8003594:	4b1d      	ldr	r3, [pc, #116]	@ (800360c <CreateLevel_World1_1+0x19c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2b0f      	cmp	r3, #15
 800359a:	dc08      	bgt.n	80035ae <CreateLevel_World1_1+0x13e>
 800359c:	4b1b      	ldr	r3, [pc, #108]	@ (800360c <CreateLevel_World1_1+0x19c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	1c59      	adds	r1, r3, #1
 80035a2:	4a1a      	ldr	r2, [pc, #104]	@ (800360c <CreateLevel_World1_1+0x19c>)
 80035a4:	6011      	str	r1, [r2, #0]
 80035a6:	4a20      	ldr	r2, [pc, #128]	@ (8003628 <CreateLevel_World1_1+0x1b8>)
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	68b9      	ldr	r1, [r7, #8]
 80035ac:	5099      	str	r1, [r3, r2]
    GameObject *c2 = GameObject_Spawn(spr_coin, 115, ground_y - 64 - 12);
 80035ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003624 <CreateLevel_World1_1+0x1b4>)
 80035b0:	6818      	ldr	r0, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	3b4c      	subs	r3, #76	@ 0x4c
 80035b6:	001a      	movs	r2, r3
 80035b8:	2173      	movs	r1, #115	@ 0x73
 80035ba:	f7fd f967 	bl	800088c <GameObject_Spawn>
 80035be:	0003      	movs	r3, r0
 80035c0:	607b      	str	r3, [r7, #4]
    if(c2){ c2->visible = 1; c2->active = 0; c2->z = 2; if(coin_count < MAX_COINS) coins[coin_count++] = c2; }
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d018      	beq.n	80035fa <CreateLevel_World1_1+0x18a>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2228      	movs	r2, #40	@ 0x28
 80035cc:	2101      	movs	r1, #1
 80035ce:	5499      	strb	r1, [r3, r2]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2229      	movs	r2, #41	@ 0x29
 80035d4:	2100      	movs	r1, #0
 80035d6:	5499      	strb	r1, [r3, r2]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2230      	movs	r2, #48	@ 0x30
 80035dc:	2102      	movs	r1, #2
 80035de:	5499      	strb	r1, [r3, r2]
 80035e0:	4b0a      	ldr	r3, [pc, #40]	@ (800360c <CreateLevel_World1_1+0x19c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b0f      	cmp	r3, #15
 80035e6:	dc08      	bgt.n	80035fa <CreateLevel_World1_1+0x18a>
 80035e8:	4b08      	ldr	r3, [pc, #32]	@ (800360c <CreateLevel_World1_1+0x19c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	1c59      	adds	r1, r3, #1
 80035ee:	4a07      	ldr	r2, [pc, #28]	@ (800360c <CreateLevel_World1_1+0x19c>)
 80035f0:	6011      	str	r1, [r2, #0]
 80035f2:	4a0d      	ldr	r2, [pc, #52]	@ (8003628 <CreateLevel_World1_1+0x1b8>)
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	5099      	str	r1, [r3, r2]
}
 80035fa:	46c0      	nop			@ (mov r8, r8)
 80035fc:	46bd      	mov	sp, r7
 80035fe:	b004      	add	sp, #16
 8003600:	bd80      	pop	{r7, pc}
 8003602:	46c0      	nop			@ (mov r8, r8)
 8003604:	20002b84 	.word	0x20002b84
 8003608:	20002940 	.word	0x20002940
 800360c:	20002bc8 	.word	0x20002bc8
 8003610:	00006181 	.word	0x00006181
 8003614:	0000b5a6 	.word	0x0000b5a6
 8003618:	0000664c 	.word	0x0000664c
 800361c:	00002d05 	.word	0x00002d05
 8003620:	0000fe40 	.word	0x0000fe40
 8003624:	20000024 	.word	0x20000024
 8003628:	20002b88 	.word	0x20002b88

0800362c <DrawHUD>:

/* HUD update (draw small text) - called when score_dirty */
static void DrawHUD(void){
 800362c:	b580      	push	{r7, lr}
 800362e:	b08a      	sub	sp, #40	@ 0x28
 8003630:	af02      	add	r7, sp, #8
    char buf[32];
    sprintf(buf, "SCORE: %04d", score);
 8003632:	4b10      	ldr	r3, [pc, #64]	@ (8003674 <DrawHUD+0x48>)
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	4910      	ldr	r1, [pc, #64]	@ (8003678 <DrawHUD+0x4c>)
 8003638:	003b      	movs	r3, r7
 800363a:	0018      	movs	r0, r3
 800363c:	f003 f91e 	bl	800687c <siprintf>
    /* draw over small fixed area top-left (background fill + text) */
    ILI9341_DrawFilledRectangleCoord(0, 0, 120, 24, RGB565(70,170,255));
 8003640:	4b0e      	ldr	r3, [pc, #56]	@ (800367c <DrawHUD+0x50>)
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	2318      	movs	r3, #24
 8003646:	2278      	movs	r2, #120	@ 0x78
 8003648:	2100      	movs	r1, #0
 800364a:	2000      	movs	r0, #0
 800364c:	f7fe fa23 	bl	8001a96 <ILI9341_DrawFilledRectangleCoord>
    ILI9341_DrawText(buf, FONT3, 4, 4, WHITE, RGB565(70,170,255));
 8003650:	490b      	ldr	r1, [pc, #44]	@ (8003680 <DrawHUD+0x54>)
 8003652:	0038      	movs	r0, r7
 8003654:	4b09      	ldr	r3, [pc, #36]	@ (800367c <DrawHUD+0x50>)
 8003656:	9301      	str	r3, [sp, #4]
 8003658:	4b0a      	ldr	r3, [pc, #40]	@ (8003684 <DrawHUD+0x58>)
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	2304      	movs	r3, #4
 800365e:	2204      	movs	r2, #4
 8003660:	f7fe fb5d 	bl	8001d1e <ILI9341_DrawText>
    score_dirty = 0;
 8003664:	4b08      	ldr	r3, [pc, #32]	@ (8003688 <DrawHUD+0x5c>)
 8003666:	2200      	movs	r2, #0
 8003668:	601a      	str	r2, [r3, #0]
}
 800366a:	46c0      	nop			@ (mov r8, r8)
 800366c:	46bd      	mov	sp, r7
 800366e:	b008      	add	sp, #32
 8003670:	bd80      	pop	{r7, pc}
 8003672:	46c0      	nop			@ (mov r8, r8)
 8003674:	20002940 	.word	0x20002940
 8003678:	080071cc 	.word	0x080071cc
 800367c:	0000455f 	.word	0x0000455f
 8003680:	080071d8 	.word	0x080071d8
 8003684:	0000ffff 	.word	0x0000ffff
 8003688:	2000002c 	.word	0x2000002c

0800368c <Start>:

/* Engine callbacks */
void Start(void){
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
    /* background */
    Render_SetBackgroundColor(RGB565(70,170,255));
 8003692:	4b60      	ldr	r3, [pc, #384]	@ (8003814 <Start+0x188>)
 8003694:	0018      	movs	r0, r3
 8003696:	f7fd fe71 	bl	800137c <Render_SetBackgroundColor>
    GameObject_SetBackgroundColor(RGB565(70,170,255));
 800369a:	4b5e      	ldr	r3, [pc, #376]	@ (8003814 <Start+0x188>)
 800369c:	0018      	movs	r0, r3
 800369e:	f7fd f835 	bl	800070c <GameObject_SetBackgroundColor>
    Render_ClearScreen();
 80036a2:	f7fd fe7b 	bl	800139c <Render_ClearScreen>

    /* create player sprites & animation */
    spr_player_idle = CreateSolid(PLAYER_W, PLAYER_H, RGB565(255, 48, 48));
 80036a6:	4b5c      	ldr	r3, [pc, #368]	@ (8003818 <Start+0x18c>)
 80036a8:	001a      	movs	r2, r3
 80036aa:	2110      	movs	r1, #16
 80036ac:	2010      	movs	r0, #16
 80036ae:	f7ff fb52 	bl	8002d56 <CreateSolid>
 80036b2:	0002      	movs	r2, r0
 80036b4:	4b59      	ldr	r3, [pc, #356]	@ (800381c <Start+0x190>)
 80036b6:	601a      	str	r2, [r3, #0]
    spr_player_run_a = CreateSolid(PLAYER_W, PLAYER_H, RGB565(255, 128, 48));
 80036b8:	4b59      	ldr	r3, [pc, #356]	@ (8003820 <Start+0x194>)
 80036ba:	001a      	movs	r2, r3
 80036bc:	2110      	movs	r1, #16
 80036be:	2010      	movs	r0, #16
 80036c0:	f7ff fb49 	bl	8002d56 <CreateSolid>
 80036c4:	0002      	movs	r2, r0
 80036c6:	4b57      	ldr	r3, [pc, #348]	@ (8003824 <Start+0x198>)
 80036c8:	601a      	str	r2, [r3, #0]
    spr_player_run_b = CreateSolid(PLAYER_W, PLAYER_H, RGB565(255, 200, 48));
 80036ca:	4b57      	ldr	r3, [pc, #348]	@ (8003828 <Start+0x19c>)
 80036cc:	001a      	movs	r2, r3
 80036ce:	2110      	movs	r1, #16
 80036d0:	2010      	movs	r0, #16
 80036d2:	f7ff fb40 	bl	8002d56 <CreateSolid>
 80036d6:	0002      	movs	r2, r0
 80036d8:	4b54      	ldr	r3, [pc, #336]	@ (800382c <Start+0x1a0>)
 80036da:	601a      	str	r2, [r3, #0]
    static AnimFrame f[2];
    f[0].spriteId = spr_player_run_a; f[0].duration = 120;
 80036dc:	4b51      	ldr	r3, [pc, #324]	@ (8003824 <Start+0x198>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	4b53      	ldr	r3, [pc, #332]	@ (8003830 <Start+0x1a4>)
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	4b52      	ldr	r3, [pc, #328]	@ (8003830 <Start+0x1a4>)
 80036e6:	2278      	movs	r2, #120	@ 0x78
 80036e8:	605a      	str	r2, [r3, #4]
    f[1].spriteId = spr_player_run_b; f[1].duration = 120;
 80036ea:	4b50      	ldr	r3, [pc, #320]	@ (800382c <Start+0x1a0>)
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	4b50      	ldr	r3, [pc, #320]	@ (8003830 <Start+0x1a4>)
 80036f0:	609a      	str	r2, [r3, #8]
 80036f2:	4b4f      	ldr	r3, [pc, #316]	@ (8003830 <Start+0x1a4>)
 80036f4:	2278      	movs	r2, #120	@ 0x78
 80036f6:	60da      	str	r2, [r3, #12]
    anim_player_run = GameObject_CreateAnimation(f, 2);
 80036f8:	4b4d      	ldr	r3, [pc, #308]	@ (8003830 <Start+0x1a4>)
 80036fa:	2102      	movs	r1, #2
 80036fc:	0018      	movs	r0, r3
 80036fe:	f7fd f89b 	bl	8000838 <GameObject_CreateAnimation>
 8003702:	0002      	movs	r2, r0
 8003704:	4b4b      	ldr	r3, [pc, #300]	@ (8003834 <Start+0x1a8>)
 8003706:	601a      	str	r2, [r3, #0]

    spr_goomba = CreateSolid(GOOMBA_W, GOOMBA_H, RGB565(160,90,30));
 8003708:	4b4b      	ldr	r3, [pc, #300]	@ (8003838 <Start+0x1ac>)
 800370a:	001a      	movs	r2, r3
 800370c:	210c      	movs	r1, #12
 800370e:	2010      	movs	r0, #16
 8003710:	f7ff fb21 	bl	8002d56 <CreateSolid>
 8003714:	0002      	movs	r2, r0
 8003716:	4b49      	ldr	r3, [pc, #292]	@ (800383c <Start+0x1b0>)
 8003718:	601a      	str	r2, [r3, #0]

    /* clear arrays */
    for(int i=0;i<MAX_ENEMIES;i++){ enemies[i].o = NULL; enemies[i].vx = 0; }
 800371a:	2300      	movs	r3, #0
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	e00e      	b.n	800373e <Start+0xb2>
 8003720:	4b47      	ldr	r3, [pc, #284]	@ (8003840 <Start+0x1b4>)
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	00d2      	lsls	r2, r2, #3
 8003726:	2100      	movs	r1, #0
 8003728:	50d1      	str	r1, [r2, r3]
 800372a:	4a45      	ldr	r2, [pc, #276]	@ (8003840 <Start+0x1b4>)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	18d3      	adds	r3, r2, r3
 8003732:	3304      	adds	r3, #4
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	3301      	adds	r3, #1
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2b07      	cmp	r3, #7
 8003742:	dded      	ble.n	8003720 <Start+0x94>
    for(int i=0;i<MAX_COINS;i++) coins[i] = NULL;
 8003744:	2300      	movs	r3, #0
 8003746:	60bb      	str	r3, [r7, #8]
 8003748:	e007      	b.n	800375a <Start+0xce>
 800374a:	4b3e      	ldr	r3, [pc, #248]	@ (8003844 <Start+0x1b8>)
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	0092      	lsls	r2, r2, #2
 8003750:	2100      	movs	r1, #0
 8003752:	50d1      	str	r1, [r2, r3]
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	3301      	adds	r3, #1
 8003758:	60bb      	str	r3, [r7, #8]
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2b0f      	cmp	r3, #15
 800375e:	ddf4      	ble.n	800374a <Start+0xbe>

    /* build level and spawn player */
    CreateLevel_World1_1();
 8003760:	f7ff fe86 	bl	8003470 <CreateLevel_World1_1>
    start_y = ILI9341_SCREEN_HEIGHT - 64;
 8003764:	4b38      	ldr	r3, [pc, #224]	@ (8003848 <Start+0x1bc>)
 8003766:	22b0      	movs	r2, #176	@ 0xb0
 8003768:	601a      	str	r2, [r3, #0]
    player = GameObject_Spawn(spr_player_idle, start_x, start_y);
 800376a:	4b2c      	ldr	r3, [pc, #176]	@ (800381c <Start+0x190>)
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	4b37      	ldr	r3, [pc, #220]	@ (800384c <Start+0x1c0>)
 8003770:	6819      	ldr	r1, [r3, #0]
 8003772:	4b35      	ldr	r3, [pc, #212]	@ (8003848 <Start+0x1bc>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	001a      	movs	r2, r3
 8003778:	f7fd f888 	bl	800088c <GameObject_Spawn>
 800377c:	0002      	movs	r2, r0
 800377e:	4b34      	ldr	r3, [pc, #208]	@ (8003850 <Start+0x1c4>)
 8003780:	601a      	str	r2, [r3, #0]
    if(player){
 8003782:	4b33      	ldr	r3, [pc, #204]	@ (8003850 <Start+0x1c4>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d01f      	beq.n	80037ca <Start+0x13e>
        player->visible = 1; player->active = 1; player->z = 5;
 800378a:	4b31      	ldr	r3, [pc, #196]	@ (8003850 <Start+0x1c4>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2228      	movs	r2, #40	@ 0x28
 8003790:	2101      	movs	r1, #1
 8003792:	5499      	strb	r1, [r3, r2]
 8003794:	4b2e      	ldr	r3, [pc, #184]	@ (8003850 <Start+0x1c4>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2229      	movs	r2, #41	@ 0x29
 800379a:	2101      	movs	r1, #1
 800379c:	5499      	strb	r1, [r3, r2]
 800379e:	4b2c      	ldr	r3, [pc, #176]	@ (8003850 <Start+0x1c4>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2230      	movs	r2, #48	@ 0x30
 80037a4:	2105      	movs	r1, #5
 80037a6:	5499      	strb	r1, [r3, r2]
        GameObject_EnableLogic(player, PlayerLogic);
 80037a8:	4b29      	ldr	r3, [pc, #164]	@ (8003850 <Start+0x1c4>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a29      	ldr	r2, [pc, #164]	@ (8003854 <Start+0x1c8>)
 80037ae:	0011      	movs	r1, r2
 80037b0:	0018      	movs	r0, r3
 80037b2:	f7fd fafd 	bl	8000db0 <GameObject_EnableLogic>
        player_vx = player_vy = 0; player_on_ground = 0;
 80037b6:	4b28      	ldr	r3, [pc, #160]	@ (8003858 <Start+0x1cc>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	4b26      	ldr	r3, [pc, #152]	@ (8003858 <Start+0x1cc>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	4b26      	ldr	r3, [pc, #152]	@ (800385c <Start+0x1d0>)
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	4b26      	ldr	r3, [pc, #152]	@ (8003860 <Start+0x1d4>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]
    }

    /* enable goomba logic for spawned enemies */
    for(int i=0;i<MAX_ENEMIES;i++){
 80037ca:	2300      	movs	r3, #0
 80037cc:	607b      	str	r3, [r7, #4]
 80037ce:	e011      	b.n	80037f4 <Start+0x168>
        if(enemies[i].o){
 80037d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003840 <Start+0x1b4>)
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	00d2      	lsls	r2, r2, #3
 80037d6:	58d3      	ldr	r3, [r2, r3]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d008      	beq.n	80037ee <Start+0x162>
            GameObject_EnableLogic(enemies[i].o, GoombaLogic);
 80037dc:	4b18      	ldr	r3, [pc, #96]	@ (8003840 <Start+0x1b4>)
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	00d2      	lsls	r2, r2, #3
 80037e2:	58d3      	ldr	r3, [r2, r3]
 80037e4:	4a1f      	ldr	r2, [pc, #124]	@ (8003864 <Start+0x1d8>)
 80037e6:	0011      	movs	r1, r2
 80037e8:	0018      	movs	r0, r3
 80037ea:	f7fd fae1 	bl	8000db0 <GameObject_EnableLogic>
    for(int i=0;i<MAX_ENEMIES;i++){
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3301      	adds	r3, #1
 80037f2:	607b      	str	r3, [r7, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b07      	cmp	r3, #7
 80037f8:	ddea      	ble.n	80037d0 <Start+0x144>
        }
    }

    score = 0;
 80037fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003868 <Start+0x1dc>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]
    score_dirty = 1;
 8003800:	4b1a      	ldr	r3, [pc, #104]	@ (800386c <Start+0x1e0>)
 8003802:	2201      	movs	r2, #1
 8003804:	601a      	str	r2, [r3, #0]
    DrawHUD();
 8003806:	f7ff ff11 	bl	800362c <DrawHUD>
}
 800380a:	46c0      	nop			@ (mov r8, r8)
 800380c:	46bd      	mov	sp, r7
 800380e:	b004      	add	sp, #16
 8003810:	bd80      	pop	{r7, pc}
 8003812:	46c0      	nop			@ (mov r8, r8)
 8003814:	0000455f 	.word	0x0000455f
 8003818:	0000f986 	.word	0x0000f986
 800381c:	20000010 	.word	0x20000010
 8003820:	0000fc06 	.word	0x0000fc06
 8003824:	20000014 	.word	0x20000014
 8003828:	0000fe46 	.word	0x0000fe46
 800382c:	20000018 	.word	0x20000018
 8003830:	20002bcc 	.word	0x20002bcc
 8003834:	2000001c 	.word	0x2000001c
 8003838:	0000a2c3 	.word	0x0000a2c3
 800383c:	20000020 	.word	0x20000020
 8003840:	20002944 	.word	0x20002944
 8003844:	20002b88 	.word	0x20002b88
 8003848:	2000293c 	.word	0x2000293c
 800384c:	20000028 	.word	0x20000028
 8003850:	2000292c 	.word	0x2000292c
 8003854:	08003045 	.word	0x08003045
 8003858:	20002934 	.word	0x20002934
 800385c:	20002930 	.word	0x20002930
 8003860:	20002938 	.word	0x20002938
 8003864:	08002ecd 	.word	0x08002ecd
 8003868:	20002940 	.word	0x20002940
 800386c:	2000002c 	.word	0x2000002c

08003870 <Update>:

void Update(void){
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
    /* nothing heavy here - keep light */
    /* OPTIONAL: spawn new enemies or handle timers */
}
 8003874:	46c0      	nop			@ (mov r8, r8)
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <Render>:

void Render(void){
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
    /* Keep this function cheap. We only update HUD when needed. */
    if(score_dirty) DrawHUD();
 8003880:	4b04      	ldr	r3, [pc, #16]	@ (8003894 <Render+0x18>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <Render+0x10>
 8003888:	f7ff fed0 	bl	800362c <DrawHUD>
}
 800388c:	46c0      	nop			@ (mov r8, r8)
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	46c0      	nop			@ (mov r8, r8)
 8003894:	2000002c 	.word	0x2000002c

08003898 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003898:	480d      	ldr	r0, [pc, #52]	@ (80038d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800389a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800389c:	f7ff fa2a 	bl	8002cf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038a0:	480c      	ldr	r0, [pc, #48]	@ (80038d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80038a2:	490d      	ldr	r1, [pc, #52]	@ (80038d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80038a4:	4a0d      	ldr	r2, [pc, #52]	@ (80038dc <LoopForever+0xe>)
  movs r3, #0
 80038a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038a8:	e002      	b.n	80038b0 <LoopCopyDataInit>

080038aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038ae:	3304      	adds	r3, #4

080038b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038b4:	d3f9      	bcc.n	80038aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038b6:	4a0a      	ldr	r2, [pc, #40]	@ (80038e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80038b8:	4c0a      	ldr	r4, [pc, #40]	@ (80038e4 <LoopForever+0x16>)
  movs r3, #0
 80038ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038bc:	e001      	b.n	80038c2 <LoopFillZerobss>

080038be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038c0:	3204      	adds	r2, #4

080038c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038c4:	d3fb      	bcc.n	80038be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80038c6:	f003 f809 	bl	80068dc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80038ca:	f7fe fef3 	bl	80026b4 <main>

080038ce <LoopForever>:

LoopForever:
  b LoopForever
 80038ce:	e7fe      	b.n	80038ce <LoopForever>
  ldr   r0, =_estack
 80038d0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80038d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038d8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80038dc:	08007c08 	.word	0x08007c08
  ldr r2, =_sbss
 80038e0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80038e4:	20002d28 	.word	0x20002d28

080038e8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038e8:	e7fe      	b.n	80038e8 <ADC1_COMP_IRQHandler>
	...

080038ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80038f2:	1dfb      	adds	r3, r7, #7
 80038f4:	2200      	movs	r2, #0
 80038f6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003928 <HAL_Init+0x3c>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003928 <HAL_Init+0x3c>)
 80038fe:	2180      	movs	r1, #128	@ 0x80
 8003900:	0049      	lsls	r1, r1, #1
 8003902:	430a      	orrs	r2, r1
 8003904:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003906:	2000      	movs	r0, #0
 8003908:	f000 f810 	bl	800392c <HAL_InitTick>
 800390c:	1e03      	subs	r3, r0, #0
 800390e:	d003      	beq.n	8003918 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003910:	1dfb      	adds	r3, r7, #7
 8003912:	2201      	movs	r2, #1
 8003914:	701a      	strb	r2, [r3, #0]
 8003916:	e001      	b.n	800391c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003918:	f7ff f894 	bl	8002a44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800391c:	1dfb      	adds	r3, r7, #7
 800391e:	781b      	ldrb	r3, [r3, #0]
}
 8003920:	0018      	movs	r0, r3
 8003922:	46bd      	mov	sp, r7
 8003924:	b002      	add	sp, #8
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40022000 	.word	0x40022000

0800392c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800392c:	b590      	push	{r4, r7, lr}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003934:	230f      	movs	r3, #15
 8003936:	18fb      	adds	r3, r7, r3
 8003938:	2200      	movs	r2, #0
 800393a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800393c:	4b1d      	ldr	r3, [pc, #116]	@ (80039b4 <HAL_InitTick+0x88>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d02b      	beq.n	800399c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003944:	4b1c      	ldr	r3, [pc, #112]	@ (80039b8 <HAL_InitTick+0x8c>)
 8003946:	681c      	ldr	r4, [r3, #0]
 8003948:	4b1a      	ldr	r3, [pc, #104]	@ (80039b4 <HAL_InitTick+0x88>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	0019      	movs	r1, r3
 800394e:	23fa      	movs	r3, #250	@ 0xfa
 8003950:	0098      	lsls	r0, r3, #2
 8003952:	f7fc fbe1 	bl	8000118 <__udivsi3>
 8003956:	0003      	movs	r3, r0
 8003958:	0019      	movs	r1, r3
 800395a:	0020      	movs	r0, r4
 800395c:	f7fc fbdc 	bl	8000118 <__udivsi3>
 8003960:	0003      	movs	r3, r0
 8003962:	0018      	movs	r0, r3
 8003964:	f000 f93d 	bl	8003be2 <HAL_SYSTICK_Config>
 8003968:	1e03      	subs	r3, r0, #0
 800396a:	d112      	bne.n	8003992 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b03      	cmp	r3, #3
 8003970:	d80a      	bhi.n	8003988 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003972:	6879      	ldr	r1, [r7, #4]
 8003974:	2301      	movs	r3, #1
 8003976:	425b      	negs	r3, r3
 8003978:	2200      	movs	r2, #0
 800397a:	0018      	movs	r0, r3
 800397c:	f000 f90c 	bl	8003b98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003980:	4b0e      	ldr	r3, [pc, #56]	@ (80039bc <HAL_InitTick+0x90>)
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	e00d      	b.n	80039a4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003988:	230f      	movs	r3, #15
 800398a:	18fb      	adds	r3, r7, r3
 800398c:	2201      	movs	r2, #1
 800398e:	701a      	strb	r2, [r3, #0]
 8003990:	e008      	b.n	80039a4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003992:	230f      	movs	r3, #15
 8003994:	18fb      	adds	r3, r7, r3
 8003996:	2201      	movs	r2, #1
 8003998:	701a      	strb	r2, [r3, #0]
 800399a:	e003      	b.n	80039a4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800399c:	230f      	movs	r3, #15
 800399e:	18fb      	adds	r3, r7, r3
 80039a0:	2201      	movs	r2, #1
 80039a2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80039a4:	230f      	movs	r3, #15
 80039a6:	18fb      	adds	r3, r7, r3
 80039a8:	781b      	ldrb	r3, [r3, #0]
}
 80039aa:	0018      	movs	r0, r3
 80039ac:	46bd      	mov	sp, r7
 80039ae:	b005      	add	sp, #20
 80039b0:	bd90      	pop	{r4, r7, pc}
 80039b2:	46c0      	nop			@ (mov r8, r8)
 80039b4:	20000034 	.word	0x20000034
 80039b8:	2000000c 	.word	0x2000000c
 80039bc:	20000030 	.word	0x20000030

080039c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80039c4:	4b05      	ldr	r3, [pc, #20]	@ (80039dc <HAL_IncTick+0x1c>)
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	001a      	movs	r2, r3
 80039ca:	4b05      	ldr	r3, [pc, #20]	@ (80039e0 <HAL_IncTick+0x20>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	18d2      	adds	r2, r2, r3
 80039d0:	4b03      	ldr	r3, [pc, #12]	@ (80039e0 <HAL_IncTick+0x20>)
 80039d2:	601a      	str	r2, [r3, #0]
}
 80039d4:	46c0      	nop			@ (mov r8, r8)
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	46c0      	nop			@ (mov r8, r8)
 80039dc:	20000034 	.word	0x20000034
 80039e0:	20002bdc 	.word	0x20002bdc

080039e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  return uwTick;
 80039e8:	4b02      	ldr	r3, [pc, #8]	@ (80039f4 <HAL_GetTick+0x10>)
 80039ea:	681b      	ldr	r3, [r3, #0]
}
 80039ec:	0018      	movs	r0, r3
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	46c0      	nop			@ (mov r8, r8)
 80039f4:	20002bdc 	.word	0x20002bdc

080039f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a00:	f7ff fff0 	bl	80039e4 <HAL_GetTick>
 8003a04:	0003      	movs	r3, r0
 8003a06:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	d005      	beq.n	8003a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a12:	4b0a      	ldr	r3, [pc, #40]	@ (8003a3c <HAL_Delay+0x44>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	001a      	movs	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	189b      	adds	r3, r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a1e:	46c0      	nop			@ (mov r8, r8)
 8003a20:	f7ff ffe0 	bl	80039e4 <HAL_GetTick>
 8003a24:	0002      	movs	r2, r0
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d8f7      	bhi.n	8003a20 <HAL_Delay+0x28>
  {
  }
}
 8003a30:	46c0      	nop			@ (mov r8, r8)
 8003a32:	46c0      	nop			@ (mov r8, r8)
 8003a34:	46bd      	mov	sp, r7
 8003a36:	b004      	add	sp, #16
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	46c0      	nop			@ (mov r8, r8)
 8003a3c:	20000034 	.word	0x20000034

08003a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	0002      	movs	r2, r0
 8003a48:	1dfb      	adds	r3, r7, #7
 8003a4a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a4c:	1dfb      	adds	r3, r7, #7
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b7f      	cmp	r3, #127	@ 0x7f
 8003a52:	d809      	bhi.n	8003a68 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a54:	1dfb      	adds	r3, r7, #7
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	001a      	movs	r2, r3
 8003a5a:	231f      	movs	r3, #31
 8003a5c:	401a      	ands	r2, r3
 8003a5e:	4b04      	ldr	r3, [pc, #16]	@ (8003a70 <__NVIC_EnableIRQ+0x30>)
 8003a60:	2101      	movs	r1, #1
 8003a62:	4091      	lsls	r1, r2
 8003a64:	000a      	movs	r2, r1
 8003a66:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003a68:	46c0      	nop			@ (mov r8, r8)
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	b002      	add	sp, #8
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	e000e100 	.word	0xe000e100

08003a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a74:	b590      	push	{r4, r7, lr}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	0002      	movs	r2, r0
 8003a7c:	6039      	str	r1, [r7, #0]
 8003a7e:	1dfb      	adds	r3, r7, #7
 8003a80:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a82:	1dfb      	adds	r3, r7, #7
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	2b7f      	cmp	r3, #127	@ 0x7f
 8003a88:	d828      	bhi.n	8003adc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a8a:	4a2f      	ldr	r2, [pc, #188]	@ (8003b48 <__NVIC_SetPriority+0xd4>)
 8003a8c:	1dfb      	adds	r3, r7, #7
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	b25b      	sxtb	r3, r3
 8003a92:	089b      	lsrs	r3, r3, #2
 8003a94:	33c0      	adds	r3, #192	@ 0xc0
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	589b      	ldr	r3, [r3, r2]
 8003a9a:	1dfa      	adds	r2, r7, #7
 8003a9c:	7812      	ldrb	r2, [r2, #0]
 8003a9e:	0011      	movs	r1, r2
 8003aa0:	2203      	movs	r2, #3
 8003aa2:	400a      	ands	r2, r1
 8003aa4:	00d2      	lsls	r2, r2, #3
 8003aa6:	21ff      	movs	r1, #255	@ 0xff
 8003aa8:	4091      	lsls	r1, r2
 8003aaa:	000a      	movs	r2, r1
 8003aac:	43d2      	mvns	r2, r2
 8003aae:	401a      	ands	r2, r3
 8003ab0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	019b      	lsls	r3, r3, #6
 8003ab6:	22ff      	movs	r2, #255	@ 0xff
 8003ab8:	401a      	ands	r2, r3
 8003aba:	1dfb      	adds	r3, r7, #7
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	0018      	movs	r0, r3
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	4003      	ands	r3, r0
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ac8:	481f      	ldr	r0, [pc, #124]	@ (8003b48 <__NVIC_SetPriority+0xd4>)
 8003aca:	1dfb      	adds	r3, r7, #7
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	b25b      	sxtb	r3, r3
 8003ad0:	089b      	lsrs	r3, r3, #2
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	33c0      	adds	r3, #192	@ 0xc0
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003ada:	e031      	b.n	8003b40 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003adc:	4a1b      	ldr	r2, [pc, #108]	@ (8003b4c <__NVIC_SetPriority+0xd8>)
 8003ade:	1dfb      	adds	r3, r7, #7
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	0019      	movs	r1, r3
 8003ae4:	230f      	movs	r3, #15
 8003ae6:	400b      	ands	r3, r1
 8003ae8:	3b08      	subs	r3, #8
 8003aea:	089b      	lsrs	r3, r3, #2
 8003aec:	3306      	adds	r3, #6
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	18d3      	adds	r3, r2, r3
 8003af2:	3304      	adds	r3, #4
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	1dfa      	adds	r2, r7, #7
 8003af8:	7812      	ldrb	r2, [r2, #0]
 8003afa:	0011      	movs	r1, r2
 8003afc:	2203      	movs	r2, #3
 8003afe:	400a      	ands	r2, r1
 8003b00:	00d2      	lsls	r2, r2, #3
 8003b02:	21ff      	movs	r1, #255	@ 0xff
 8003b04:	4091      	lsls	r1, r2
 8003b06:	000a      	movs	r2, r1
 8003b08:	43d2      	mvns	r2, r2
 8003b0a:	401a      	ands	r2, r3
 8003b0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	019b      	lsls	r3, r3, #6
 8003b12:	22ff      	movs	r2, #255	@ 0xff
 8003b14:	401a      	ands	r2, r3
 8003b16:	1dfb      	adds	r3, r7, #7
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	4003      	ands	r3, r0
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b24:	4809      	ldr	r0, [pc, #36]	@ (8003b4c <__NVIC_SetPriority+0xd8>)
 8003b26:	1dfb      	adds	r3, r7, #7
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	001c      	movs	r4, r3
 8003b2c:	230f      	movs	r3, #15
 8003b2e:	4023      	ands	r3, r4
 8003b30:	3b08      	subs	r3, #8
 8003b32:	089b      	lsrs	r3, r3, #2
 8003b34:	430a      	orrs	r2, r1
 8003b36:	3306      	adds	r3, #6
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	18c3      	adds	r3, r0, r3
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	601a      	str	r2, [r3, #0]
}
 8003b40:	46c0      	nop			@ (mov r8, r8)
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b003      	add	sp, #12
 8003b46:	bd90      	pop	{r4, r7, pc}
 8003b48:	e000e100 	.word	0xe000e100
 8003b4c:	e000ed00 	.word	0xe000ed00

08003b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	1e5a      	subs	r2, r3, #1
 8003b5c:	2380      	movs	r3, #128	@ 0x80
 8003b5e:	045b      	lsls	r3, r3, #17
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d301      	bcc.n	8003b68 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b64:	2301      	movs	r3, #1
 8003b66:	e010      	b.n	8003b8a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b68:	4b0a      	ldr	r3, [pc, #40]	@ (8003b94 <SysTick_Config+0x44>)
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	3a01      	subs	r2, #1
 8003b6e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b70:	2301      	movs	r3, #1
 8003b72:	425b      	negs	r3, r3
 8003b74:	2103      	movs	r1, #3
 8003b76:	0018      	movs	r0, r3
 8003b78:	f7ff ff7c 	bl	8003a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b7c:	4b05      	ldr	r3, [pc, #20]	@ (8003b94 <SysTick_Config+0x44>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b82:	4b04      	ldr	r3, [pc, #16]	@ (8003b94 <SysTick_Config+0x44>)
 8003b84:	2207      	movs	r2, #7
 8003b86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b002      	add	sp, #8
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	46c0      	nop			@ (mov r8, r8)
 8003b94:	e000e010 	.word	0xe000e010

08003b98 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60b9      	str	r1, [r7, #8]
 8003ba0:	607a      	str	r2, [r7, #4]
 8003ba2:	210f      	movs	r1, #15
 8003ba4:	187b      	adds	r3, r7, r1
 8003ba6:	1c02      	adds	r2, r0, #0
 8003ba8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	187b      	adds	r3, r7, r1
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	b25b      	sxtb	r3, r3
 8003bb2:	0011      	movs	r1, r2
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	f7ff ff5d 	bl	8003a74 <__NVIC_SetPriority>
}
 8003bba:	46c0      	nop			@ (mov r8, r8)
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	b004      	add	sp, #16
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b082      	sub	sp, #8
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	0002      	movs	r2, r0
 8003bca:	1dfb      	adds	r3, r7, #7
 8003bcc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bce:	1dfb      	adds	r3, r7, #7
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	b25b      	sxtb	r3, r3
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f7ff ff33 	bl	8003a40 <__NVIC_EnableIRQ>
}
 8003bda:	46c0      	nop			@ (mov r8, r8)
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	b002      	add	sp, #8
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b082      	sub	sp, #8
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	0018      	movs	r0, r3
 8003bee:	f7ff ffaf 	bl	8003b50 <SysTick_Config>
 8003bf2:	0003      	movs	r3, r0
}
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	b002      	add	sp, #8
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e077      	b.n	8003cfe <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a3d      	ldr	r2, [pc, #244]	@ (8003d08 <HAL_DMA_Init+0x10c>)
 8003c14:	4694      	mov	ip, r2
 8003c16:	4463      	add	r3, ip
 8003c18:	2114      	movs	r1, #20
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	f7fc fa7c 	bl	8000118 <__udivsi3>
 8003c20:	0003      	movs	r3, r0
 8003c22:	009a      	lsls	r2, r3, #2
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2225      	movs	r2, #37	@ 0x25
 8003c2c:	2102      	movs	r1, #2
 8003c2e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4934      	ldr	r1, [pc, #208]	@ (8003d0c <HAL_DMA_Init+0x110>)
 8003c3c:	400a      	ands	r2, r1
 8003c3e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6819      	ldr	r1, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	431a      	orrs	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	0018      	movs	r0, r3
 8003c7a:	f000 f9c1 	bl	8004000 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	2380      	movs	r3, #128	@ 0x80
 8003c84:	01db      	lsls	r3, r3, #7
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d102      	bne.n	8003c90 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c98:	213f      	movs	r1, #63	@ 0x3f
 8003c9a:	400a      	ands	r2, r1
 8003c9c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003ca6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d011      	beq.n	8003cd4 <HAL_DMA_Init+0xd8>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	d80d      	bhi.n	8003cd4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	0018      	movs	r0, r3
 8003cbc:	f000 f9cc 	bl	8004058 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003cd0:	605a      	str	r2, [r3, #4]
 8003cd2:	e008      	b.n	8003ce6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2225      	movs	r2, #37	@ 0x25
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2224      	movs	r2, #36	@ 0x24
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	0018      	movs	r0, r3
 8003d00:	46bd      	mov	sp, r7
 8003d02:	b002      	add	sp, #8
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	46c0      	nop			@ (mov r8, r8)
 8003d08:	bffdfff8 	.word	0xbffdfff8
 8003d0c:	ffff800f 	.word	0xffff800f

08003d10 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
 8003d1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d1e:	2317      	movs	r3, #23
 8003d20:	18fb      	adds	r3, r7, r3
 8003d22:	2200      	movs	r2, #0
 8003d24:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2224      	movs	r2, #36	@ 0x24
 8003d2a:	5c9b      	ldrb	r3, [r3, r2]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d101      	bne.n	8003d34 <HAL_DMA_Start_IT+0x24>
 8003d30:	2302      	movs	r3, #2
 8003d32:	e06f      	b.n	8003e14 <HAL_DMA_Start_IT+0x104>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2224      	movs	r2, #36	@ 0x24
 8003d38:	2101      	movs	r1, #1
 8003d3a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2225      	movs	r2, #37	@ 0x25
 8003d40:	5c9b      	ldrb	r3, [r3, r2]
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d157      	bne.n	8003df8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2225      	movs	r2, #37	@ 0x25
 8003d4c:	2102      	movs	r1, #2
 8003d4e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2101      	movs	r1, #1
 8003d62:	438a      	bics	r2, r1
 8003d64:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	68b9      	ldr	r1, [r7, #8]
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 f907 	bl	8003f80 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d008      	beq.n	8003d8c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	210e      	movs	r1, #14
 8003d86:	430a      	orrs	r2, r1
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	e00f      	b.n	8003dac <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2104      	movs	r1, #4
 8003d98:	438a      	bics	r2, r1
 8003d9a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	210a      	movs	r1, #10
 8003da8:	430a      	orrs	r2, r1
 8003daa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	2380      	movs	r3, #128	@ 0x80
 8003db4:	025b      	lsls	r3, r3, #9
 8003db6:	4013      	ands	r3, r2
 8003db8:	d008      	beq.n	8003dcc <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc4:	2180      	movs	r1, #128	@ 0x80
 8003dc6:	0049      	lsls	r1, r1, #1
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d008      	beq.n	8003de6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dde:	2180      	movs	r1, #128	@ 0x80
 8003de0:	0049      	lsls	r1, r1, #1
 8003de2:	430a      	orrs	r2, r1
 8003de4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2101      	movs	r1, #1
 8003df2:	430a      	orrs	r2, r1
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	e00a      	b.n	8003e0e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2280      	movs	r2, #128	@ 0x80
 8003dfc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2224      	movs	r2, #36	@ 0x24
 8003e02:	2100      	movs	r1, #0
 8003e04:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003e06:	2317      	movs	r3, #23
 8003e08:	18fb      	adds	r3, r7, r3
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003e0e:	2317      	movs	r3, #23
 8003e10:	18fb      	adds	r3, r7, r3
 8003e12:	781b      	ldrb	r3, [r3, #0]
}
 8003e14:	0018      	movs	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	b006      	add	sp, #24
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003e24:	4b55      	ldr	r3, [pc, #340]	@ (8003f7c <HAL_DMA_IRQHandler+0x160>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e36:	221c      	movs	r2, #28
 8003e38:	4013      	ands	r3, r2
 8003e3a:	2204      	movs	r2, #4
 8003e3c:	409a      	lsls	r2, r3
 8003e3e:	0013      	movs	r3, r2
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4013      	ands	r3, r2
 8003e44:	d027      	beq.n	8003e96 <HAL_DMA_IRQHandler+0x7a>
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2204      	movs	r2, #4
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	d023      	beq.n	8003e96 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2220      	movs	r2, #32
 8003e56:	4013      	ands	r3, r2
 8003e58:	d107      	bne.n	8003e6a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2104      	movs	r1, #4
 8003e66:	438a      	bics	r2, r1
 8003e68:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003e6a:	4b44      	ldr	r3, [pc, #272]	@ (8003f7c <HAL_DMA_IRQHandler+0x160>)
 8003e6c:	6859      	ldr	r1, [r3, #4]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e72:	221c      	movs	r2, #28
 8003e74:	4013      	ands	r3, r2
 8003e76:	2204      	movs	r2, #4
 8003e78:	409a      	lsls	r2, r3
 8003e7a:	4b40      	ldr	r3, [pc, #256]	@ (8003f7c <HAL_DMA_IRQHandler+0x160>)
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d100      	bne.n	8003e8a <HAL_DMA_IRQHandler+0x6e>
 8003e88:	e073      	b.n	8003f72 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	0010      	movs	r0, r2
 8003e92:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003e94:	e06d      	b.n	8003f72 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9a:	221c      	movs	r2, #28
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	409a      	lsls	r2, r3
 8003ea2:	0013      	movs	r3, r2
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	d02e      	beq.n	8003f08 <HAL_DMA_IRQHandler+0xec>
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	2202      	movs	r2, #2
 8003eae:	4013      	ands	r3, r2
 8003eb0:	d02a      	beq.n	8003f08 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	4013      	ands	r3, r2
 8003ebc:	d10b      	bne.n	8003ed6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	210a      	movs	r1, #10
 8003eca:	438a      	bics	r2, r1
 8003ecc:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2225      	movs	r2, #37	@ 0x25
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003ed6:	4b29      	ldr	r3, [pc, #164]	@ (8003f7c <HAL_DMA_IRQHandler+0x160>)
 8003ed8:	6859      	ldr	r1, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ede:	221c      	movs	r2, #28
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	409a      	lsls	r2, r3
 8003ee6:	4b25      	ldr	r3, [pc, #148]	@ (8003f7c <HAL_DMA_IRQHandler+0x160>)
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2224      	movs	r2, #36	@ 0x24
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d03a      	beq.n	8003f72 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	0010      	movs	r0, r2
 8003f04:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003f06:	e034      	b.n	8003f72 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0c:	221c      	movs	r2, #28
 8003f0e:	4013      	ands	r3, r2
 8003f10:	2208      	movs	r2, #8
 8003f12:	409a      	lsls	r2, r3
 8003f14:	0013      	movs	r3, r2
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	d02b      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x158>
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2208      	movs	r2, #8
 8003f20:	4013      	ands	r3, r2
 8003f22:	d027      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	210e      	movs	r1, #14
 8003f30:	438a      	bics	r2, r1
 8003f32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003f34:	4b11      	ldr	r3, [pc, #68]	@ (8003f7c <HAL_DMA_IRQHandler+0x160>)
 8003f36:	6859      	ldr	r1, [r3, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3c:	221c      	movs	r2, #28
 8003f3e:	4013      	ands	r3, r2
 8003f40:	2201      	movs	r2, #1
 8003f42:	409a      	lsls	r2, r3
 8003f44:	4b0d      	ldr	r3, [pc, #52]	@ (8003f7c <HAL_DMA_IRQHandler+0x160>)
 8003f46:	430a      	orrs	r2, r1
 8003f48:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2225      	movs	r2, #37	@ 0x25
 8003f54:	2101      	movs	r1, #1
 8003f56:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2224      	movs	r2, #36	@ 0x24
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d005      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	0010      	movs	r0, r2
 8003f70:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003f72:	46c0      	nop			@ (mov r8, r8)
 8003f74:	46c0      	nop			@ (mov r8, r8)
}
 8003f76:	46bd      	mov	sp, r7
 8003f78:	b004      	add	sp, #16
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40020000 	.word	0x40020000

08003f80 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
 8003f8c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003f96:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d004      	beq.n	8003faa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003fa8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003faa:	4b14      	ldr	r3, [pc, #80]	@ (8003ffc <DMA_SetConfig+0x7c>)
 8003fac:	6859      	ldr	r1, [r3, #4]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb2:	221c      	movs	r2, #28
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	409a      	lsls	r2, r3
 8003fba:	4b10      	ldr	r3, [pc, #64]	@ (8003ffc <DMA_SetConfig+0x7c>)
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	2b10      	cmp	r3, #16
 8003fce:	d108      	bne.n	8003fe2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003fe0:	e007      	b.n	8003ff2 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	60da      	str	r2, [r3, #12]
}
 8003ff2:	46c0      	nop			@ (mov r8, r8)
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	b004      	add	sp, #16
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	46c0      	nop			@ (mov r8, r8)
 8003ffc:	40020000 	.word	0x40020000

08004000 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400c:	089b      	lsrs	r3, r3, #2
 800400e:	4a10      	ldr	r2, [pc, #64]	@ (8004050 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8004010:	4694      	mov	ip, r2
 8004012:	4463      	add	r3, ip
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	001a      	movs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	001a      	movs	r2, r3
 8004022:	23ff      	movs	r3, #255	@ 0xff
 8004024:	4013      	ands	r3, r2
 8004026:	3b08      	subs	r3, #8
 8004028:	2114      	movs	r1, #20
 800402a:	0018      	movs	r0, r3
 800402c:	f7fc f874 	bl	8000118 <__udivsi3>
 8004030:	0003      	movs	r3, r0
 8004032:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a07      	ldr	r2, [pc, #28]	@ (8004054 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004038:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	221f      	movs	r2, #31
 800403e:	4013      	ands	r3, r2
 8004040:	2201      	movs	r2, #1
 8004042:	409a      	lsls	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8004048:	46c0      	nop			@ (mov r8, r8)
 800404a:	46bd      	mov	sp, r7
 800404c:	b004      	add	sp, #16
 800404e:	bd80      	pop	{r7, pc}
 8004050:	10008200 	.word	0x10008200
 8004054:	40020880 	.word	0x40020880

08004058 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	223f      	movs	r2, #63	@ 0x3f
 8004066:	4013      	ands	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	4a0a      	ldr	r2, [pc, #40]	@ (8004098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800406e:	4694      	mov	ip, r2
 8004070:	4463      	add	r3, ip
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	001a      	movs	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a07      	ldr	r2, [pc, #28]	@ (800409c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800407e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3b01      	subs	r3, #1
 8004084:	2203      	movs	r2, #3
 8004086:	4013      	ands	r3, r2
 8004088:	2201      	movs	r2, #1
 800408a:	409a      	lsls	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8004090:	46c0      	nop			@ (mov r8, r8)
 8004092:	46bd      	mov	sp, r7
 8004094:	b004      	add	sp, #16
 8004096:	bd80      	pop	{r7, pc}
 8004098:	1000823f 	.word	0x1000823f
 800409c:	40020940 	.word	0x40020940

080040a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040aa:	2300      	movs	r3, #0
 80040ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040ae:	e147      	b.n	8004340 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2101      	movs	r1, #1
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	4091      	lsls	r1, r2
 80040ba:	000a      	movs	r2, r1
 80040bc:	4013      	ands	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d100      	bne.n	80040c8 <HAL_GPIO_Init+0x28>
 80040c6:	e138      	b.n	800433a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2203      	movs	r2, #3
 80040ce:	4013      	ands	r3, r2
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d005      	beq.n	80040e0 <HAL_GPIO_Init+0x40>
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2203      	movs	r2, #3
 80040da:	4013      	ands	r3, r2
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d130      	bne.n	8004142 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	2203      	movs	r2, #3
 80040ec:	409a      	lsls	r2, r3
 80040ee:	0013      	movs	r3, r2
 80040f0:	43da      	mvns	r2, r3
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	4013      	ands	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	68da      	ldr	r2, [r3, #12]
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	409a      	lsls	r2, r3
 8004102:	0013      	movs	r3, r2
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4313      	orrs	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004116:	2201      	movs	r2, #1
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	409a      	lsls	r2, r3
 800411c:	0013      	movs	r3, r2
 800411e:	43da      	mvns	r2, r3
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	4013      	ands	r3, r2
 8004124:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	091b      	lsrs	r3, r3, #4
 800412c:	2201      	movs	r2, #1
 800412e:	401a      	ands	r2, r3
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	409a      	lsls	r2, r3
 8004134:	0013      	movs	r3, r2
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	4313      	orrs	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2203      	movs	r2, #3
 8004148:	4013      	ands	r3, r2
 800414a:	2b03      	cmp	r3, #3
 800414c:	d017      	beq.n	800417e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	2203      	movs	r2, #3
 800415a:	409a      	lsls	r2, r3
 800415c:	0013      	movs	r3, r2
 800415e:	43da      	mvns	r2, r3
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	4013      	ands	r3, r2
 8004164:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	409a      	lsls	r2, r3
 8004170:	0013      	movs	r3, r2
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	4313      	orrs	r3, r2
 8004176:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2203      	movs	r2, #3
 8004184:	4013      	ands	r3, r2
 8004186:	2b02      	cmp	r3, #2
 8004188:	d123      	bne.n	80041d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	08da      	lsrs	r2, r3, #3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	3208      	adds	r2, #8
 8004192:	0092      	lsls	r2, r2, #2
 8004194:	58d3      	ldr	r3, [r2, r3]
 8004196:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	2207      	movs	r2, #7
 800419c:	4013      	ands	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	220f      	movs	r2, #15
 80041a2:	409a      	lsls	r2, r3
 80041a4:	0013      	movs	r3, r2
 80041a6:	43da      	mvns	r2, r3
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	4013      	ands	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	691a      	ldr	r2, [r3, #16]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2107      	movs	r1, #7
 80041b6:	400b      	ands	r3, r1
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	409a      	lsls	r2, r3
 80041bc:	0013      	movs	r3, r2
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	08da      	lsrs	r2, r3, #3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3208      	adds	r2, #8
 80041cc:	0092      	lsls	r2, r2, #2
 80041ce:	6939      	ldr	r1, [r7, #16]
 80041d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	2203      	movs	r2, #3
 80041de:	409a      	lsls	r2, r3
 80041e0:	0013      	movs	r3, r2
 80041e2:	43da      	mvns	r2, r3
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	4013      	ands	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	2203      	movs	r2, #3
 80041f0:	401a      	ands	r2, r3
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	409a      	lsls	r2, r3
 80041f8:	0013      	movs	r3, r2
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	23c0      	movs	r3, #192	@ 0xc0
 800420c:	029b      	lsls	r3, r3, #10
 800420e:	4013      	ands	r3, r2
 8004210:	d100      	bne.n	8004214 <HAL_GPIO_Init+0x174>
 8004212:	e092      	b.n	800433a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004214:	4a50      	ldr	r2, [pc, #320]	@ (8004358 <HAL_GPIO_Init+0x2b8>)
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	089b      	lsrs	r3, r3, #2
 800421a:	3318      	adds	r3, #24
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	589b      	ldr	r3, [r3, r2]
 8004220:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	2203      	movs	r2, #3
 8004226:	4013      	ands	r3, r2
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	220f      	movs	r2, #15
 800422c:	409a      	lsls	r2, r3
 800422e:	0013      	movs	r3, r2
 8004230:	43da      	mvns	r2, r3
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	4013      	ands	r3, r2
 8004236:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	23a0      	movs	r3, #160	@ 0xa0
 800423c:	05db      	lsls	r3, r3, #23
 800423e:	429a      	cmp	r2, r3
 8004240:	d013      	beq.n	800426a <HAL_GPIO_Init+0x1ca>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a45      	ldr	r2, [pc, #276]	@ (800435c <HAL_GPIO_Init+0x2bc>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d00d      	beq.n	8004266 <HAL_GPIO_Init+0x1c6>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a44      	ldr	r2, [pc, #272]	@ (8004360 <HAL_GPIO_Init+0x2c0>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d007      	beq.n	8004262 <HAL_GPIO_Init+0x1c2>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a43      	ldr	r2, [pc, #268]	@ (8004364 <HAL_GPIO_Init+0x2c4>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d101      	bne.n	800425e <HAL_GPIO_Init+0x1be>
 800425a:	2303      	movs	r3, #3
 800425c:	e006      	b.n	800426c <HAL_GPIO_Init+0x1cc>
 800425e:	2305      	movs	r3, #5
 8004260:	e004      	b.n	800426c <HAL_GPIO_Init+0x1cc>
 8004262:	2302      	movs	r3, #2
 8004264:	e002      	b.n	800426c <HAL_GPIO_Init+0x1cc>
 8004266:	2301      	movs	r3, #1
 8004268:	e000      	b.n	800426c <HAL_GPIO_Init+0x1cc>
 800426a:	2300      	movs	r3, #0
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	2103      	movs	r1, #3
 8004270:	400a      	ands	r2, r1
 8004272:	00d2      	lsls	r2, r2, #3
 8004274:	4093      	lsls	r3, r2
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	4313      	orrs	r3, r2
 800427a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800427c:	4936      	ldr	r1, [pc, #216]	@ (8004358 <HAL_GPIO_Init+0x2b8>)
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	089b      	lsrs	r3, r3, #2
 8004282:	3318      	adds	r3, #24
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800428a:	4b33      	ldr	r3, [pc, #204]	@ (8004358 <HAL_GPIO_Init+0x2b8>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	43da      	mvns	r2, r3
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	4013      	ands	r3, r2
 8004298:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	2380      	movs	r3, #128	@ 0x80
 80042a0:	035b      	lsls	r3, r3, #13
 80042a2:	4013      	ands	r3, r2
 80042a4:	d003      	beq.n	80042ae <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042ae:	4b2a      	ldr	r3, [pc, #168]	@ (8004358 <HAL_GPIO_Init+0x2b8>)
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80042b4:	4b28      	ldr	r3, [pc, #160]	@ (8004358 <HAL_GPIO_Init+0x2b8>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	43da      	mvns	r2, r3
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	4013      	ands	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	2380      	movs	r3, #128	@ 0x80
 80042ca:	039b      	lsls	r3, r3, #14
 80042cc:	4013      	ands	r3, r2
 80042ce:	d003      	beq.n	80042d8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80042d8:	4b1f      	ldr	r3, [pc, #124]	@ (8004358 <HAL_GPIO_Init+0x2b8>)
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80042de:	4a1e      	ldr	r2, [pc, #120]	@ (8004358 <HAL_GPIO_Init+0x2b8>)
 80042e0:	2384      	movs	r3, #132	@ 0x84
 80042e2:	58d3      	ldr	r3, [r2, r3]
 80042e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	43da      	mvns	r2, r3
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	4013      	ands	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	2380      	movs	r3, #128	@ 0x80
 80042f6:	029b      	lsls	r3, r3, #10
 80042f8:	4013      	ands	r3, r2
 80042fa:	d003      	beq.n	8004304 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	4313      	orrs	r3, r2
 8004302:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004304:	4914      	ldr	r1, [pc, #80]	@ (8004358 <HAL_GPIO_Init+0x2b8>)
 8004306:	2284      	movs	r2, #132	@ 0x84
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800430c:	4a12      	ldr	r2, [pc, #72]	@ (8004358 <HAL_GPIO_Init+0x2b8>)
 800430e:	2380      	movs	r3, #128	@ 0x80
 8004310:	58d3      	ldr	r3, [r2, r3]
 8004312:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	43da      	mvns	r2, r3
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	4013      	ands	r3, r2
 800431c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	2380      	movs	r3, #128	@ 0x80
 8004324:	025b      	lsls	r3, r3, #9
 8004326:	4013      	ands	r3, r2
 8004328:	d003      	beq.n	8004332 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4313      	orrs	r3, r2
 8004330:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004332:	4909      	ldr	r1, [pc, #36]	@ (8004358 <HAL_GPIO_Init+0x2b8>)
 8004334:	2280      	movs	r2, #128	@ 0x80
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	3301      	adds	r3, #1
 800433e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	40da      	lsrs	r2, r3
 8004348:	1e13      	subs	r3, r2, #0
 800434a:	d000      	beq.n	800434e <HAL_GPIO_Init+0x2ae>
 800434c:	e6b0      	b.n	80040b0 <HAL_GPIO_Init+0x10>
  }
}
 800434e:	46c0      	nop			@ (mov r8, r8)
 8004350:	46c0      	nop			@ (mov r8, r8)
 8004352:	46bd      	mov	sp, r7
 8004354:	b006      	add	sp, #24
 8004356:	bd80      	pop	{r7, pc}
 8004358:	40021800 	.word	0x40021800
 800435c:	50000400 	.word	0x50000400
 8004360:	50000800 	.word	0x50000800
 8004364:	50000c00 	.word	0x50000c00

08004368 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	000a      	movs	r2, r1
 8004372:	1cbb      	adds	r3, r7, #2
 8004374:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	1cba      	adds	r2, r7, #2
 800437c:	8812      	ldrh	r2, [r2, #0]
 800437e:	4013      	ands	r3, r2
 8004380:	d004      	beq.n	800438c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004382:	230f      	movs	r3, #15
 8004384:	18fb      	adds	r3, r7, r3
 8004386:	2201      	movs	r2, #1
 8004388:	701a      	strb	r2, [r3, #0]
 800438a:	e003      	b.n	8004394 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800438c:	230f      	movs	r3, #15
 800438e:	18fb      	adds	r3, r7, r3
 8004390:	2200      	movs	r2, #0
 8004392:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004394:	230f      	movs	r3, #15
 8004396:	18fb      	adds	r3, r7, r3
 8004398:	781b      	ldrb	r3, [r3, #0]
}
 800439a:	0018      	movs	r0, r3
 800439c:	46bd      	mov	sp, r7
 800439e:	b004      	add	sp, #16
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b082      	sub	sp, #8
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	0008      	movs	r0, r1
 80043ac:	0011      	movs	r1, r2
 80043ae:	1cbb      	adds	r3, r7, #2
 80043b0:	1c02      	adds	r2, r0, #0
 80043b2:	801a      	strh	r2, [r3, #0]
 80043b4:	1c7b      	adds	r3, r7, #1
 80043b6:	1c0a      	adds	r2, r1, #0
 80043b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043ba:	1c7b      	adds	r3, r7, #1
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d004      	beq.n	80043cc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043c2:	1cbb      	adds	r3, r7, #2
 80043c4:	881a      	ldrh	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043ca:	e003      	b.n	80043d4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043cc:	1cbb      	adds	r3, r7, #2
 80043ce:	881a      	ldrh	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80043d4:	46c0      	nop			@ (mov r8, r8)
 80043d6:	46bd      	mov	sp, r7
 80043d8:	b002      	add	sp, #8
 80043da:	bd80      	pop	{r7, pc}

080043dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80043e4:	4b19      	ldr	r3, [pc, #100]	@ (800444c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a19      	ldr	r2, [pc, #100]	@ (8004450 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80043ea:	4013      	ands	r3, r2
 80043ec:	0019      	movs	r1, r3
 80043ee:	4b17      	ldr	r3, [pc, #92]	@ (800444c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	2380      	movs	r3, #128	@ 0x80
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d11f      	bne.n	8004440 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004400:	4b14      	ldr	r3, [pc, #80]	@ (8004454 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	0013      	movs	r3, r2
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	189b      	adds	r3, r3, r2
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	4912      	ldr	r1, [pc, #72]	@ (8004458 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800440e:	0018      	movs	r0, r3
 8004410:	f7fb fe82 	bl	8000118 <__udivsi3>
 8004414:	0003      	movs	r3, r0
 8004416:	3301      	adds	r3, #1
 8004418:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800441a:	e008      	b.n	800442e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	3b01      	subs	r3, #1
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	e001      	b.n	800442e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e009      	b.n	8004442 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800442e:	4b07      	ldr	r3, [pc, #28]	@ (800444c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004430:	695a      	ldr	r2, [r3, #20]
 8004432:	2380      	movs	r3, #128	@ 0x80
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	401a      	ands	r2, r3
 8004438:	2380      	movs	r3, #128	@ 0x80
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	429a      	cmp	r2, r3
 800443e:	d0ed      	beq.n	800441c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	0018      	movs	r0, r3
 8004444:	46bd      	mov	sp, r7
 8004446:	b004      	add	sp, #16
 8004448:	bd80      	pop	{r7, pc}
 800444a:	46c0      	nop			@ (mov r8, r8)
 800444c:	40007000 	.word	0x40007000
 8004450:	fffff9ff 	.word	0xfffff9ff
 8004454:	2000000c 	.word	0x2000000c
 8004458:	000f4240 	.word	0x000f4240

0800445c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004460:	4b03      	ldr	r3, [pc, #12]	@ (8004470 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	23e0      	movs	r3, #224	@ 0xe0
 8004466:	01db      	lsls	r3, r3, #7
 8004468:	4013      	ands	r3, r2
}
 800446a:	0018      	movs	r0, r3
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	40021000 	.word	0x40021000

08004474 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b088      	sub	sp, #32
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e2fe      	b.n	8004a84 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2201      	movs	r2, #1
 800448c:	4013      	ands	r3, r2
 800448e:	d100      	bne.n	8004492 <HAL_RCC_OscConfig+0x1e>
 8004490:	e07c      	b.n	800458c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004492:	4bc3      	ldr	r3, [pc, #780]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	2238      	movs	r2, #56	@ 0x38
 8004498:	4013      	ands	r3, r2
 800449a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800449c:	4bc0      	ldr	r3, [pc, #768]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	2203      	movs	r2, #3
 80044a2:	4013      	ands	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	2b10      	cmp	r3, #16
 80044aa:	d102      	bne.n	80044b2 <HAL_RCC_OscConfig+0x3e>
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d002      	beq.n	80044b8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d10b      	bne.n	80044d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b8:	4bb9      	ldr	r3, [pc, #740]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	2380      	movs	r3, #128	@ 0x80
 80044be:	029b      	lsls	r3, r3, #10
 80044c0:	4013      	ands	r3, r2
 80044c2:	d062      	beq.n	800458a <HAL_RCC_OscConfig+0x116>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d15e      	bne.n	800458a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e2d9      	b.n	8004a84 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	2380      	movs	r3, #128	@ 0x80
 80044d6:	025b      	lsls	r3, r3, #9
 80044d8:	429a      	cmp	r2, r3
 80044da:	d107      	bne.n	80044ec <HAL_RCC_OscConfig+0x78>
 80044dc:	4bb0      	ldr	r3, [pc, #704]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	4baf      	ldr	r3, [pc, #700]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 80044e2:	2180      	movs	r1, #128	@ 0x80
 80044e4:	0249      	lsls	r1, r1, #9
 80044e6:	430a      	orrs	r2, r1
 80044e8:	601a      	str	r2, [r3, #0]
 80044ea:	e020      	b.n	800452e <HAL_RCC_OscConfig+0xba>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	23a0      	movs	r3, #160	@ 0xa0
 80044f2:	02db      	lsls	r3, r3, #11
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d10e      	bne.n	8004516 <HAL_RCC_OscConfig+0xa2>
 80044f8:	4ba9      	ldr	r3, [pc, #676]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	4ba8      	ldr	r3, [pc, #672]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 80044fe:	2180      	movs	r1, #128	@ 0x80
 8004500:	02c9      	lsls	r1, r1, #11
 8004502:	430a      	orrs	r2, r1
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	4ba6      	ldr	r3, [pc, #664]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	4ba5      	ldr	r3, [pc, #660]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 800450c:	2180      	movs	r1, #128	@ 0x80
 800450e:	0249      	lsls	r1, r1, #9
 8004510:	430a      	orrs	r2, r1
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	e00b      	b.n	800452e <HAL_RCC_OscConfig+0xba>
 8004516:	4ba2      	ldr	r3, [pc, #648]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	4ba1      	ldr	r3, [pc, #644]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 800451c:	49a1      	ldr	r1, [pc, #644]	@ (80047a4 <HAL_RCC_OscConfig+0x330>)
 800451e:	400a      	ands	r2, r1
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	4b9f      	ldr	r3, [pc, #636]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	4b9e      	ldr	r3, [pc, #632]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 8004528:	499f      	ldr	r1, [pc, #636]	@ (80047a8 <HAL_RCC_OscConfig+0x334>)
 800452a:	400a      	ands	r2, r1
 800452c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d014      	beq.n	8004560 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004536:	f7ff fa55 	bl	80039e4 <HAL_GetTick>
 800453a:	0003      	movs	r3, r0
 800453c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004540:	f7ff fa50 	bl	80039e4 <HAL_GetTick>
 8004544:	0002      	movs	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b64      	cmp	r3, #100	@ 0x64
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e298      	b.n	8004a84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004552:	4b93      	ldr	r3, [pc, #588]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	2380      	movs	r3, #128	@ 0x80
 8004558:	029b      	lsls	r3, r3, #10
 800455a:	4013      	ands	r3, r2
 800455c:	d0f0      	beq.n	8004540 <HAL_RCC_OscConfig+0xcc>
 800455e:	e015      	b.n	800458c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004560:	f7ff fa40 	bl	80039e4 <HAL_GetTick>
 8004564:	0003      	movs	r3, r0
 8004566:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004568:	e008      	b.n	800457c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800456a:	f7ff fa3b 	bl	80039e4 <HAL_GetTick>
 800456e:	0002      	movs	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b64      	cmp	r3, #100	@ 0x64
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e283      	b.n	8004a84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800457c:	4b88      	ldr	r3, [pc, #544]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	2380      	movs	r3, #128	@ 0x80
 8004582:	029b      	lsls	r3, r3, #10
 8004584:	4013      	ands	r3, r2
 8004586:	d1f0      	bne.n	800456a <HAL_RCC_OscConfig+0xf6>
 8004588:	e000      	b.n	800458c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800458a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2202      	movs	r2, #2
 8004592:	4013      	ands	r3, r2
 8004594:	d100      	bne.n	8004598 <HAL_RCC_OscConfig+0x124>
 8004596:	e099      	b.n	80046cc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004598:	4b81      	ldr	r3, [pc, #516]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	2238      	movs	r2, #56	@ 0x38
 800459e:	4013      	ands	r3, r2
 80045a0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045a2:	4b7f      	ldr	r3, [pc, #508]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	2203      	movs	r2, #3
 80045a8:	4013      	ands	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	2b10      	cmp	r3, #16
 80045b0:	d102      	bne.n	80045b8 <HAL_RCC_OscConfig+0x144>
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d002      	beq.n	80045be <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d135      	bne.n	800462a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045be:	4b78      	ldr	r3, [pc, #480]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	2380      	movs	r3, #128	@ 0x80
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	4013      	ands	r3, r2
 80045c8:	d005      	beq.n	80045d6 <HAL_RCC_OscConfig+0x162>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e256      	b.n	8004a84 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d6:	4b72      	ldr	r3, [pc, #456]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	4a74      	ldr	r2, [pc, #464]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 80045dc:	4013      	ands	r3, r2
 80045de:	0019      	movs	r1, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	021a      	lsls	r2, r3, #8
 80045e6:	4b6e      	ldr	r3, [pc, #440]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 80045e8:	430a      	orrs	r2, r1
 80045ea:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d112      	bne.n	8004618 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80045f2:	4b6b      	ldr	r3, [pc, #428]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a6e      	ldr	r2, [pc, #440]	@ (80047b0 <HAL_RCC_OscConfig+0x33c>)
 80045f8:	4013      	ands	r3, r2
 80045fa:	0019      	movs	r1, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	691a      	ldr	r2, [r3, #16]
 8004600:	4b67      	ldr	r3, [pc, #412]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 8004602:	430a      	orrs	r2, r1
 8004604:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004606:	4b66      	ldr	r3, [pc, #408]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	0adb      	lsrs	r3, r3, #11
 800460c:	2207      	movs	r2, #7
 800460e:	4013      	ands	r3, r2
 8004610:	4a68      	ldr	r2, [pc, #416]	@ (80047b4 <HAL_RCC_OscConfig+0x340>)
 8004612:	40da      	lsrs	r2, r3
 8004614:	4b68      	ldr	r3, [pc, #416]	@ (80047b8 <HAL_RCC_OscConfig+0x344>)
 8004616:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004618:	4b68      	ldr	r3, [pc, #416]	@ (80047bc <HAL_RCC_OscConfig+0x348>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	0018      	movs	r0, r3
 800461e:	f7ff f985 	bl	800392c <HAL_InitTick>
 8004622:	1e03      	subs	r3, r0, #0
 8004624:	d051      	beq.n	80046ca <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e22c      	b.n	8004a84 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d030      	beq.n	8004694 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004632:	4b5b      	ldr	r3, [pc, #364]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a5e      	ldr	r2, [pc, #376]	@ (80047b0 <HAL_RCC_OscConfig+0x33c>)
 8004638:	4013      	ands	r3, r2
 800463a:	0019      	movs	r1, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	691a      	ldr	r2, [r3, #16]
 8004640:	4b57      	ldr	r3, [pc, #348]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 8004642:	430a      	orrs	r2, r1
 8004644:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004646:	4b56      	ldr	r3, [pc, #344]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	4b55      	ldr	r3, [pc, #340]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 800464c:	2180      	movs	r1, #128	@ 0x80
 800464e:	0049      	lsls	r1, r1, #1
 8004650:	430a      	orrs	r2, r1
 8004652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004654:	f7ff f9c6 	bl	80039e4 <HAL_GetTick>
 8004658:	0003      	movs	r3, r0
 800465a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800465e:	f7ff f9c1 	bl	80039e4 <HAL_GetTick>
 8004662:	0002      	movs	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e209      	b.n	8004a84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004670:	4b4b      	ldr	r3, [pc, #300]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	2380      	movs	r3, #128	@ 0x80
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	4013      	ands	r3, r2
 800467a:	d0f0      	beq.n	800465e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800467c:	4b48      	ldr	r3, [pc, #288]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	4a4a      	ldr	r2, [pc, #296]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 8004682:	4013      	ands	r3, r2
 8004684:	0019      	movs	r1, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	021a      	lsls	r2, r3, #8
 800468c:	4b44      	ldr	r3, [pc, #272]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 800468e:	430a      	orrs	r2, r1
 8004690:	605a      	str	r2, [r3, #4]
 8004692:	e01b      	b.n	80046cc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004694:	4b42      	ldr	r3, [pc, #264]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	4b41      	ldr	r3, [pc, #260]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 800469a:	4949      	ldr	r1, [pc, #292]	@ (80047c0 <HAL_RCC_OscConfig+0x34c>)
 800469c:	400a      	ands	r2, r1
 800469e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a0:	f7ff f9a0 	bl	80039e4 <HAL_GetTick>
 80046a4:	0003      	movs	r3, r0
 80046a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046a8:	e008      	b.n	80046bc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046aa:	f7ff f99b 	bl	80039e4 <HAL_GetTick>
 80046ae:	0002      	movs	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e1e3      	b.n	8004a84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046bc:	4b38      	ldr	r3, [pc, #224]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	2380      	movs	r3, #128	@ 0x80
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	4013      	ands	r3, r2
 80046c6:	d1f0      	bne.n	80046aa <HAL_RCC_OscConfig+0x236>
 80046c8:	e000      	b.n	80046cc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046ca:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2208      	movs	r2, #8
 80046d2:	4013      	ands	r3, r2
 80046d4:	d047      	beq.n	8004766 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80046d6:	4b32      	ldr	r3, [pc, #200]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	2238      	movs	r2, #56	@ 0x38
 80046dc:	4013      	ands	r3, r2
 80046de:	2b18      	cmp	r3, #24
 80046e0:	d10a      	bne.n	80046f8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80046e2:	4b2f      	ldr	r3, [pc, #188]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 80046e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046e6:	2202      	movs	r2, #2
 80046e8:	4013      	ands	r3, r2
 80046ea:	d03c      	beq.n	8004766 <HAL_RCC_OscConfig+0x2f2>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d138      	bne.n	8004766 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e1c5      	b.n	8004a84 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d019      	beq.n	8004734 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004700:	4b27      	ldr	r3, [pc, #156]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 8004702:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004704:	4b26      	ldr	r3, [pc, #152]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 8004706:	2101      	movs	r1, #1
 8004708:	430a      	orrs	r2, r1
 800470a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470c:	f7ff f96a 	bl	80039e4 <HAL_GetTick>
 8004710:	0003      	movs	r3, r0
 8004712:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004714:	e008      	b.n	8004728 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004716:	f7ff f965 	bl	80039e4 <HAL_GetTick>
 800471a:	0002      	movs	r2, r0
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d901      	bls.n	8004728 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e1ad      	b.n	8004a84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004728:	4b1d      	ldr	r3, [pc, #116]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 800472a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800472c:	2202      	movs	r2, #2
 800472e:	4013      	ands	r3, r2
 8004730:	d0f1      	beq.n	8004716 <HAL_RCC_OscConfig+0x2a2>
 8004732:	e018      	b.n	8004766 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004734:	4b1a      	ldr	r3, [pc, #104]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 8004736:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004738:	4b19      	ldr	r3, [pc, #100]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 800473a:	2101      	movs	r1, #1
 800473c:	438a      	bics	r2, r1
 800473e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004740:	f7ff f950 	bl	80039e4 <HAL_GetTick>
 8004744:	0003      	movs	r3, r0
 8004746:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004748:	e008      	b.n	800475c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800474a:	f7ff f94b 	bl	80039e4 <HAL_GetTick>
 800474e:	0002      	movs	r2, r0
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b02      	cmp	r3, #2
 8004756:	d901      	bls.n	800475c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e193      	b.n	8004a84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800475c:	4b10      	ldr	r3, [pc, #64]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 800475e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004760:	2202      	movs	r2, #2
 8004762:	4013      	ands	r3, r2
 8004764:	d1f1      	bne.n	800474a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2204      	movs	r2, #4
 800476c:	4013      	ands	r3, r2
 800476e:	d100      	bne.n	8004772 <HAL_RCC_OscConfig+0x2fe>
 8004770:	e0c6      	b.n	8004900 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004772:	231f      	movs	r3, #31
 8004774:	18fb      	adds	r3, r7, r3
 8004776:	2200      	movs	r2, #0
 8004778:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800477a:	4b09      	ldr	r3, [pc, #36]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	2238      	movs	r2, #56	@ 0x38
 8004780:	4013      	ands	r3, r2
 8004782:	2b20      	cmp	r3, #32
 8004784:	d11e      	bne.n	80047c4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004786:	4b06      	ldr	r3, [pc, #24]	@ (80047a0 <HAL_RCC_OscConfig+0x32c>)
 8004788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800478a:	2202      	movs	r2, #2
 800478c:	4013      	ands	r3, r2
 800478e:	d100      	bne.n	8004792 <HAL_RCC_OscConfig+0x31e>
 8004790:	e0b6      	b.n	8004900 <HAL_RCC_OscConfig+0x48c>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d000      	beq.n	800479c <HAL_RCC_OscConfig+0x328>
 800479a:	e0b1      	b.n	8004900 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e171      	b.n	8004a84 <HAL_RCC_OscConfig+0x610>
 80047a0:	40021000 	.word	0x40021000
 80047a4:	fffeffff 	.word	0xfffeffff
 80047a8:	fffbffff 	.word	0xfffbffff
 80047ac:	ffff80ff 	.word	0xffff80ff
 80047b0:	ffffc7ff 	.word	0xffffc7ff
 80047b4:	00f42400 	.word	0x00f42400
 80047b8:	2000000c 	.word	0x2000000c
 80047bc:	20000030 	.word	0x20000030
 80047c0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047c4:	4bb1      	ldr	r3, [pc, #708]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 80047c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047c8:	2380      	movs	r3, #128	@ 0x80
 80047ca:	055b      	lsls	r3, r3, #21
 80047cc:	4013      	ands	r3, r2
 80047ce:	d101      	bne.n	80047d4 <HAL_RCC_OscConfig+0x360>
 80047d0:	2301      	movs	r3, #1
 80047d2:	e000      	b.n	80047d6 <HAL_RCC_OscConfig+0x362>
 80047d4:	2300      	movs	r3, #0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d011      	beq.n	80047fe <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80047da:	4bac      	ldr	r3, [pc, #688]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 80047dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047de:	4bab      	ldr	r3, [pc, #684]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 80047e0:	2180      	movs	r1, #128	@ 0x80
 80047e2:	0549      	lsls	r1, r1, #21
 80047e4:	430a      	orrs	r2, r1
 80047e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80047e8:	4ba8      	ldr	r3, [pc, #672]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 80047ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047ec:	2380      	movs	r3, #128	@ 0x80
 80047ee:	055b      	lsls	r3, r3, #21
 80047f0:	4013      	ands	r3, r2
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80047f6:	231f      	movs	r3, #31
 80047f8:	18fb      	adds	r3, r7, r3
 80047fa:	2201      	movs	r2, #1
 80047fc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047fe:	4ba4      	ldr	r3, [pc, #656]	@ (8004a90 <HAL_RCC_OscConfig+0x61c>)
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	2380      	movs	r3, #128	@ 0x80
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	4013      	ands	r3, r2
 8004808:	d11a      	bne.n	8004840 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800480a:	4ba1      	ldr	r3, [pc, #644]	@ (8004a90 <HAL_RCC_OscConfig+0x61c>)
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	4ba0      	ldr	r3, [pc, #640]	@ (8004a90 <HAL_RCC_OscConfig+0x61c>)
 8004810:	2180      	movs	r1, #128	@ 0x80
 8004812:	0049      	lsls	r1, r1, #1
 8004814:	430a      	orrs	r2, r1
 8004816:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004818:	f7ff f8e4 	bl	80039e4 <HAL_GetTick>
 800481c:	0003      	movs	r3, r0
 800481e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004820:	e008      	b.n	8004834 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004822:	f7ff f8df 	bl	80039e4 <HAL_GetTick>
 8004826:	0002      	movs	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d901      	bls.n	8004834 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e127      	b.n	8004a84 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004834:	4b96      	ldr	r3, [pc, #600]	@ (8004a90 <HAL_RCC_OscConfig+0x61c>)
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	2380      	movs	r3, #128	@ 0x80
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	4013      	ands	r3, r2
 800483e:	d0f0      	beq.n	8004822 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d106      	bne.n	8004856 <HAL_RCC_OscConfig+0x3e2>
 8004848:	4b90      	ldr	r3, [pc, #576]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 800484a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800484c:	4b8f      	ldr	r3, [pc, #572]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 800484e:	2101      	movs	r1, #1
 8004850:	430a      	orrs	r2, r1
 8004852:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004854:	e01c      	b.n	8004890 <HAL_RCC_OscConfig+0x41c>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	2b05      	cmp	r3, #5
 800485c:	d10c      	bne.n	8004878 <HAL_RCC_OscConfig+0x404>
 800485e:	4b8b      	ldr	r3, [pc, #556]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 8004860:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004862:	4b8a      	ldr	r3, [pc, #552]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 8004864:	2104      	movs	r1, #4
 8004866:	430a      	orrs	r2, r1
 8004868:	65da      	str	r2, [r3, #92]	@ 0x5c
 800486a:	4b88      	ldr	r3, [pc, #544]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 800486c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800486e:	4b87      	ldr	r3, [pc, #540]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 8004870:	2101      	movs	r1, #1
 8004872:	430a      	orrs	r2, r1
 8004874:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004876:	e00b      	b.n	8004890 <HAL_RCC_OscConfig+0x41c>
 8004878:	4b84      	ldr	r3, [pc, #528]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 800487a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800487c:	4b83      	ldr	r3, [pc, #524]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 800487e:	2101      	movs	r1, #1
 8004880:	438a      	bics	r2, r1
 8004882:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004884:	4b81      	ldr	r3, [pc, #516]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 8004886:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004888:	4b80      	ldr	r3, [pc, #512]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 800488a:	2104      	movs	r1, #4
 800488c:	438a      	bics	r2, r1
 800488e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d014      	beq.n	80048c2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004898:	f7ff f8a4 	bl	80039e4 <HAL_GetTick>
 800489c:	0003      	movs	r3, r0
 800489e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048a0:	e009      	b.n	80048b6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048a2:	f7ff f89f 	bl	80039e4 <HAL_GetTick>
 80048a6:	0002      	movs	r2, r0
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	4a79      	ldr	r2, [pc, #484]	@ (8004a94 <HAL_RCC_OscConfig+0x620>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e0e6      	b.n	8004a84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048b6:	4b75      	ldr	r3, [pc, #468]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 80048b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ba:	2202      	movs	r2, #2
 80048bc:	4013      	ands	r3, r2
 80048be:	d0f0      	beq.n	80048a2 <HAL_RCC_OscConfig+0x42e>
 80048c0:	e013      	b.n	80048ea <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c2:	f7ff f88f 	bl	80039e4 <HAL_GetTick>
 80048c6:	0003      	movs	r3, r0
 80048c8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048ca:	e009      	b.n	80048e0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048cc:	f7ff f88a 	bl	80039e4 <HAL_GetTick>
 80048d0:	0002      	movs	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	4a6f      	ldr	r2, [pc, #444]	@ (8004a94 <HAL_RCC_OscConfig+0x620>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d901      	bls.n	80048e0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e0d1      	b.n	8004a84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048e0:	4b6a      	ldr	r3, [pc, #424]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 80048e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048e4:	2202      	movs	r2, #2
 80048e6:	4013      	ands	r3, r2
 80048e8:	d1f0      	bne.n	80048cc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80048ea:	231f      	movs	r3, #31
 80048ec:	18fb      	adds	r3, r7, r3
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d105      	bne.n	8004900 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80048f4:	4b65      	ldr	r3, [pc, #404]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 80048f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048f8:	4b64      	ldr	r3, [pc, #400]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 80048fa:	4967      	ldr	r1, [pc, #412]	@ (8004a98 <HAL_RCC_OscConfig+0x624>)
 80048fc:	400a      	ands	r2, r1
 80048fe:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d100      	bne.n	800490a <HAL_RCC_OscConfig+0x496>
 8004908:	e0bb      	b.n	8004a82 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800490a:	4b60      	ldr	r3, [pc, #384]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	2238      	movs	r2, #56	@ 0x38
 8004910:	4013      	ands	r3, r2
 8004912:	2b10      	cmp	r3, #16
 8004914:	d100      	bne.n	8004918 <HAL_RCC_OscConfig+0x4a4>
 8004916:	e07b      	b.n	8004a10 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	69db      	ldr	r3, [r3, #28]
 800491c:	2b02      	cmp	r3, #2
 800491e:	d156      	bne.n	80049ce <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004920:	4b5a      	ldr	r3, [pc, #360]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	4b59      	ldr	r3, [pc, #356]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 8004926:	495d      	ldr	r1, [pc, #372]	@ (8004a9c <HAL_RCC_OscConfig+0x628>)
 8004928:	400a      	ands	r2, r1
 800492a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492c:	f7ff f85a 	bl	80039e4 <HAL_GetTick>
 8004930:	0003      	movs	r3, r0
 8004932:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004934:	e008      	b.n	8004948 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004936:	f7ff f855 	bl	80039e4 <HAL_GetTick>
 800493a:	0002      	movs	r2, r0
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e09d      	b.n	8004a84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004948:	4b50      	ldr	r3, [pc, #320]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	2380      	movs	r3, #128	@ 0x80
 800494e:	049b      	lsls	r3, r3, #18
 8004950:	4013      	ands	r3, r2
 8004952:	d1f0      	bne.n	8004936 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004954:	4b4d      	ldr	r3, [pc, #308]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	4a51      	ldr	r2, [pc, #324]	@ (8004aa0 <HAL_RCC_OscConfig+0x62c>)
 800495a:	4013      	ands	r3, r2
 800495c:	0019      	movs	r1, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1a      	ldr	r2, [r3, #32]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800496c:	021b      	lsls	r3, r3, #8
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004980:	431a      	orrs	r2, r3
 8004982:	4b42      	ldr	r3, [pc, #264]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 8004984:	430a      	orrs	r2, r1
 8004986:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004988:	4b40      	ldr	r3, [pc, #256]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	4b3f      	ldr	r3, [pc, #252]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 800498e:	2180      	movs	r1, #128	@ 0x80
 8004990:	0449      	lsls	r1, r1, #17
 8004992:	430a      	orrs	r2, r1
 8004994:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004996:	4b3d      	ldr	r3, [pc, #244]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 8004998:	68da      	ldr	r2, [r3, #12]
 800499a:	4b3c      	ldr	r3, [pc, #240]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 800499c:	2180      	movs	r1, #128	@ 0x80
 800499e:	0549      	lsls	r1, r1, #21
 80049a0:	430a      	orrs	r2, r1
 80049a2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a4:	f7ff f81e 	bl	80039e4 <HAL_GetTick>
 80049a8:	0003      	movs	r3, r0
 80049aa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ac:	e008      	b.n	80049c0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ae:	f7ff f819 	bl	80039e4 <HAL_GetTick>
 80049b2:	0002      	movs	r2, r0
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e061      	b.n	8004a84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049c0:	4b32      	ldr	r3, [pc, #200]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	2380      	movs	r3, #128	@ 0x80
 80049c6:	049b      	lsls	r3, r3, #18
 80049c8:	4013      	ands	r3, r2
 80049ca:	d0f0      	beq.n	80049ae <HAL_RCC_OscConfig+0x53a>
 80049cc:	e059      	b.n	8004a82 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ce:	4b2f      	ldr	r3, [pc, #188]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	4b2e      	ldr	r3, [pc, #184]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 80049d4:	4931      	ldr	r1, [pc, #196]	@ (8004a9c <HAL_RCC_OscConfig+0x628>)
 80049d6:	400a      	ands	r2, r1
 80049d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049da:	f7ff f803 	bl	80039e4 <HAL_GetTick>
 80049de:	0003      	movs	r3, r0
 80049e0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049e4:	f7fe fffe 	bl	80039e4 <HAL_GetTick>
 80049e8:	0002      	movs	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e046      	b.n	8004a84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049f6:	4b25      	ldr	r3, [pc, #148]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	2380      	movs	r3, #128	@ 0x80
 80049fc:	049b      	lsls	r3, r3, #18
 80049fe:	4013      	ands	r3, r2
 8004a00:	d1f0      	bne.n	80049e4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004a02:	4b22      	ldr	r3, [pc, #136]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 8004a04:	68da      	ldr	r2, [r3, #12]
 8004a06:	4b21      	ldr	r3, [pc, #132]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 8004a08:	4926      	ldr	r1, [pc, #152]	@ (8004aa4 <HAL_RCC_OscConfig+0x630>)
 8004a0a:	400a      	ands	r2, r1
 8004a0c:	60da      	str	r2, [r3, #12]
 8004a0e:	e038      	b.n	8004a82 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	69db      	ldr	r3, [r3, #28]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d101      	bne.n	8004a1c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e033      	b.n	8004a84 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8004a8c <HAL_RCC_OscConfig+0x618>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	2203      	movs	r2, #3
 8004a26:	401a      	ands	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d126      	bne.n	8004a7e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	2270      	movs	r2, #112	@ 0x70
 8004a34:	401a      	ands	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d11f      	bne.n	8004a7e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	23fe      	movs	r3, #254	@ 0xfe
 8004a42:	01db      	lsls	r3, r3, #7
 8004a44:	401a      	ands	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a4a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d116      	bne.n	8004a7e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	23f8      	movs	r3, #248	@ 0xf8
 8004a54:	039b      	lsls	r3, r3, #14
 8004a56:	401a      	ands	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d10e      	bne.n	8004a7e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	23e0      	movs	r3, #224	@ 0xe0
 8004a64:	051b      	lsls	r3, r3, #20
 8004a66:	401a      	ands	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d106      	bne.n	8004a7e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	0f5b      	lsrs	r3, r3, #29
 8004a74:	075a      	lsls	r2, r3, #29
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d001      	beq.n	8004a82 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e000      	b.n	8004a84 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	0018      	movs	r0, r3
 8004a86:	46bd      	mov	sp, r7
 8004a88:	b008      	add	sp, #32
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	40021000 	.word	0x40021000
 8004a90:	40007000 	.word	0x40007000
 8004a94:	00001388 	.word	0x00001388
 8004a98:	efffffff 	.word	0xefffffff
 8004a9c:	feffffff 	.word	0xfeffffff
 8004aa0:	11c1808c 	.word	0x11c1808c
 8004aa4:	eefefffc 	.word	0xeefefffc

08004aa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e0e9      	b.n	8004c90 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004abc:	4b76      	ldr	r3, [pc, #472]	@ (8004c98 <HAL_RCC_ClockConfig+0x1f0>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2207      	movs	r2, #7
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d91e      	bls.n	8004b08 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aca:	4b73      	ldr	r3, [pc, #460]	@ (8004c98 <HAL_RCC_ClockConfig+0x1f0>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2207      	movs	r2, #7
 8004ad0:	4393      	bics	r3, r2
 8004ad2:	0019      	movs	r1, r3
 8004ad4:	4b70      	ldr	r3, [pc, #448]	@ (8004c98 <HAL_RCC_ClockConfig+0x1f0>)
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004adc:	f7fe ff82 	bl	80039e4 <HAL_GetTick>
 8004ae0:	0003      	movs	r3, r0
 8004ae2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ae4:	e009      	b.n	8004afa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ae6:	f7fe ff7d 	bl	80039e4 <HAL_GetTick>
 8004aea:	0002      	movs	r2, r0
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	4a6a      	ldr	r2, [pc, #424]	@ (8004c9c <HAL_RCC_ClockConfig+0x1f4>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e0ca      	b.n	8004c90 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004afa:	4b67      	ldr	r3, [pc, #412]	@ (8004c98 <HAL_RCC_ClockConfig+0x1f0>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2207      	movs	r2, #7
 8004b00:	4013      	ands	r3, r2
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d1ee      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2202      	movs	r2, #2
 8004b0e:	4013      	ands	r3, r2
 8004b10:	d015      	beq.n	8004b3e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2204      	movs	r2, #4
 8004b18:	4013      	ands	r3, r2
 8004b1a:	d006      	beq.n	8004b2a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004b1c:	4b60      	ldr	r3, [pc, #384]	@ (8004ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	4b5f      	ldr	r3, [pc, #380]	@ (8004ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8004b22:	21e0      	movs	r1, #224	@ 0xe0
 8004b24:	01c9      	lsls	r1, r1, #7
 8004b26:	430a      	orrs	r2, r1
 8004b28:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b2a:	4b5d      	ldr	r3, [pc, #372]	@ (8004ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	4a5d      	ldr	r2, [pc, #372]	@ (8004ca4 <HAL_RCC_ClockConfig+0x1fc>)
 8004b30:	4013      	ands	r3, r2
 8004b32:	0019      	movs	r1, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	4b59      	ldr	r3, [pc, #356]	@ (8004ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2201      	movs	r2, #1
 8004b44:	4013      	ands	r3, r2
 8004b46:	d057      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d107      	bne.n	8004b60 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b50:	4b53      	ldr	r3, [pc, #332]	@ (8004ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	2380      	movs	r3, #128	@ 0x80
 8004b56:	029b      	lsls	r3, r3, #10
 8004b58:	4013      	ands	r3, r2
 8004b5a:	d12b      	bne.n	8004bb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e097      	b.n	8004c90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d107      	bne.n	8004b78 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b68:	4b4d      	ldr	r3, [pc, #308]	@ (8004ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	2380      	movs	r3, #128	@ 0x80
 8004b6e:	049b      	lsls	r3, r3, #18
 8004b70:	4013      	ands	r3, r2
 8004b72:	d11f      	bne.n	8004bb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e08b      	b.n	8004c90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d107      	bne.n	8004b90 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b80:	4b47      	ldr	r3, [pc, #284]	@ (8004ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	2380      	movs	r3, #128	@ 0x80
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	4013      	ands	r3, r2
 8004b8a:	d113      	bne.n	8004bb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e07f      	b.n	8004c90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	2b03      	cmp	r3, #3
 8004b96:	d106      	bne.n	8004ba6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b98:	4b41      	ldr	r3, [pc, #260]	@ (8004ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8004b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	d108      	bne.n	8004bb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e074      	b.n	8004c90 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ba6:	4b3e      	ldr	r3, [pc, #248]	@ (8004ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8004ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004baa:	2202      	movs	r2, #2
 8004bac:	4013      	ands	r3, r2
 8004bae:	d101      	bne.n	8004bb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e06d      	b.n	8004c90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bb4:	4b3a      	ldr	r3, [pc, #232]	@ (8004ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	2207      	movs	r2, #7
 8004bba:	4393      	bics	r3, r2
 8004bbc:	0019      	movs	r1, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	4b37      	ldr	r3, [pc, #220]	@ (8004ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bc8:	f7fe ff0c 	bl	80039e4 <HAL_GetTick>
 8004bcc:	0003      	movs	r3, r0
 8004bce:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bd0:	e009      	b.n	8004be6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bd2:	f7fe ff07 	bl	80039e4 <HAL_GetTick>
 8004bd6:	0002      	movs	r2, r0
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	4a2f      	ldr	r2, [pc, #188]	@ (8004c9c <HAL_RCC_ClockConfig+0x1f4>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e054      	b.n	8004c90 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004be6:	4b2e      	ldr	r3, [pc, #184]	@ (8004ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	2238      	movs	r2, #56	@ 0x38
 8004bec:	401a      	ands	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d1ec      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bf8:	4b27      	ldr	r3, [pc, #156]	@ (8004c98 <HAL_RCC_ClockConfig+0x1f0>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2207      	movs	r2, #7
 8004bfe:	4013      	ands	r3, r2
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d21e      	bcs.n	8004c44 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c06:	4b24      	ldr	r3, [pc, #144]	@ (8004c98 <HAL_RCC_ClockConfig+0x1f0>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2207      	movs	r2, #7
 8004c0c:	4393      	bics	r3, r2
 8004c0e:	0019      	movs	r1, r3
 8004c10:	4b21      	ldr	r3, [pc, #132]	@ (8004c98 <HAL_RCC_ClockConfig+0x1f0>)
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c18:	f7fe fee4 	bl	80039e4 <HAL_GetTick>
 8004c1c:	0003      	movs	r3, r0
 8004c1e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c20:	e009      	b.n	8004c36 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c22:	f7fe fedf 	bl	80039e4 <HAL_GetTick>
 8004c26:	0002      	movs	r2, r0
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	4a1b      	ldr	r2, [pc, #108]	@ (8004c9c <HAL_RCC_ClockConfig+0x1f4>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e02c      	b.n	8004c90 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c36:	4b18      	ldr	r3, [pc, #96]	@ (8004c98 <HAL_RCC_ClockConfig+0x1f0>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2207      	movs	r2, #7
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d1ee      	bne.n	8004c22 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2204      	movs	r2, #4
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	d009      	beq.n	8004c62 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004c4e:	4b14      	ldr	r3, [pc, #80]	@ (8004ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	4a15      	ldr	r2, [pc, #84]	@ (8004ca8 <HAL_RCC_ClockConfig+0x200>)
 8004c54:	4013      	ands	r3, r2
 8004c56:	0019      	movs	r1, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68da      	ldr	r2, [r3, #12]
 8004c5c:	4b10      	ldr	r3, [pc, #64]	@ (8004ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004c62:	f000 f829 	bl	8004cb8 <HAL_RCC_GetSysClockFreq>
 8004c66:	0001      	movs	r1, r0
 8004c68:	4b0d      	ldr	r3, [pc, #52]	@ (8004ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	0a1b      	lsrs	r3, r3, #8
 8004c6e:	220f      	movs	r2, #15
 8004c70:	401a      	ands	r2, r3
 8004c72:	4b0e      	ldr	r3, [pc, #56]	@ (8004cac <HAL_RCC_ClockConfig+0x204>)
 8004c74:	0092      	lsls	r2, r2, #2
 8004c76:	58d3      	ldr	r3, [r2, r3]
 8004c78:	221f      	movs	r2, #31
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	000a      	movs	r2, r1
 8004c7e:	40da      	lsrs	r2, r3
 8004c80:	4b0b      	ldr	r3, [pc, #44]	@ (8004cb0 <HAL_RCC_ClockConfig+0x208>)
 8004c82:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004c84:	4b0b      	ldr	r3, [pc, #44]	@ (8004cb4 <HAL_RCC_ClockConfig+0x20c>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	0018      	movs	r0, r3
 8004c8a:	f7fe fe4f 	bl	800392c <HAL_InitTick>
 8004c8e:	0003      	movs	r3, r0
}
 8004c90:	0018      	movs	r0, r3
 8004c92:	46bd      	mov	sp, r7
 8004c94:	b004      	add	sp, #16
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	40022000 	.word	0x40022000
 8004c9c:	00001388 	.word	0x00001388
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	fffff0ff 	.word	0xfffff0ff
 8004ca8:	ffff8fff 	.word	0xffff8fff
 8004cac:	08007b3c 	.word	0x08007b3c
 8004cb0:	2000000c 	.word	0x2000000c
 8004cb4:	20000030 	.word	0x20000030

08004cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cbe:	4b3c      	ldr	r3, [pc, #240]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	2238      	movs	r2, #56	@ 0x38
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	d10f      	bne.n	8004ce8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004cc8:	4b39      	ldr	r3, [pc, #228]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	0adb      	lsrs	r3, r3, #11
 8004cce:	2207      	movs	r2, #7
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	409a      	lsls	r2, r3
 8004cd6:	0013      	movs	r3, r2
 8004cd8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004cda:	6839      	ldr	r1, [r7, #0]
 8004cdc:	4835      	ldr	r0, [pc, #212]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004cde:	f7fb fa1b 	bl	8000118 <__udivsi3>
 8004ce2:	0003      	movs	r3, r0
 8004ce4:	613b      	str	r3, [r7, #16]
 8004ce6:	e05d      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ce8:	4b31      	ldr	r3, [pc, #196]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	2238      	movs	r2, #56	@ 0x38
 8004cee:	4013      	ands	r3, r2
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d102      	bne.n	8004cfa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004cf4:	4b30      	ldr	r3, [pc, #192]	@ (8004db8 <HAL_RCC_GetSysClockFreq+0x100>)
 8004cf6:	613b      	str	r3, [r7, #16]
 8004cf8:	e054      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cfa:	4b2d      	ldr	r3, [pc, #180]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	2238      	movs	r2, #56	@ 0x38
 8004d00:	4013      	ands	r3, r2
 8004d02:	2b10      	cmp	r3, #16
 8004d04:	d138      	bne.n	8004d78 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004d06:	4b2a      	ldr	r3, [pc, #168]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	2203      	movs	r2, #3
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d10:	4b27      	ldr	r3, [pc, #156]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	091b      	lsrs	r3, r3, #4
 8004d16:	2207      	movs	r2, #7
 8004d18:	4013      	ands	r3, r2
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2b03      	cmp	r3, #3
 8004d22:	d10d      	bne.n	8004d40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d24:	68b9      	ldr	r1, [r7, #8]
 8004d26:	4824      	ldr	r0, [pc, #144]	@ (8004db8 <HAL_RCC_GetSysClockFreq+0x100>)
 8004d28:	f7fb f9f6 	bl	8000118 <__udivsi3>
 8004d2c:	0003      	movs	r3, r0
 8004d2e:	0019      	movs	r1, r3
 8004d30:	4b1f      	ldr	r3, [pc, #124]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	0a1b      	lsrs	r3, r3, #8
 8004d36:	227f      	movs	r2, #127	@ 0x7f
 8004d38:	4013      	ands	r3, r2
 8004d3a:	434b      	muls	r3, r1
 8004d3c:	617b      	str	r3, [r7, #20]
        break;
 8004d3e:	e00d      	b.n	8004d5c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004d40:	68b9      	ldr	r1, [r7, #8]
 8004d42:	481c      	ldr	r0, [pc, #112]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004d44:	f7fb f9e8 	bl	8000118 <__udivsi3>
 8004d48:	0003      	movs	r3, r0
 8004d4a:	0019      	movs	r1, r3
 8004d4c:	4b18      	ldr	r3, [pc, #96]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	0a1b      	lsrs	r3, r3, #8
 8004d52:	227f      	movs	r2, #127	@ 0x7f
 8004d54:	4013      	ands	r3, r2
 8004d56:	434b      	muls	r3, r1
 8004d58:	617b      	str	r3, [r7, #20]
        break;
 8004d5a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004d5c:	4b14      	ldr	r3, [pc, #80]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	0f5b      	lsrs	r3, r3, #29
 8004d62:	2207      	movs	r2, #7
 8004d64:	4013      	ands	r3, r2
 8004d66:	3301      	adds	r3, #1
 8004d68:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004d6a:	6879      	ldr	r1, [r7, #4]
 8004d6c:	6978      	ldr	r0, [r7, #20]
 8004d6e:	f7fb f9d3 	bl	8000118 <__udivsi3>
 8004d72:	0003      	movs	r3, r0
 8004d74:	613b      	str	r3, [r7, #16]
 8004d76:	e015      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004d78:	4b0d      	ldr	r3, [pc, #52]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	2238      	movs	r2, #56	@ 0x38
 8004d7e:	4013      	ands	r3, r2
 8004d80:	2b20      	cmp	r3, #32
 8004d82:	d103      	bne.n	8004d8c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004d84:	2380      	movs	r3, #128	@ 0x80
 8004d86:	021b      	lsls	r3, r3, #8
 8004d88:	613b      	str	r3, [r7, #16]
 8004d8a:	e00b      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004d8c:	4b08      	ldr	r3, [pc, #32]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	2238      	movs	r2, #56	@ 0x38
 8004d92:	4013      	ands	r3, r2
 8004d94:	2b18      	cmp	r3, #24
 8004d96:	d103      	bne.n	8004da0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004d98:	23fa      	movs	r3, #250	@ 0xfa
 8004d9a:	01db      	lsls	r3, r3, #7
 8004d9c:	613b      	str	r3, [r7, #16]
 8004d9e:	e001      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004da4:	693b      	ldr	r3, [r7, #16]
}
 8004da6:	0018      	movs	r0, r3
 8004da8:	46bd      	mov	sp, r7
 8004daa:	b006      	add	sp, #24
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	46c0      	nop			@ (mov r8, r8)
 8004db0:	40021000 	.word	0x40021000
 8004db4:	00f42400 	.word	0x00f42400
 8004db8:	007a1200 	.word	0x007a1200

08004dbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dc0:	4b02      	ldr	r3, [pc, #8]	@ (8004dcc <HAL_RCC_GetHCLKFreq+0x10>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
}
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	46c0      	nop			@ (mov r8, r8)
 8004dcc:	2000000c 	.word	0x2000000c

08004dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dd0:	b5b0      	push	{r4, r5, r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004dd4:	f7ff fff2 	bl	8004dbc <HAL_RCC_GetHCLKFreq>
 8004dd8:	0004      	movs	r4, r0
 8004dda:	f7ff fb3f 	bl	800445c <LL_RCC_GetAPB1Prescaler>
 8004dde:	0003      	movs	r3, r0
 8004de0:	0b1a      	lsrs	r2, r3, #12
 8004de2:	4b05      	ldr	r3, [pc, #20]	@ (8004df8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004de4:	0092      	lsls	r2, r2, #2
 8004de6:	58d3      	ldr	r3, [r2, r3]
 8004de8:	221f      	movs	r2, #31
 8004dea:	4013      	ands	r3, r2
 8004dec:	40dc      	lsrs	r4, r3
 8004dee:	0023      	movs	r3, r4
}
 8004df0:	0018      	movs	r0, r3
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bdb0      	pop	{r4, r5, r7, pc}
 8004df6:	46c0      	nop			@ (mov r8, r8)
 8004df8:	08007b7c 	.word	0x08007b7c

08004dfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004e04:	2313      	movs	r3, #19
 8004e06:	18fb      	adds	r3, r7, r3
 8004e08:	2200      	movs	r2, #0
 8004e0a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e0c:	2312      	movs	r3, #18
 8004e0e:	18fb      	adds	r3, r7, r3
 8004e10:	2200      	movs	r2, #0
 8004e12:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	2380      	movs	r3, #128	@ 0x80
 8004e1a:	029b      	lsls	r3, r3, #10
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	d100      	bne.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004e20:	e0a3      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e22:	2011      	movs	r0, #17
 8004e24:	183b      	adds	r3, r7, r0
 8004e26:	2200      	movs	r2, #0
 8004e28:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e2a:	4bc3      	ldr	r3, [pc, #780]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e2e:	2380      	movs	r3, #128	@ 0x80
 8004e30:	055b      	lsls	r3, r3, #21
 8004e32:	4013      	ands	r3, r2
 8004e34:	d110      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e36:	4bc0      	ldr	r3, [pc, #768]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e3a:	4bbf      	ldr	r3, [pc, #764]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e3c:	2180      	movs	r1, #128	@ 0x80
 8004e3e:	0549      	lsls	r1, r1, #21
 8004e40:	430a      	orrs	r2, r1
 8004e42:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004e44:	4bbc      	ldr	r3, [pc, #752]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e48:	2380      	movs	r3, #128	@ 0x80
 8004e4a:	055b      	lsls	r3, r3, #21
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	60bb      	str	r3, [r7, #8]
 8004e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e52:	183b      	adds	r3, r7, r0
 8004e54:	2201      	movs	r2, #1
 8004e56:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e58:	4bb8      	ldr	r3, [pc, #736]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	4bb7      	ldr	r3, [pc, #732]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004e5e:	2180      	movs	r1, #128	@ 0x80
 8004e60:	0049      	lsls	r1, r1, #1
 8004e62:	430a      	orrs	r2, r1
 8004e64:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e66:	f7fe fdbd 	bl	80039e4 <HAL_GetTick>
 8004e6a:	0003      	movs	r3, r0
 8004e6c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e6e:	e00b      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e70:	f7fe fdb8 	bl	80039e4 <HAL_GetTick>
 8004e74:	0002      	movs	r2, r0
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d904      	bls.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004e7e:	2313      	movs	r3, #19
 8004e80:	18fb      	adds	r3, r7, r3
 8004e82:	2203      	movs	r2, #3
 8004e84:	701a      	strb	r2, [r3, #0]
        break;
 8004e86:	e005      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e88:	4bac      	ldr	r3, [pc, #688]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	2380      	movs	r3, #128	@ 0x80
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	4013      	ands	r3, r2
 8004e92:	d0ed      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004e94:	2313      	movs	r3, #19
 8004e96:	18fb      	adds	r3, r7, r3
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d154      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e9e:	4ba6      	ldr	r3, [pc, #664]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ea0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ea2:	23c0      	movs	r3, #192	@ 0xc0
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d019      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d014      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004eba:	4b9f      	ldr	r3, [pc, #636]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ebe:	4aa0      	ldr	r2, [pc, #640]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ec4:	4b9c      	ldr	r3, [pc, #624]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ec6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ec8:	4b9b      	ldr	r3, [pc, #620]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004eca:	2180      	movs	r1, #128	@ 0x80
 8004ecc:	0249      	lsls	r1, r1, #9
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ed2:	4b99      	ldr	r3, [pc, #612]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ed4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ed6:	4b98      	ldr	r3, [pc, #608]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ed8:	499a      	ldr	r1, [pc, #616]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004eda:	400a      	ands	r2, r1
 8004edc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ede:	4b96      	ldr	r3, [pc, #600]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	4013      	ands	r3, r2
 8004eea:	d016      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eec:	f7fe fd7a 	bl	80039e4 <HAL_GetTick>
 8004ef0:	0003      	movs	r3, r0
 8004ef2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ef4:	e00c      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ef6:	f7fe fd75 	bl	80039e4 <HAL_GetTick>
 8004efa:	0002      	movs	r2, r0
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	4a91      	ldr	r2, [pc, #580]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d904      	bls.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004f06:	2313      	movs	r3, #19
 8004f08:	18fb      	adds	r3, r7, r3
 8004f0a:	2203      	movs	r2, #3
 8004f0c:	701a      	strb	r2, [r3, #0]
            break;
 8004f0e:	e004      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f10:	4b89      	ldr	r3, [pc, #548]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f14:	2202      	movs	r2, #2
 8004f16:	4013      	ands	r3, r2
 8004f18:	d0ed      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004f1a:	2313      	movs	r3, #19
 8004f1c:	18fb      	adds	r3, r7, r3
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10a      	bne.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f24:	4b84      	ldr	r3, [pc, #528]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f28:	4a85      	ldr	r2, [pc, #532]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	0019      	movs	r1, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f32:	4b81      	ldr	r3, [pc, #516]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f34:	430a      	orrs	r2, r1
 8004f36:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004f38:	e00c      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f3a:	2312      	movs	r3, #18
 8004f3c:	18fb      	adds	r3, r7, r3
 8004f3e:	2213      	movs	r2, #19
 8004f40:	18ba      	adds	r2, r7, r2
 8004f42:	7812      	ldrb	r2, [r2, #0]
 8004f44:	701a      	strb	r2, [r3, #0]
 8004f46:	e005      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f48:	2312      	movs	r3, #18
 8004f4a:	18fb      	adds	r3, r7, r3
 8004f4c:	2213      	movs	r2, #19
 8004f4e:	18ba      	adds	r2, r7, r2
 8004f50:	7812      	ldrb	r2, [r2, #0]
 8004f52:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f54:	2311      	movs	r3, #17
 8004f56:	18fb      	adds	r3, r7, r3
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d105      	bne.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f5e:	4b76      	ldr	r3, [pc, #472]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f62:	4b75      	ldr	r3, [pc, #468]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f64:	4979      	ldr	r1, [pc, #484]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004f66:	400a      	ands	r2, r1
 8004f68:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	4013      	ands	r3, r2
 8004f72:	d009      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f74:	4b70      	ldr	r3, [pc, #448]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f78:	2203      	movs	r2, #3
 8004f7a:	4393      	bics	r3, r2
 8004f7c:	0019      	movs	r1, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	4b6d      	ldr	r3, [pc, #436]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f84:	430a      	orrs	r2, r1
 8004f86:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2202      	movs	r2, #2
 8004f8e:	4013      	ands	r3, r2
 8004f90:	d009      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f92:	4b69      	ldr	r3, [pc, #420]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f96:	220c      	movs	r2, #12
 8004f98:	4393      	bics	r3, r2
 8004f9a:	0019      	movs	r1, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	4b65      	ldr	r3, [pc, #404]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2210      	movs	r2, #16
 8004fac:	4013      	ands	r3, r2
 8004fae:	d009      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fb0:	4b61      	ldr	r3, [pc, #388]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb4:	4a66      	ldr	r2, [pc, #408]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	0019      	movs	r1, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	4b5e      	ldr	r3, [pc, #376]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	2380      	movs	r3, #128	@ 0x80
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4013      	ands	r3, r2
 8004fce:	d009      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fd0:	4b59      	ldr	r3, [pc, #356]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fd4:	4a5f      	ldr	r2, [pc, #380]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	0019      	movs	r1, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	699a      	ldr	r2, [r3, #24]
 8004fde:	4b56      	ldr	r3, [pc, #344]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	2380      	movs	r3, #128	@ 0x80
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	4013      	ands	r3, r2
 8004fee:	d009      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ff0:	4b51      	ldr	r3, [pc, #324]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff4:	4a58      	ldr	r2, [pc, #352]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	0019      	movs	r1, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	69da      	ldr	r2, [r3, #28]
 8004ffe:	4b4e      	ldr	r3, [pc, #312]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005000:	430a      	orrs	r2, r1
 8005002:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2220      	movs	r2, #32
 800500a:	4013      	ands	r3, r2
 800500c:	d009      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800500e:	4b4a      	ldr	r3, [pc, #296]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005012:	4a52      	ldr	r2, [pc, #328]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8005014:	4013      	ands	r3, r2
 8005016:	0019      	movs	r1, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	691a      	ldr	r2, [r3, #16]
 800501c:	4b46      	ldr	r3, [pc, #280]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800501e:	430a      	orrs	r2, r1
 8005020:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	2380      	movs	r3, #128	@ 0x80
 8005028:	01db      	lsls	r3, r3, #7
 800502a:	4013      	ands	r3, r2
 800502c:	d015      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800502e:	4b42      	ldr	r3, [pc, #264]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	0899      	lsrs	r1, r3, #2
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a1a      	ldr	r2, [r3, #32]
 800503a:	4b3f      	ldr	r3, [pc, #252]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800503c:	430a      	orrs	r2, r1
 800503e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a1a      	ldr	r2, [r3, #32]
 8005044:	2380      	movs	r3, #128	@ 0x80
 8005046:	05db      	lsls	r3, r3, #23
 8005048:	429a      	cmp	r2, r3
 800504a:	d106      	bne.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800504c:	4b3a      	ldr	r3, [pc, #232]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800504e:	68da      	ldr	r2, [r3, #12]
 8005050:	4b39      	ldr	r3, [pc, #228]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005052:	2180      	movs	r1, #128	@ 0x80
 8005054:	0249      	lsls	r1, r1, #9
 8005056:	430a      	orrs	r2, r1
 8005058:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	2380      	movs	r3, #128	@ 0x80
 8005060:	031b      	lsls	r3, r3, #12
 8005062:	4013      	ands	r3, r2
 8005064:	d009      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005066:	4b34      	ldr	r3, [pc, #208]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800506a:	2240      	movs	r2, #64	@ 0x40
 800506c:	4393      	bics	r3, r2
 800506e:	0019      	movs	r1, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005074:	4b30      	ldr	r3, [pc, #192]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005076:	430a      	orrs	r2, r1
 8005078:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	2380      	movs	r3, #128	@ 0x80
 8005080:	039b      	lsls	r3, r3, #14
 8005082:	4013      	ands	r3, r2
 8005084:	d016      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005086:	4b2c      	ldr	r3, [pc, #176]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800508a:	4a35      	ldr	r2, [pc, #212]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800508c:	4013      	ands	r3, r2
 800508e:	0019      	movs	r1, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005094:	4b28      	ldr	r3, [pc, #160]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005096:	430a      	orrs	r2, r1
 8005098:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800509e:	2380      	movs	r3, #128	@ 0x80
 80050a0:	03db      	lsls	r3, r3, #15
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d106      	bne.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80050a6:	4b24      	ldr	r3, [pc, #144]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050a8:	68da      	ldr	r2, [r3, #12]
 80050aa:	4b23      	ldr	r3, [pc, #140]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050ac:	2180      	movs	r1, #128	@ 0x80
 80050ae:	0449      	lsls	r1, r1, #17
 80050b0:	430a      	orrs	r2, r1
 80050b2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	2380      	movs	r3, #128	@ 0x80
 80050ba:	03db      	lsls	r3, r3, #15
 80050bc:	4013      	ands	r3, r2
 80050be:	d016      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80050c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050c4:	4a27      	ldr	r2, [pc, #156]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80050c6:	4013      	ands	r3, r2
 80050c8:	0019      	movs	r1, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050ce:	4b1a      	ldr	r3, [pc, #104]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050d0:	430a      	orrs	r2, r1
 80050d2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050d8:	2380      	movs	r3, #128	@ 0x80
 80050da:	045b      	lsls	r3, r3, #17
 80050dc:	429a      	cmp	r2, r3
 80050de:	d106      	bne.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80050e0:	4b15      	ldr	r3, [pc, #84]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050e2:	68da      	ldr	r2, [r3, #12]
 80050e4:	4b14      	ldr	r3, [pc, #80]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050e6:	2180      	movs	r1, #128	@ 0x80
 80050e8:	0449      	lsls	r1, r1, #17
 80050ea:	430a      	orrs	r2, r1
 80050ec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	2380      	movs	r3, #128	@ 0x80
 80050f4:	011b      	lsls	r3, r3, #4
 80050f6:	4013      	ands	r3, r2
 80050f8:	d016      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80050fa:	4b0f      	ldr	r3, [pc, #60]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050fe:	4a1a      	ldr	r2, [pc, #104]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005100:	4013      	ands	r3, r2
 8005102:	0019      	movs	r1, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	695a      	ldr	r2, [r3, #20]
 8005108:	4b0b      	ldr	r3, [pc, #44]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800510a:	430a      	orrs	r2, r1
 800510c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	695a      	ldr	r2, [r3, #20]
 8005112:	2380      	movs	r3, #128	@ 0x80
 8005114:	01db      	lsls	r3, r3, #7
 8005116:	429a      	cmp	r2, r3
 8005118:	d106      	bne.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800511a:	4b07      	ldr	r3, [pc, #28]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	4b06      	ldr	r3, [pc, #24]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005120:	2180      	movs	r1, #128	@ 0x80
 8005122:	0249      	lsls	r1, r1, #9
 8005124:	430a      	orrs	r2, r1
 8005126:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005128:	2312      	movs	r3, #18
 800512a:	18fb      	adds	r3, r7, r3
 800512c:	781b      	ldrb	r3, [r3, #0]
}
 800512e:	0018      	movs	r0, r3
 8005130:	46bd      	mov	sp, r7
 8005132:	b006      	add	sp, #24
 8005134:	bd80      	pop	{r7, pc}
 8005136:	46c0      	nop			@ (mov r8, r8)
 8005138:	40021000 	.word	0x40021000
 800513c:	40007000 	.word	0x40007000
 8005140:	fffffcff 	.word	0xfffffcff
 8005144:	fffeffff 	.word	0xfffeffff
 8005148:	00001388 	.word	0x00001388
 800514c:	efffffff 	.word	0xefffffff
 8005150:	fffff3ff 	.word	0xfffff3ff
 8005154:	fff3ffff 	.word	0xfff3ffff
 8005158:	ffcfffff 	.word	0xffcfffff
 800515c:	ffffcfff 	.word	0xffffcfff
 8005160:	ffbfffff 	.word	0xffbfffff
 8005164:	feffffff 	.word	0xfeffffff
 8005168:	ffff3fff 	.word	0xffff3fff

0800516c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e0a8      	b.n	80052d0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005182:	2b00      	cmp	r3, #0
 8005184:	d109      	bne.n	800519a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	2382      	movs	r3, #130	@ 0x82
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	429a      	cmp	r2, r3
 8005190:	d009      	beq.n	80051a6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	61da      	str	r2, [r3, #28]
 8005198:	e005      	b.n	80051a6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	225d      	movs	r2, #93	@ 0x5d
 80051b0:	5c9b      	ldrb	r3, [r3, r2]
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d107      	bne.n	80051c8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	225c      	movs	r2, #92	@ 0x5c
 80051bc:	2100      	movs	r1, #0
 80051be:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	0018      	movs	r0, r3
 80051c4:	f7fd fc62 	bl	8002a8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	225d      	movs	r2, #93	@ 0x5d
 80051cc:	2102      	movs	r1, #2
 80051ce:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2140      	movs	r1, #64	@ 0x40
 80051dc:	438a      	bics	r2, r1
 80051de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68da      	ldr	r2, [r3, #12]
 80051e4:	23e0      	movs	r3, #224	@ 0xe0
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d902      	bls.n	80051f2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80051ec:	2300      	movs	r3, #0
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	e002      	b.n	80051f8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80051f2:	2380      	movs	r3, #128	@ 0x80
 80051f4:	015b      	lsls	r3, r3, #5
 80051f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68da      	ldr	r2, [r3, #12]
 80051fc:	23f0      	movs	r3, #240	@ 0xf0
 80051fe:	011b      	lsls	r3, r3, #4
 8005200:	429a      	cmp	r2, r3
 8005202:	d008      	beq.n	8005216 <HAL_SPI_Init+0xaa>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68da      	ldr	r2, [r3, #12]
 8005208:	23e0      	movs	r3, #224	@ 0xe0
 800520a:	00db      	lsls	r3, r3, #3
 800520c:	429a      	cmp	r2, r3
 800520e:	d002      	beq.n	8005216 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685a      	ldr	r2, [r3, #4]
 800521a:	2382      	movs	r3, #130	@ 0x82
 800521c:	005b      	lsls	r3, r3, #1
 800521e:	401a      	ands	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6899      	ldr	r1, [r3, #8]
 8005224:	2384      	movs	r3, #132	@ 0x84
 8005226:	021b      	lsls	r3, r3, #8
 8005228:	400b      	ands	r3, r1
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	2102      	movs	r1, #2
 8005232:	400b      	ands	r3, r1
 8005234:	431a      	orrs	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	2101      	movs	r1, #1
 800523c:	400b      	ands	r3, r1
 800523e:	431a      	orrs	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6999      	ldr	r1, [r3, #24]
 8005244:	2380      	movs	r3, #128	@ 0x80
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	400b      	ands	r3, r1
 800524a:	431a      	orrs	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	69db      	ldr	r3, [r3, #28]
 8005250:	2138      	movs	r1, #56	@ 0x38
 8005252:	400b      	ands	r3, r1
 8005254:	431a      	orrs	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	2180      	movs	r1, #128	@ 0x80
 800525c:	400b      	ands	r3, r1
 800525e:	431a      	orrs	r2, r3
 8005260:	0011      	movs	r1, r2
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005266:	2380      	movs	r3, #128	@ 0x80
 8005268:	019b      	lsls	r3, r3, #6
 800526a:	401a      	ands	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	0c1b      	lsrs	r3, r3, #16
 800527a:	2204      	movs	r2, #4
 800527c:	401a      	ands	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005282:	2110      	movs	r1, #16
 8005284:	400b      	ands	r3, r1
 8005286:	431a      	orrs	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800528c:	2108      	movs	r1, #8
 800528e:	400b      	ands	r3, r1
 8005290:	431a      	orrs	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68d9      	ldr	r1, [r3, #12]
 8005296:	23f0      	movs	r3, #240	@ 0xf0
 8005298:	011b      	lsls	r3, r3, #4
 800529a:	400b      	ands	r3, r1
 800529c:	431a      	orrs	r2, r3
 800529e:	0011      	movs	r1, r2
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	2380      	movs	r3, #128	@ 0x80
 80052a4:	015b      	lsls	r3, r3, #5
 80052a6:	401a      	ands	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	69da      	ldr	r2, [r3, #28]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4907      	ldr	r1, [pc, #28]	@ (80052d8 <HAL_SPI_Init+0x16c>)
 80052bc:	400a      	ands	r2, r1
 80052be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	225d      	movs	r2, #93	@ 0x5d
 80052ca:	2101      	movs	r1, #1
 80052cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	0018      	movs	r0, r3
 80052d2:	46bd      	mov	sp, r7
 80052d4:	b004      	add	sp, #16
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	fffff7ff 	.word	0xfffff7ff

080052dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b088      	sub	sp, #32
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	603b      	str	r3, [r7, #0]
 80052e8:	1dbb      	adds	r3, r7, #6
 80052ea:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052ec:	231f      	movs	r3, #31
 80052ee:	18fb      	adds	r3, r7, r3
 80052f0:	2200      	movs	r2, #0
 80052f2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	225c      	movs	r2, #92	@ 0x5c
 80052f8:	5c9b      	ldrb	r3, [r3, r2]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d101      	bne.n	8005302 <HAL_SPI_Transmit+0x26>
 80052fe:	2302      	movs	r3, #2
 8005300:	e147      	b.n	8005592 <HAL_SPI_Transmit+0x2b6>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	225c      	movs	r2, #92	@ 0x5c
 8005306:	2101      	movs	r1, #1
 8005308:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800530a:	f7fe fb6b 	bl	80039e4 <HAL_GetTick>
 800530e:	0003      	movs	r3, r0
 8005310:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005312:	2316      	movs	r3, #22
 8005314:	18fb      	adds	r3, r7, r3
 8005316:	1dba      	adds	r2, r7, #6
 8005318:	8812      	ldrh	r2, [r2, #0]
 800531a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	225d      	movs	r2, #93	@ 0x5d
 8005320:	5c9b      	ldrb	r3, [r3, r2]
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b01      	cmp	r3, #1
 8005326:	d004      	beq.n	8005332 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005328:	231f      	movs	r3, #31
 800532a:	18fb      	adds	r3, r7, r3
 800532c:	2202      	movs	r2, #2
 800532e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005330:	e128      	b.n	8005584 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d003      	beq.n	8005340 <HAL_SPI_Transmit+0x64>
 8005338:	1dbb      	adds	r3, r7, #6
 800533a:	881b      	ldrh	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d104      	bne.n	800534a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005340:	231f      	movs	r3, #31
 8005342:	18fb      	adds	r3, r7, r3
 8005344:	2201      	movs	r2, #1
 8005346:	701a      	strb	r2, [r3, #0]
    goto error;
 8005348:	e11c      	b.n	8005584 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	225d      	movs	r2, #93	@ 0x5d
 800534e:	2103      	movs	r1, #3
 8005350:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	1dba      	adds	r2, r7, #6
 8005362:	8812      	ldrh	r2, [r2, #0]
 8005364:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	1dba      	adds	r2, r7, #6
 800536a:	8812      	ldrh	r2, [r2, #0]
 800536c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2244      	movs	r2, #68	@ 0x44
 8005378:	2100      	movs	r1, #0
 800537a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2246      	movs	r2, #70	@ 0x46
 8005380:	2100      	movs	r1, #0
 8005382:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	2380      	movs	r3, #128	@ 0x80
 8005396:	021b      	lsls	r3, r3, #8
 8005398:	429a      	cmp	r2, r3
 800539a:	d110      	bne.n	80053be <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2140      	movs	r1, #64	@ 0x40
 80053a8:	438a      	bics	r2, r1
 80053aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2180      	movs	r1, #128	@ 0x80
 80053b8:	01c9      	lsls	r1, r1, #7
 80053ba:	430a      	orrs	r2, r1
 80053bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2240      	movs	r2, #64	@ 0x40
 80053c6:	4013      	ands	r3, r2
 80053c8:	2b40      	cmp	r3, #64	@ 0x40
 80053ca:	d007      	beq.n	80053dc <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2140      	movs	r1, #64	@ 0x40
 80053d8:	430a      	orrs	r2, r1
 80053da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	68da      	ldr	r2, [r3, #12]
 80053e0:	23e0      	movs	r3, #224	@ 0xe0
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d952      	bls.n	800548e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d004      	beq.n	80053fa <HAL_SPI_Transmit+0x11e>
 80053f0:	2316      	movs	r3, #22
 80053f2:	18fb      	adds	r3, r7, r3
 80053f4:	881b      	ldrh	r3, [r3, #0]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d143      	bne.n	8005482 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053fe:	881a      	ldrh	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800540a:	1c9a      	adds	r2, r3, #2
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005414:	b29b      	uxth	r3, r3
 8005416:	3b01      	subs	r3, #1
 8005418:	b29a      	uxth	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800541e:	e030      	b.n	8005482 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	2202      	movs	r2, #2
 8005428:	4013      	ands	r3, r2
 800542a:	2b02      	cmp	r3, #2
 800542c:	d112      	bne.n	8005454 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005432:	881a      	ldrh	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800543e:	1c9a      	adds	r2, r3, #2
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005448:	b29b      	uxth	r3, r3
 800544a:	3b01      	subs	r3, #1
 800544c:	b29a      	uxth	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005452:	e016      	b.n	8005482 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005454:	f7fe fac6 	bl	80039e4 <HAL_GetTick>
 8005458:	0002      	movs	r2, r0
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	429a      	cmp	r2, r3
 8005462:	d802      	bhi.n	800546a <HAL_SPI_Transmit+0x18e>
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	3301      	adds	r3, #1
 8005468:	d102      	bne.n	8005470 <HAL_SPI_Transmit+0x194>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d108      	bne.n	8005482 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8005470:	231f      	movs	r3, #31
 8005472:	18fb      	adds	r3, r7, r3
 8005474:	2203      	movs	r2, #3
 8005476:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	225d      	movs	r2, #93	@ 0x5d
 800547c:	2101      	movs	r1, #1
 800547e:	5499      	strb	r1, [r3, r2]
          goto error;
 8005480:	e080      	b.n	8005584 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005486:	b29b      	uxth	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1c9      	bne.n	8005420 <HAL_SPI_Transmit+0x144>
 800548c:	e053      	b.n	8005536 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d004      	beq.n	80054a0 <HAL_SPI_Transmit+0x1c4>
 8005496:	2316      	movs	r3, #22
 8005498:	18fb      	adds	r3, r7, r3
 800549a:	881b      	ldrh	r3, [r3, #0]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d145      	bne.n	800552c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	330c      	adds	r3, #12
 80054aa:	7812      	ldrb	r2, [r2, #0]
 80054ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b2:	1c5a      	adds	r2, r3, #1
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054bc:	b29b      	uxth	r3, r3
 80054be:	3b01      	subs	r3, #1
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80054c6:	e031      	b.n	800552c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	2202      	movs	r2, #2
 80054d0:	4013      	ands	r3, r2
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d113      	bne.n	80054fe <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	330c      	adds	r3, #12
 80054e0:	7812      	ldrb	r2, [r2, #0]
 80054e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e8:	1c5a      	adds	r2, r3, #1
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	3b01      	subs	r3, #1
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80054fc:	e016      	b.n	800552c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054fe:	f7fe fa71 	bl	80039e4 <HAL_GetTick>
 8005502:	0002      	movs	r2, r0
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	429a      	cmp	r2, r3
 800550c:	d802      	bhi.n	8005514 <HAL_SPI_Transmit+0x238>
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	3301      	adds	r3, #1
 8005512:	d102      	bne.n	800551a <HAL_SPI_Transmit+0x23e>
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d108      	bne.n	800552c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800551a:	231f      	movs	r3, #31
 800551c:	18fb      	adds	r3, r7, r3
 800551e:	2203      	movs	r2, #3
 8005520:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	225d      	movs	r2, #93	@ 0x5d
 8005526:	2101      	movs	r1, #1
 8005528:	5499      	strb	r1, [r3, r2]
          goto error;
 800552a:	e02b      	b.n	8005584 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005530:	b29b      	uxth	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1c8      	bne.n	80054c8 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005536:	69ba      	ldr	r2, [r7, #24]
 8005538:	6839      	ldr	r1, [r7, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	0018      	movs	r0, r3
 800553e:	f000 faf5 	bl	8005b2c <SPI_EndRxTxTransaction>
 8005542:	1e03      	subs	r3, r0, #0
 8005544:	d002      	beq.n	800554c <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2220      	movs	r2, #32
 800554a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10a      	bne.n	800556a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005554:	2300      	movs	r3, #0
 8005556:	613b      	str	r3, [r7, #16]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	613b      	str	r3, [r7, #16]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	613b      	str	r3, [r7, #16]
 8005568:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800556e:	2b00      	cmp	r3, #0
 8005570:	d004      	beq.n	800557c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8005572:	231f      	movs	r3, #31
 8005574:	18fb      	adds	r3, r7, r3
 8005576:	2201      	movs	r2, #1
 8005578:	701a      	strb	r2, [r3, #0]
 800557a:	e003      	b.n	8005584 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	225d      	movs	r2, #93	@ 0x5d
 8005580:	2101      	movs	r1, #1
 8005582:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	225c      	movs	r2, #92	@ 0x5c
 8005588:	2100      	movs	r1, #0
 800558a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800558c:	231f      	movs	r3, #31
 800558e:	18fb      	adds	r3, r7, r3
 8005590:	781b      	ldrb	r3, [r3, #0]
}
 8005592:	0018      	movs	r0, r3
 8005594:	46bd      	mov	sp, r7
 8005596:	b008      	add	sp, #32
 8005598:	bd80      	pop	{r7, pc}
	...

0800559c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	1dbb      	adds	r3, r7, #6
 80055a8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055aa:	2317      	movs	r3, #23
 80055ac:	18fb      	adds	r3, r7, r3
 80055ae:	2200      	movs	r2, #0
 80055b0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	225c      	movs	r2, #92	@ 0x5c
 80055b6:	5c9b      	ldrb	r3, [r3, r2]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d101      	bne.n	80055c0 <HAL_SPI_Transmit_DMA+0x24>
 80055bc:	2302      	movs	r3, #2
 80055be:	e0e3      	b.n	8005788 <HAL_SPI_Transmit_DMA+0x1ec>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	225c      	movs	r2, #92	@ 0x5c
 80055c4:	2101      	movs	r1, #1
 80055c6:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	225d      	movs	r2, #93	@ 0x5d
 80055cc:	5c9b      	ldrb	r3, [r3, r2]
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d004      	beq.n	80055de <HAL_SPI_Transmit_DMA+0x42>
  {
    errorcode = HAL_BUSY;
 80055d4:	2317      	movs	r3, #23
 80055d6:	18fb      	adds	r3, r7, r3
 80055d8:	2202      	movs	r2, #2
 80055da:	701a      	strb	r2, [r3, #0]
    goto error;
 80055dc:	e0cd      	b.n	800577a <HAL_SPI_Transmit_DMA+0x1de>
  }

  if ((pData == NULL) || (Size == 0U))
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d003      	beq.n	80055ec <HAL_SPI_Transmit_DMA+0x50>
 80055e4:	1dbb      	adds	r3, r7, #6
 80055e6:	881b      	ldrh	r3, [r3, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d104      	bne.n	80055f6 <HAL_SPI_Transmit_DMA+0x5a>
  {
    errorcode = HAL_ERROR;
 80055ec:	2317      	movs	r3, #23
 80055ee:	18fb      	adds	r3, r7, r3
 80055f0:	2201      	movs	r2, #1
 80055f2:	701a      	strb	r2, [r3, #0]
    goto error;
 80055f4:	e0c1      	b.n	800577a <HAL_SPI_Transmit_DMA+0x1de>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	225d      	movs	r2, #93	@ 0x5d
 80055fa:	2103      	movs	r1, #3
 80055fc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	1dba      	adds	r2, r7, #6
 800560e:	8812      	ldrh	r2, [r2, #0]
 8005610:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	1dba      	adds	r2, r7, #6
 8005616:	8812      	ldrh	r2, [r2, #0]
 8005618:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2244      	movs	r2, #68	@ 0x44
 8005630:	2100      	movs	r1, #0
 8005632:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2246      	movs	r2, #70	@ 0x46
 8005638:	2100      	movs	r1, #0
 800563a:	5299      	strh	r1, [r3, r2]

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	2380      	movs	r3, #128	@ 0x80
 8005642:	021b      	lsls	r3, r3, #8
 8005644:	429a      	cmp	r2, r3
 8005646:	d110      	bne.n	800566a <HAL_SPI_Transmit_DMA+0xce>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2140      	movs	r1, #64	@ 0x40
 8005654:	438a      	bics	r2, r1
 8005656:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2180      	movs	r1, #128	@ 0x80
 8005664:	01c9      	lsls	r1, r1, #7
 8005666:	430a      	orrs	r2, r1
 8005668:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800566e:	4a48      	ldr	r2, [pc, #288]	@ (8005790 <HAL_SPI_Transmit_DMA+0x1f4>)
 8005670:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005676:	4a47      	ldr	r2, [pc, #284]	@ (8005794 <HAL_SPI_Transmit_DMA+0x1f8>)
 8005678:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800567e:	4a46      	ldr	r2, [pc, #280]	@ (8005798 <HAL_SPI_Transmit_DMA+0x1fc>)
 8005680:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005686:	2200      	movs	r2, #0
 8005688:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4941      	ldr	r1, [pc, #260]	@ (800579c <HAL_SPI_Transmit_DMA+0x200>)
 8005696:	400a      	ands	r2, r1
 8005698:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	23e0      	movs	r3, #224	@ 0xe0
 80056a0:	00db      	lsls	r3, r3, #3
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d82f      	bhi.n	8005706 <HAL_SPI_Transmit_DMA+0x16a>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056aa:	699a      	ldr	r2, [r3, #24]
 80056ac:	2380      	movs	r3, #128	@ 0x80
 80056ae:	00db      	lsls	r3, r3, #3
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d128      	bne.n	8005706 <HAL_SPI_Transmit_DMA+0x16a>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	001a      	movs	r2, r3
 80056bc:	2301      	movs	r3, #1
 80056be:	4013      	ands	r3, r2
 80056c0:	d10f      	bne.n	80056e2 <HAL_SPI_Transmit_DMA+0x146>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4933      	ldr	r1, [pc, #204]	@ (800579c <HAL_SPI_Transmit_DMA+0x200>)
 80056ce:	400a      	ands	r2, r1
 80056d0:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	085b      	lsrs	r3, r3, #1
 80056da:	b29a      	uxth	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056e0:	e011      	b.n	8005706 <HAL_SPI_Transmit_DMA+0x16a>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2180      	movs	r1, #128	@ 0x80
 80056ee:	01c9      	lsls	r1, r1, #7
 80056f0:	430a      	orrs	r2, r1
 80056f2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	085b      	lsrs	r3, r3, #1
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	3301      	adds	r3, #1
 8005700:	b29a      	uxth	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800570e:	0019      	movs	r1, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	330c      	adds	r3, #12
 8005716:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800571c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800571e:	f7fe faf7 	bl	8003d10 <HAL_DMA_Start_IT>
 8005722:	1e03      	subs	r3, r0, #0
 8005724:	d00a      	beq.n	800573c <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800572a:	2210      	movs	r2, #16
 800572c:	431a      	orrs	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8005732:	2317      	movs	r3, #23
 8005734:	18fb      	adds	r3, r7, r3
 8005736:	2201      	movs	r2, #1
 8005738:	701a      	strb	r2, [r3, #0]

    goto error;
 800573a:	e01e      	b.n	800577a <HAL_SPI_Transmit_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2240      	movs	r2, #64	@ 0x40
 8005744:	4013      	ands	r3, r2
 8005746:	2b40      	cmp	r3, #64	@ 0x40
 8005748:	d007      	beq.n	800575a <HAL_SPI_Transmit_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2140      	movs	r1, #64	@ 0x40
 8005756:	430a      	orrs	r2, r1
 8005758:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2120      	movs	r1, #32
 8005766:	430a      	orrs	r2, r1
 8005768:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	685a      	ldr	r2, [r3, #4]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2102      	movs	r1, #2
 8005776:	430a      	orrs	r2, r1
 8005778:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	225c      	movs	r2, #92	@ 0x5c
 800577e:	2100      	movs	r1, #0
 8005780:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005782:	2317      	movs	r3, #23
 8005784:	18fb      	adds	r3, r7, r3
 8005786:	781b      	ldrb	r3, [r3, #0]
}
 8005788:	0018      	movs	r0, r3
 800578a:	46bd      	mov	sp, r7
 800578c:	b006      	add	sp, #24
 800578e:	bd80      	pop	{r7, pc}
 8005790:	0800586d 	.word	0x0800586d
 8005794:	080057c1 	.word	0x080057c1
 8005798:	0800588b 	.word	0x0800588b
 800579c:	ffffbfff 	.word	0xffffbfff

080057a0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80057a8:	46c0      	nop			@ (mov r8, r8)
 80057aa:	46bd      	mov	sp, r7
 80057ac:	b002      	add	sp, #8
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80057b8:	46c0      	nop			@ (mov r8, r8)
 80057ba:	46bd      	mov	sp, r7
 80057bc:	b002      	add	sp, #8
 80057be:	bd80      	pop	{r7, pc}

080057c0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057cc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057ce:	f7fe f909 	bl	80039e4 <HAL_GetTick>
 80057d2:	0003      	movs	r3, r0
 80057d4:	613b      	str	r3, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2220      	movs	r2, #32
 80057de:	4013      	ands	r3, r2
 80057e0:	2b20      	cmp	r3, #32
 80057e2:	d03c      	beq.n	800585e <SPI_DMATransmitCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2120      	movs	r1, #32
 80057f0:	438a      	bics	r2, r1
 80057f2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685a      	ldr	r2, [r3, #4]
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2102      	movs	r1, #2
 8005800:	438a      	bics	r2, r1
 8005802:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	2164      	movs	r1, #100	@ 0x64
 800580a:	0018      	movs	r0, r3
 800580c:	f000 f98e 	bl	8005b2c <SPI_EndRxTxTransaction>
 8005810:	1e03      	subs	r3, r0, #0
 8005812:	d005      	beq.n	8005820 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005818:	2220      	movs	r2, #32
 800581a:	431a      	orrs	r2, r3
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10a      	bne.n	800583e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005828:	2300      	movs	r3, #0
 800582a:	60fb      	str	r3, [r7, #12]
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	60fb      	str	r3, [r7, #12]
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	60fb      	str	r3, [r7, #12]
 800583c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2200      	movs	r2, #0
 8005842:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	225d      	movs	r2, #93	@ 0x5d
 8005848:	2101      	movs	r1, #1
 800584a:	5499      	strb	r1, [r3, r2]

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005850:	2b00      	cmp	r3, #0
 8005852:	d004      	beq.n	800585e <SPI_DMATransmitCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	0018      	movs	r0, r3
 8005858:	f7ff ffaa 	bl	80057b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800585c:	e003      	b.n	8005866 <SPI_DMATransmitCplt+0xa6>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	0018      	movs	r0, r3
 8005862:	f7fc fabd 	bl	8001de0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005866:	46bd      	mov	sp, r7
 8005868:	b006      	add	sp, #24
 800586a:	bd80      	pop	{r7, pc}

0800586c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005878:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	0018      	movs	r0, r3
 800587e:	f7ff ff8f 	bl	80057a0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005882:	46c0      	nop			@ (mov r8, r8)
 8005884:	46bd      	mov	sp, r7
 8005886:	b004      	add	sp, #16
 8005888:	bd80      	pop	{r7, pc}

0800588a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b084      	sub	sp, #16
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005896:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2103      	movs	r1, #3
 80058a4:	438a      	bics	r2, r1
 80058a6:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058ac:	2210      	movs	r2, #16
 80058ae:	431a      	orrs	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	225d      	movs	r2, #93	@ 0x5d
 80058b8:	2101      	movs	r1, #1
 80058ba:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	0018      	movs	r0, r3
 80058c0:	f7ff ff76 	bl	80057b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80058c4:	46c0      	nop			@ (mov r8, r8)
 80058c6:	46bd      	mov	sp, r7
 80058c8:	b004      	add	sp, #16
 80058ca:	bd80      	pop	{r7, pc}

080058cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b088      	sub	sp, #32
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	603b      	str	r3, [r7, #0]
 80058d8:	1dfb      	adds	r3, r7, #7
 80058da:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058dc:	f7fe f882 	bl	80039e4 <HAL_GetTick>
 80058e0:	0002      	movs	r2, r0
 80058e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e4:	1a9b      	subs	r3, r3, r2
 80058e6:	683a      	ldr	r2, [r7, #0]
 80058e8:	18d3      	adds	r3, r2, r3
 80058ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058ec:	f7fe f87a 	bl	80039e4 <HAL_GetTick>
 80058f0:	0003      	movs	r3, r0
 80058f2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058f4:	4b3a      	ldr	r3, [pc, #232]	@ (80059e0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	015b      	lsls	r3, r3, #5
 80058fa:	0d1b      	lsrs	r3, r3, #20
 80058fc:	69fa      	ldr	r2, [r7, #28]
 80058fe:	4353      	muls	r3, r2
 8005900:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005902:	e058      	b.n	80059b6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	3301      	adds	r3, #1
 8005908:	d055      	beq.n	80059b6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800590a:	f7fe f86b 	bl	80039e4 <HAL_GetTick>
 800590e:	0002      	movs	r2, r0
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	69fa      	ldr	r2, [r7, #28]
 8005916:	429a      	cmp	r2, r3
 8005918:	d902      	bls.n	8005920 <SPI_WaitFlagStateUntilTimeout+0x54>
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d142      	bne.n	80059a6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	21e0      	movs	r1, #224	@ 0xe0
 800592c:	438a      	bics	r2, r1
 800592e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	2382      	movs	r3, #130	@ 0x82
 8005936:	005b      	lsls	r3, r3, #1
 8005938:	429a      	cmp	r2, r3
 800593a:	d113      	bne.n	8005964 <SPI_WaitFlagStateUntilTimeout+0x98>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	2380      	movs	r3, #128	@ 0x80
 8005942:	021b      	lsls	r3, r3, #8
 8005944:	429a      	cmp	r2, r3
 8005946:	d005      	beq.n	8005954 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	689a      	ldr	r2, [r3, #8]
 800594c:	2380      	movs	r3, #128	@ 0x80
 800594e:	00db      	lsls	r3, r3, #3
 8005950:	429a      	cmp	r2, r3
 8005952:	d107      	bne.n	8005964 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2140      	movs	r1, #64	@ 0x40
 8005960:	438a      	bics	r2, r1
 8005962:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005968:	2380      	movs	r3, #128	@ 0x80
 800596a:	019b      	lsls	r3, r3, #6
 800596c:	429a      	cmp	r2, r3
 800596e:	d110      	bne.n	8005992 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	491a      	ldr	r1, [pc, #104]	@ (80059e4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800597c:	400a      	ands	r2, r1
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2180      	movs	r1, #128	@ 0x80
 800598c:	0189      	lsls	r1, r1, #6
 800598e:	430a      	orrs	r2, r1
 8005990:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	225d      	movs	r2, #93	@ 0x5d
 8005996:	2101      	movs	r1, #1
 8005998:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	225c      	movs	r2, #92	@ 0x5c
 800599e:	2100      	movs	r1, #0
 80059a0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e017      	b.n	80059d6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80059ac:	2300      	movs	r3, #0
 80059ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	4013      	ands	r3, r2
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	425a      	negs	r2, r3
 80059c6:	4153      	adcs	r3, r2
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	001a      	movs	r2, r3
 80059cc:	1dfb      	adds	r3, r7, #7
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d197      	bne.n	8005904 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	0018      	movs	r0, r3
 80059d8:	46bd      	mov	sp, r7
 80059da:	b008      	add	sp, #32
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	46c0      	nop			@ (mov r8, r8)
 80059e0:	2000000c 	.word	0x2000000c
 80059e4:	ffffdfff 	.word	0xffffdfff

080059e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b08a      	sub	sp, #40	@ 0x28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
 80059f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80059f6:	2317      	movs	r3, #23
 80059f8:	18fb      	adds	r3, r7, r3
 80059fa:	2200      	movs	r2, #0
 80059fc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80059fe:	f7fd fff1 	bl	80039e4 <HAL_GetTick>
 8005a02:	0002      	movs	r2, r0
 8005a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a06:	1a9b      	subs	r3, r3, r2
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	18d3      	adds	r3, r2, r3
 8005a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005a0e:	f7fd ffe9 	bl	80039e4 <HAL_GetTick>
 8005a12:	0003      	movs	r3, r0
 8005a14:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	330c      	adds	r3, #12
 8005a1c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005a1e:	4b41      	ldr	r3, [pc, #260]	@ (8005b24 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	0013      	movs	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	189b      	adds	r3, r3, r2
 8005a28:	00da      	lsls	r2, r3, #3
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	0d1b      	lsrs	r3, r3, #20
 8005a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a30:	4353      	muls	r3, r2
 8005a32:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005a34:	e068      	b.n	8005b08 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	23c0      	movs	r3, #192	@ 0xc0
 8005a3a:	00db      	lsls	r3, r3, #3
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d10a      	bne.n	8005a56 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d107      	bne.n	8005a56 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	b2da      	uxtb	r2, r3
 8005a4c:	2117      	movs	r1, #23
 8005a4e:	187b      	adds	r3, r7, r1
 8005a50:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005a52:	187b      	adds	r3, r7, r1
 8005a54:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	3301      	adds	r3, #1
 8005a5a:	d055      	beq.n	8005b08 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a5c:	f7fd ffc2 	bl	80039e4 <HAL_GetTick>
 8005a60:	0002      	movs	r2, r0
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d902      	bls.n	8005a72 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d142      	bne.n	8005af8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	21e0      	movs	r1, #224	@ 0xe0
 8005a7e:	438a      	bics	r2, r1
 8005a80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	2382      	movs	r3, #130	@ 0x82
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d113      	bne.n	8005ab6 <SPI_WaitFifoStateUntilTimeout+0xce>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	689a      	ldr	r2, [r3, #8]
 8005a92:	2380      	movs	r3, #128	@ 0x80
 8005a94:	021b      	lsls	r3, r3, #8
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d005      	beq.n	8005aa6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	689a      	ldr	r2, [r3, #8]
 8005a9e:	2380      	movs	r3, #128	@ 0x80
 8005aa0:	00db      	lsls	r3, r3, #3
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d107      	bne.n	8005ab6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2140      	movs	r1, #64	@ 0x40
 8005ab2:	438a      	bics	r2, r1
 8005ab4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005aba:	2380      	movs	r3, #128	@ 0x80
 8005abc:	019b      	lsls	r3, r3, #6
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d110      	bne.n	8005ae4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4916      	ldr	r1, [pc, #88]	@ (8005b28 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005ace:	400a      	ands	r2, r1
 8005ad0:	601a      	str	r2, [r3, #0]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2180      	movs	r1, #128	@ 0x80
 8005ade:	0189      	lsls	r1, r1, #6
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	225d      	movs	r2, #93	@ 0x5d
 8005ae8:	2101      	movs	r1, #1
 8005aea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	225c      	movs	r2, #92	@ 0x5c
 8005af0:	2100      	movs	r1, #0
 8005af2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e010      	b.n	8005b1a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	3b01      	subs	r3, #1
 8005b06:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	4013      	ands	r3, r2
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d18e      	bne.n	8005a36 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	0018      	movs	r0, r3
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	b00a      	add	sp, #40	@ 0x28
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	46c0      	nop			@ (mov r8, r8)
 8005b24:	2000000c 	.word	0x2000000c
 8005b28:	ffffdfff 	.word	0xffffdfff

08005b2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b086      	sub	sp, #24
 8005b30:	af02      	add	r7, sp, #8
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	23c0      	movs	r3, #192	@ 0xc0
 8005b3c:	0159      	lsls	r1, r3, #5
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	0013      	movs	r3, r2
 8005b46:	2200      	movs	r2, #0
 8005b48:	f7ff ff4e 	bl	80059e8 <SPI_WaitFifoStateUntilTimeout>
 8005b4c:	1e03      	subs	r3, r0, #0
 8005b4e:	d007      	beq.n	8005b60 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b54:	2220      	movs	r2, #32
 8005b56:	431a      	orrs	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e027      	b.n	8005bb0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	0013      	movs	r3, r2
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	2180      	movs	r1, #128	@ 0x80
 8005b6e:	f7ff fead 	bl	80058cc <SPI_WaitFlagStateUntilTimeout>
 8005b72:	1e03      	subs	r3, r0, #0
 8005b74:	d007      	beq.n	8005b86 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e014      	b.n	8005bb0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	23c0      	movs	r3, #192	@ 0xc0
 8005b8a:	00d9      	lsls	r1, r3, #3
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	0013      	movs	r3, r2
 8005b94:	2200      	movs	r2, #0
 8005b96:	f7ff ff27 	bl	80059e8 <SPI_WaitFifoStateUntilTimeout>
 8005b9a:	1e03      	subs	r3, r0, #0
 8005b9c:	d007      	beq.n	8005bae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e000      	b.n	8005bb0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	0018      	movs	r0, r3
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	b004      	add	sp, #16
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d101      	bne.n	8005bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e046      	b.n	8005c58 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2288      	movs	r2, #136	@ 0x88
 8005bce:	589b      	ldr	r3, [r3, r2]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d107      	bne.n	8005be4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2284      	movs	r2, #132	@ 0x84
 8005bd8:	2100      	movs	r1, #0
 8005bda:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	0018      	movs	r0, r3
 8005be0:	f7fc ffcc 	bl	8002b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2288      	movs	r2, #136	@ 0x88
 8005be8:	2124      	movs	r1, #36	@ 0x24
 8005bea:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	438a      	bics	r2, r1
 8005bfa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d003      	beq.n	8005c0c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	0018      	movs	r0, r3
 8005c08:	f000 faea 	bl	80061e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	0018      	movs	r0, r3
 8005c10:	f000 f828 	bl	8005c64 <UART_SetConfig>
 8005c14:	0003      	movs	r3, r0
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d101      	bne.n	8005c1e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e01c      	b.n	8005c58 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	490d      	ldr	r1, [pc, #52]	@ (8005c60 <HAL_UART_Init+0xa8>)
 8005c2a:	400a      	ands	r2, r1
 8005c2c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689a      	ldr	r2, [r3, #8]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	212a      	movs	r1, #42	@ 0x2a
 8005c3a:	438a      	bics	r2, r1
 8005c3c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2101      	movs	r1, #1
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	0018      	movs	r0, r3
 8005c52:	f000 fb79 	bl	8006348 <UART_CheckIdleState>
 8005c56:	0003      	movs	r3, r0
}
 8005c58:	0018      	movs	r0, r3
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	b002      	add	sp, #8
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	ffffb7ff 	.word	0xffffb7ff

08005c64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c64:	b5b0      	push	{r4, r5, r7, lr}
 8005c66:	b090      	sub	sp, #64	@ 0x40
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c6c:	231a      	movs	r3, #26
 8005c6e:	2220      	movs	r2, #32
 8005c70:	189b      	adds	r3, r3, r2
 8005c72:	19db      	adds	r3, r3, r7
 8005c74:	2200      	movs	r2, #0
 8005c76:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	431a      	orrs	r2, r3
 8005c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	431a      	orrs	r2, r3
 8005c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8a:	69db      	ldr	r3, [r3, #28]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4aaf      	ldr	r2, [pc, #700]	@ (8005f54 <UART_SetConfig+0x2f0>)
 8005c98:	4013      	ands	r3, r2
 8005c9a:	0019      	movs	r1, r3
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ca2:	430b      	orrs	r3, r1
 8005ca4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	4aaa      	ldr	r2, [pc, #680]	@ (8005f58 <UART_SetConfig+0x2f4>)
 8005cae:	4013      	ands	r3, r2
 8005cb0:	0018      	movs	r0, r3
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb4:	68d9      	ldr	r1, [r3, #12]
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	0003      	movs	r3, r0
 8005cbc:	430b      	orrs	r3, r1
 8005cbe:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4aa4      	ldr	r2, [pc, #656]	@ (8005f5c <UART_SetConfig+0x2f8>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d004      	beq.n	8005cda <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd2:	6a1b      	ldr	r3, [r3, #32]
 8005cd4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	4a9f      	ldr	r2, [pc, #636]	@ (8005f60 <UART_SetConfig+0x2fc>)
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	0019      	movs	r1, r3
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cec:	430b      	orrs	r3, r1
 8005cee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf6:	220f      	movs	r2, #15
 8005cf8:	4393      	bics	r3, r2
 8005cfa:	0018      	movs	r0, r3
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	0003      	movs	r3, r0
 8005d06:	430b      	orrs	r3, r1
 8005d08:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a95      	ldr	r2, [pc, #596]	@ (8005f64 <UART_SetConfig+0x300>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d131      	bne.n	8005d78 <UART_SetConfig+0x114>
 8005d14:	4b94      	ldr	r3, [pc, #592]	@ (8005f68 <UART_SetConfig+0x304>)
 8005d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d18:	2203      	movs	r2, #3
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	2b03      	cmp	r3, #3
 8005d1e:	d01d      	beq.n	8005d5c <UART_SetConfig+0xf8>
 8005d20:	d823      	bhi.n	8005d6a <UART_SetConfig+0x106>
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d00c      	beq.n	8005d40 <UART_SetConfig+0xdc>
 8005d26:	d820      	bhi.n	8005d6a <UART_SetConfig+0x106>
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d002      	beq.n	8005d32 <UART_SetConfig+0xce>
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d00e      	beq.n	8005d4e <UART_SetConfig+0xea>
 8005d30:	e01b      	b.n	8005d6a <UART_SetConfig+0x106>
 8005d32:	231b      	movs	r3, #27
 8005d34:	2220      	movs	r2, #32
 8005d36:	189b      	adds	r3, r3, r2
 8005d38:	19db      	adds	r3, r3, r7
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	701a      	strb	r2, [r3, #0]
 8005d3e:	e0b4      	b.n	8005eaa <UART_SetConfig+0x246>
 8005d40:	231b      	movs	r3, #27
 8005d42:	2220      	movs	r2, #32
 8005d44:	189b      	adds	r3, r3, r2
 8005d46:	19db      	adds	r3, r3, r7
 8005d48:	2202      	movs	r2, #2
 8005d4a:	701a      	strb	r2, [r3, #0]
 8005d4c:	e0ad      	b.n	8005eaa <UART_SetConfig+0x246>
 8005d4e:	231b      	movs	r3, #27
 8005d50:	2220      	movs	r2, #32
 8005d52:	189b      	adds	r3, r3, r2
 8005d54:	19db      	adds	r3, r3, r7
 8005d56:	2204      	movs	r2, #4
 8005d58:	701a      	strb	r2, [r3, #0]
 8005d5a:	e0a6      	b.n	8005eaa <UART_SetConfig+0x246>
 8005d5c:	231b      	movs	r3, #27
 8005d5e:	2220      	movs	r2, #32
 8005d60:	189b      	adds	r3, r3, r2
 8005d62:	19db      	adds	r3, r3, r7
 8005d64:	2208      	movs	r2, #8
 8005d66:	701a      	strb	r2, [r3, #0]
 8005d68:	e09f      	b.n	8005eaa <UART_SetConfig+0x246>
 8005d6a:	231b      	movs	r3, #27
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	189b      	adds	r3, r3, r2
 8005d70:	19db      	adds	r3, r3, r7
 8005d72:	2210      	movs	r2, #16
 8005d74:	701a      	strb	r2, [r3, #0]
 8005d76:	e098      	b.n	8005eaa <UART_SetConfig+0x246>
 8005d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a7b      	ldr	r2, [pc, #492]	@ (8005f6c <UART_SetConfig+0x308>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d131      	bne.n	8005de6 <UART_SetConfig+0x182>
 8005d82:	4b79      	ldr	r3, [pc, #484]	@ (8005f68 <UART_SetConfig+0x304>)
 8005d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d86:	220c      	movs	r2, #12
 8005d88:	4013      	ands	r3, r2
 8005d8a:	2b0c      	cmp	r3, #12
 8005d8c:	d01d      	beq.n	8005dca <UART_SetConfig+0x166>
 8005d8e:	d823      	bhi.n	8005dd8 <UART_SetConfig+0x174>
 8005d90:	2b08      	cmp	r3, #8
 8005d92:	d00c      	beq.n	8005dae <UART_SetConfig+0x14a>
 8005d94:	d820      	bhi.n	8005dd8 <UART_SetConfig+0x174>
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d002      	beq.n	8005da0 <UART_SetConfig+0x13c>
 8005d9a:	2b04      	cmp	r3, #4
 8005d9c:	d00e      	beq.n	8005dbc <UART_SetConfig+0x158>
 8005d9e:	e01b      	b.n	8005dd8 <UART_SetConfig+0x174>
 8005da0:	231b      	movs	r3, #27
 8005da2:	2220      	movs	r2, #32
 8005da4:	189b      	adds	r3, r3, r2
 8005da6:	19db      	adds	r3, r3, r7
 8005da8:	2200      	movs	r2, #0
 8005daa:	701a      	strb	r2, [r3, #0]
 8005dac:	e07d      	b.n	8005eaa <UART_SetConfig+0x246>
 8005dae:	231b      	movs	r3, #27
 8005db0:	2220      	movs	r2, #32
 8005db2:	189b      	adds	r3, r3, r2
 8005db4:	19db      	adds	r3, r3, r7
 8005db6:	2202      	movs	r2, #2
 8005db8:	701a      	strb	r2, [r3, #0]
 8005dba:	e076      	b.n	8005eaa <UART_SetConfig+0x246>
 8005dbc:	231b      	movs	r3, #27
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	189b      	adds	r3, r3, r2
 8005dc2:	19db      	adds	r3, r3, r7
 8005dc4:	2204      	movs	r2, #4
 8005dc6:	701a      	strb	r2, [r3, #0]
 8005dc8:	e06f      	b.n	8005eaa <UART_SetConfig+0x246>
 8005dca:	231b      	movs	r3, #27
 8005dcc:	2220      	movs	r2, #32
 8005dce:	189b      	adds	r3, r3, r2
 8005dd0:	19db      	adds	r3, r3, r7
 8005dd2:	2208      	movs	r2, #8
 8005dd4:	701a      	strb	r2, [r3, #0]
 8005dd6:	e068      	b.n	8005eaa <UART_SetConfig+0x246>
 8005dd8:	231b      	movs	r3, #27
 8005dda:	2220      	movs	r2, #32
 8005ddc:	189b      	adds	r3, r3, r2
 8005dde:	19db      	adds	r3, r3, r7
 8005de0:	2210      	movs	r2, #16
 8005de2:	701a      	strb	r2, [r3, #0]
 8005de4:	e061      	b.n	8005eaa <UART_SetConfig+0x246>
 8005de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a61      	ldr	r2, [pc, #388]	@ (8005f70 <UART_SetConfig+0x30c>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d106      	bne.n	8005dfe <UART_SetConfig+0x19a>
 8005df0:	231b      	movs	r3, #27
 8005df2:	2220      	movs	r2, #32
 8005df4:	189b      	adds	r3, r3, r2
 8005df6:	19db      	adds	r3, r3, r7
 8005df8:	2200      	movs	r2, #0
 8005dfa:	701a      	strb	r2, [r3, #0]
 8005dfc:	e055      	b.n	8005eaa <UART_SetConfig+0x246>
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a5c      	ldr	r2, [pc, #368]	@ (8005f74 <UART_SetConfig+0x310>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d106      	bne.n	8005e16 <UART_SetConfig+0x1b2>
 8005e08:	231b      	movs	r3, #27
 8005e0a:	2220      	movs	r2, #32
 8005e0c:	189b      	adds	r3, r3, r2
 8005e0e:	19db      	adds	r3, r3, r7
 8005e10:	2200      	movs	r2, #0
 8005e12:	701a      	strb	r2, [r3, #0]
 8005e14:	e049      	b.n	8005eaa <UART_SetConfig+0x246>
 8005e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a50      	ldr	r2, [pc, #320]	@ (8005f5c <UART_SetConfig+0x2f8>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d13e      	bne.n	8005e9e <UART_SetConfig+0x23a>
 8005e20:	4b51      	ldr	r3, [pc, #324]	@ (8005f68 <UART_SetConfig+0x304>)
 8005e22:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e24:	23c0      	movs	r3, #192	@ 0xc0
 8005e26:	011b      	lsls	r3, r3, #4
 8005e28:	4013      	ands	r3, r2
 8005e2a:	22c0      	movs	r2, #192	@ 0xc0
 8005e2c:	0112      	lsls	r2, r2, #4
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d027      	beq.n	8005e82 <UART_SetConfig+0x21e>
 8005e32:	22c0      	movs	r2, #192	@ 0xc0
 8005e34:	0112      	lsls	r2, r2, #4
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d82a      	bhi.n	8005e90 <UART_SetConfig+0x22c>
 8005e3a:	2280      	movs	r2, #128	@ 0x80
 8005e3c:	0112      	lsls	r2, r2, #4
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d011      	beq.n	8005e66 <UART_SetConfig+0x202>
 8005e42:	2280      	movs	r2, #128	@ 0x80
 8005e44:	0112      	lsls	r2, r2, #4
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d822      	bhi.n	8005e90 <UART_SetConfig+0x22c>
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d004      	beq.n	8005e58 <UART_SetConfig+0x1f4>
 8005e4e:	2280      	movs	r2, #128	@ 0x80
 8005e50:	00d2      	lsls	r2, r2, #3
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d00e      	beq.n	8005e74 <UART_SetConfig+0x210>
 8005e56:	e01b      	b.n	8005e90 <UART_SetConfig+0x22c>
 8005e58:	231b      	movs	r3, #27
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	189b      	adds	r3, r3, r2
 8005e5e:	19db      	adds	r3, r3, r7
 8005e60:	2200      	movs	r2, #0
 8005e62:	701a      	strb	r2, [r3, #0]
 8005e64:	e021      	b.n	8005eaa <UART_SetConfig+0x246>
 8005e66:	231b      	movs	r3, #27
 8005e68:	2220      	movs	r2, #32
 8005e6a:	189b      	adds	r3, r3, r2
 8005e6c:	19db      	adds	r3, r3, r7
 8005e6e:	2202      	movs	r2, #2
 8005e70:	701a      	strb	r2, [r3, #0]
 8005e72:	e01a      	b.n	8005eaa <UART_SetConfig+0x246>
 8005e74:	231b      	movs	r3, #27
 8005e76:	2220      	movs	r2, #32
 8005e78:	189b      	adds	r3, r3, r2
 8005e7a:	19db      	adds	r3, r3, r7
 8005e7c:	2204      	movs	r2, #4
 8005e7e:	701a      	strb	r2, [r3, #0]
 8005e80:	e013      	b.n	8005eaa <UART_SetConfig+0x246>
 8005e82:	231b      	movs	r3, #27
 8005e84:	2220      	movs	r2, #32
 8005e86:	189b      	adds	r3, r3, r2
 8005e88:	19db      	adds	r3, r3, r7
 8005e8a:	2208      	movs	r2, #8
 8005e8c:	701a      	strb	r2, [r3, #0]
 8005e8e:	e00c      	b.n	8005eaa <UART_SetConfig+0x246>
 8005e90:	231b      	movs	r3, #27
 8005e92:	2220      	movs	r2, #32
 8005e94:	189b      	adds	r3, r3, r2
 8005e96:	19db      	adds	r3, r3, r7
 8005e98:	2210      	movs	r2, #16
 8005e9a:	701a      	strb	r2, [r3, #0]
 8005e9c:	e005      	b.n	8005eaa <UART_SetConfig+0x246>
 8005e9e:	231b      	movs	r3, #27
 8005ea0:	2220      	movs	r2, #32
 8005ea2:	189b      	adds	r3, r3, r2
 8005ea4:	19db      	adds	r3, r3, r7
 8005ea6:	2210      	movs	r2, #16
 8005ea8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a2b      	ldr	r2, [pc, #172]	@ (8005f5c <UART_SetConfig+0x2f8>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d000      	beq.n	8005eb6 <UART_SetConfig+0x252>
 8005eb4:	e0a9      	b.n	800600a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005eb6:	231b      	movs	r3, #27
 8005eb8:	2220      	movs	r2, #32
 8005eba:	189b      	adds	r3, r3, r2
 8005ebc:	19db      	adds	r3, r3, r7
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	2b08      	cmp	r3, #8
 8005ec2:	d015      	beq.n	8005ef0 <UART_SetConfig+0x28c>
 8005ec4:	dc18      	bgt.n	8005ef8 <UART_SetConfig+0x294>
 8005ec6:	2b04      	cmp	r3, #4
 8005ec8:	d00d      	beq.n	8005ee6 <UART_SetConfig+0x282>
 8005eca:	dc15      	bgt.n	8005ef8 <UART_SetConfig+0x294>
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <UART_SetConfig+0x272>
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d005      	beq.n	8005ee0 <UART_SetConfig+0x27c>
 8005ed4:	e010      	b.n	8005ef8 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ed6:	f7fe ff7b 	bl	8004dd0 <HAL_RCC_GetPCLK1Freq>
 8005eda:	0003      	movs	r3, r0
 8005edc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ede:	e014      	b.n	8005f0a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ee0:	4b25      	ldr	r3, [pc, #148]	@ (8005f78 <UART_SetConfig+0x314>)
 8005ee2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ee4:	e011      	b.n	8005f0a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ee6:	f7fe fee7 	bl	8004cb8 <HAL_RCC_GetSysClockFreq>
 8005eea:	0003      	movs	r3, r0
 8005eec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005eee:	e00c      	b.n	8005f0a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ef0:	2380      	movs	r3, #128	@ 0x80
 8005ef2:	021b      	lsls	r3, r3, #8
 8005ef4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ef6:	e008      	b.n	8005f0a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8005efc:	231a      	movs	r3, #26
 8005efe:	2220      	movs	r2, #32
 8005f00:	189b      	adds	r3, r3, r2
 8005f02:	19db      	adds	r3, r3, r7
 8005f04:	2201      	movs	r2, #1
 8005f06:	701a      	strb	r2, [r3, #0]
        break;
 8005f08:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d100      	bne.n	8005f12 <UART_SetConfig+0x2ae>
 8005f10:	e14b      	b.n	80061aa <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f16:	4b19      	ldr	r3, [pc, #100]	@ (8005f7c <UART_SetConfig+0x318>)
 8005f18:	0052      	lsls	r2, r2, #1
 8005f1a:	5ad3      	ldrh	r3, [r2, r3]
 8005f1c:	0019      	movs	r1, r3
 8005f1e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005f20:	f7fa f8fa 	bl	8000118 <__udivsi3>
 8005f24:	0003      	movs	r3, r0
 8005f26:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	0013      	movs	r3, r2
 8005f2e:	005b      	lsls	r3, r3, #1
 8005f30:	189b      	adds	r3, r3, r2
 8005f32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d305      	bcc.n	8005f44 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d91d      	bls.n	8005f80 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8005f44:	231a      	movs	r3, #26
 8005f46:	2220      	movs	r2, #32
 8005f48:	189b      	adds	r3, r3, r2
 8005f4a:	19db      	adds	r3, r3, r7
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	701a      	strb	r2, [r3, #0]
 8005f50:	e12b      	b.n	80061aa <UART_SetConfig+0x546>
 8005f52:	46c0      	nop			@ (mov r8, r8)
 8005f54:	cfff69f3 	.word	0xcfff69f3
 8005f58:	ffffcfff 	.word	0xffffcfff
 8005f5c:	40008000 	.word	0x40008000
 8005f60:	11fff4ff 	.word	0x11fff4ff
 8005f64:	40013800 	.word	0x40013800
 8005f68:	40021000 	.word	0x40021000
 8005f6c:	40004400 	.word	0x40004400
 8005f70:	40004800 	.word	0x40004800
 8005f74:	40004c00 	.word	0x40004c00
 8005f78:	00f42400 	.word	0x00f42400
 8005f7c:	08007b9c 	.word	0x08007b9c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f82:	61bb      	str	r3, [r7, #24]
 8005f84:	2300      	movs	r3, #0
 8005f86:	61fb      	str	r3, [r7, #28]
 8005f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f8c:	4b92      	ldr	r3, [pc, #584]	@ (80061d8 <UART_SetConfig+0x574>)
 8005f8e:	0052      	lsls	r2, r2, #1
 8005f90:	5ad3      	ldrh	r3, [r2, r3]
 8005f92:	613b      	str	r3, [r7, #16]
 8005f94:	2300      	movs	r3, #0
 8005f96:	617b      	str	r3, [r7, #20]
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	69b8      	ldr	r0, [r7, #24]
 8005f9e:	69f9      	ldr	r1, [r7, #28]
 8005fa0:	f7fa fa30 	bl	8000404 <__aeabi_uldivmod>
 8005fa4:	0002      	movs	r2, r0
 8005fa6:	000b      	movs	r3, r1
 8005fa8:	0e11      	lsrs	r1, r2, #24
 8005faa:	021d      	lsls	r5, r3, #8
 8005fac:	430d      	orrs	r5, r1
 8005fae:	0214      	lsls	r4, r2, #8
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	085b      	lsrs	r3, r3, #1
 8005fb6:	60bb      	str	r3, [r7, #8]
 8005fb8:	2300      	movs	r3, #0
 8005fba:	60fb      	str	r3, [r7, #12]
 8005fbc:	68b8      	ldr	r0, [r7, #8]
 8005fbe:	68f9      	ldr	r1, [r7, #12]
 8005fc0:	1900      	adds	r0, r0, r4
 8005fc2:	4169      	adcs	r1, r5
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	603b      	str	r3, [r7, #0]
 8005fca:	2300      	movs	r3, #0
 8005fcc:	607b      	str	r3, [r7, #4]
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f7fa fa17 	bl	8000404 <__aeabi_uldivmod>
 8005fd6:	0002      	movs	r2, r0
 8005fd8:	000b      	movs	r3, r1
 8005fda:	0013      	movs	r3, r2
 8005fdc:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fe0:	23c0      	movs	r3, #192	@ 0xc0
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d309      	bcc.n	8005ffc <UART_SetConfig+0x398>
 8005fe8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fea:	2380      	movs	r3, #128	@ 0x80
 8005fec:	035b      	lsls	r3, r3, #13
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d204      	bcs.n	8005ffc <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ff8:	60da      	str	r2, [r3, #12]
 8005ffa:	e0d6      	b.n	80061aa <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8005ffc:	231a      	movs	r3, #26
 8005ffe:	2220      	movs	r2, #32
 8006000:	189b      	adds	r3, r3, r2
 8006002:	19db      	adds	r3, r3, r7
 8006004:	2201      	movs	r2, #1
 8006006:	701a      	strb	r2, [r3, #0]
 8006008:	e0cf      	b.n	80061aa <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800600a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600c:	69da      	ldr	r2, [r3, #28]
 800600e:	2380      	movs	r3, #128	@ 0x80
 8006010:	021b      	lsls	r3, r3, #8
 8006012:	429a      	cmp	r2, r3
 8006014:	d000      	beq.n	8006018 <UART_SetConfig+0x3b4>
 8006016:	e070      	b.n	80060fa <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8006018:	231b      	movs	r3, #27
 800601a:	2220      	movs	r2, #32
 800601c:	189b      	adds	r3, r3, r2
 800601e:	19db      	adds	r3, r3, r7
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	2b08      	cmp	r3, #8
 8006024:	d015      	beq.n	8006052 <UART_SetConfig+0x3ee>
 8006026:	dc18      	bgt.n	800605a <UART_SetConfig+0x3f6>
 8006028:	2b04      	cmp	r3, #4
 800602a:	d00d      	beq.n	8006048 <UART_SetConfig+0x3e4>
 800602c:	dc15      	bgt.n	800605a <UART_SetConfig+0x3f6>
 800602e:	2b00      	cmp	r3, #0
 8006030:	d002      	beq.n	8006038 <UART_SetConfig+0x3d4>
 8006032:	2b02      	cmp	r3, #2
 8006034:	d005      	beq.n	8006042 <UART_SetConfig+0x3de>
 8006036:	e010      	b.n	800605a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006038:	f7fe feca 	bl	8004dd0 <HAL_RCC_GetPCLK1Freq>
 800603c:	0003      	movs	r3, r0
 800603e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006040:	e014      	b.n	800606c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006042:	4b66      	ldr	r3, [pc, #408]	@ (80061dc <UART_SetConfig+0x578>)
 8006044:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006046:	e011      	b.n	800606c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006048:	f7fe fe36 	bl	8004cb8 <HAL_RCC_GetSysClockFreq>
 800604c:	0003      	movs	r3, r0
 800604e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006050:	e00c      	b.n	800606c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006052:	2380      	movs	r3, #128	@ 0x80
 8006054:	021b      	lsls	r3, r3, #8
 8006056:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006058:	e008      	b.n	800606c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800605a:	2300      	movs	r3, #0
 800605c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800605e:	231a      	movs	r3, #26
 8006060:	2220      	movs	r2, #32
 8006062:	189b      	adds	r3, r3, r2
 8006064:	19db      	adds	r3, r3, r7
 8006066:	2201      	movs	r2, #1
 8006068:	701a      	strb	r2, [r3, #0]
        break;
 800606a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800606c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800606e:	2b00      	cmp	r3, #0
 8006070:	d100      	bne.n	8006074 <UART_SetConfig+0x410>
 8006072:	e09a      	b.n	80061aa <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006076:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006078:	4b57      	ldr	r3, [pc, #348]	@ (80061d8 <UART_SetConfig+0x574>)
 800607a:	0052      	lsls	r2, r2, #1
 800607c:	5ad3      	ldrh	r3, [r2, r3]
 800607e:	0019      	movs	r1, r3
 8006080:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006082:	f7fa f849 	bl	8000118 <__udivsi3>
 8006086:	0003      	movs	r3, r0
 8006088:	005a      	lsls	r2, r3, #1
 800608a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	085b      	lsrs	r3, r3, #1
 8006090:	18d2      	adds	r2, r2, r3
 8006092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	0019      	movs	r1, r3
 8006098:	0010      	movs	r0, r2
 800609a:	f7fa f83d 	bl	8000118 <__udivsi3>
 800609e:	0003      	movs	r3, r0
 80060a0:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a4:	2b0f      	cmp	r3, #15
 80060a6:	d921      	bls.n	80060ec <UART_SetConfig+0x488>
 80060a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060aa:	2380      	movs	r3, #128	@ 0x80
 80060ac:	025b      	lsls	r3, r3, #9
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d21c      	bcs.n	80060ec <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	200e      	movs	r0, #14
 80060b8:	2420      	movs	r4, #32
 80060ba:	1903      	adds	r3, r0, r4
 80060bc:	19db      	adds	r3, r3, r7
 80060be:	210f      	movs	r1, #15
 80060c0:	438a      	bics	r2, r1
 80060c2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c6:	085b      	lsrs	r3, r3, #1
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	2207      	movs	r2, #7
 80060cc:	4013      	ands	r3, r2
 80060ce:	b299      	uxth	r1, r3
 80060d0:	1903      	adds	r3, r0, r4
 80060d2:	19db      	adds	r3, r3, r7
 80060d4:	1902      	adds	r2, r0, r4
 80060d6:	19d2      	adds	r2, r2, r7
 80060d8:	8812      	ldrh	r2, [r2, #0]
 80060da:	430a      	orrs	r2, r1
 80060dc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80060de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	1902      	adds	r2, r0, r4
 80060e4:	19d2      	adds	r2, r2, r7
 80060e6:	8812      	ldrh	r2, [r2, #0]
 80060e8:	60da      	str	r2, [r3, #12]
 80060ea:	e05e      	b.n	80061aa <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80060ec:	231a      	movs	r3, #26
 80060ee:	2220      	movs	r2, #32
 80060f0:	189b      	adds	r3, r3, r2
 80060f2:	19db      	adds	r3, r3, r7
 80060f4:	2201      	movs	r2, #1
 80060f6:	701a      	strb	r2, [r3, #0]
 80060f8:	e057      	b.n	80061aa <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060fa:	231b      	movs	r3, #27
 80060fc:	2220      	movs	r2, #32
 80060fe:	189b      	adds	r3, r3, r2
 8006100:	19db      	adds	r3, r3, r7
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	2b08      	cmp	r3, #8
 8006106:	d015      	beq.n	8006134 <UART_SetConfig+0x4d0>
 8006108:	dc18      	bgt.n	800613c <UART_SetConfig+0x4d8>
 800610a:	2b04      	cmp	r3, #4
 800610c:	d00d      	beq.n	800612a <UART_SetConfig+0x4c6>
 800610e:	dc15      	bgt.n	800613c <UART_SetConfig+0x4d8>
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <UART_SetConfig+0x4b6>
 8006114:	2b02      	cmp	r3, #2
 8006116:	d005      	beq.n	8006124 <UART_SetConfig+0x4c0>
 8006118:	e010      	b.n	800613c <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800611a:	f7fe fe59 	bl	8004dd0 <HAL_RCC_GetPCLK1Freq>
 800611e:	0003      	movs	r3, r0
 8006120:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006122:	e014      	b.n	800614e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006124:	4b2d      	ldr	r3, [pc, #180]	@ (80061dc <UART_SetConfig+0x578>)
 8006126:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006128:	e011      	b.n	800614e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800612a:	f7fe fdc5 	bl	8004cb8 <HAL_RCC_GetSysClockFreq>
 800612e:	0003      	movs	r3, r0
 8006130:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006132:	e00c      	b.n	800614e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006134:	2380      	movs	r3, #128	@ 0x80
 8006136:	021b      	lsls	r3, r3, #8
 8006138:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800613a:	e008      	b.n	800614e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 800613c:	2300      	movs	r3, #0
 800613e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8006140:	231a      	movs	r3, #26
 8006142:	2220      	movs	r2, #32
 8006144:	189b      	adds	r3, r3, r2
 8006146:	19db      	adds	r3, r3, r7
 8006148:	2201      	movs	r2, #1
 800614a:	701a      	strb	r2, [r3, #0]
        break;
 800614c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800614e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006150:	2b00      	cmp	r3, #0
 8006152:	d02a      	beq.n	80061aa <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006156:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006158:	4b1f      	ldr	r3, [pc, #124]	@ (80061d8 <UART_SetConfig+0x574>)
 800615a:	0052      	lsls	r2, r2, #1
 800615c:	5ad3      	ldrh	r3, [r2, r3]
 800615e:	0019      	movs	r1, r3
 8006160:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006162:	f7f9 ffd9 	bl	8000118 <__udivsi3>
 8006166:	0003      	movs	r3, r0
 8006168:	001a      	movs	r2, r3
 800616a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	085b      	lsrs	r3, r3, #1
 8006170:	18d2      	adds	r2, r2, r3
 8006172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	0019      	movs	r1, r3
 8006178:	0010      	movs	r0, r2
 800617a:	f7f9 ffcd 	bl	8000118 <__udivsi3>
 800617e:	0003      	movs	r3, r0
 8006180:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006184:	2b0f      	cmp	r3, #15
 8006186:	d90a      	bls.n	800619e <UART_SetConfig+0x53a>
 8006188:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800618a:	2380      	movs	r3, #128	@ 0x80
 800618c:	025b      	lsls	r3, r3, #9
 800618e:	429a      	cmp	r2, r3
 8006190:	d205      	bcs.n	800619e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006194:	b29a      	uxth	r2, r3
 8006196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	60da      	str	r2, [r3, #12]
 800619c:	e005      	b.n	80061aa <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800619e:	231a      	movs	r3, #26
 80061a0:	2220      	movs	r2, #32
 80061a2:	189b      	adds	r3, r3, r2
 80061a4:	19db      	adds	r3, r3, r7
 80061a6:	2201      	movs	r2, #1
 80061a8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80061aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ac:	226a      	movs	r2, #106	@ 0x6a
 80061ae:	2101      	movs	r1, #1
 80061b0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80061b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b4:	2268      	movs	r2, #104	@ 0x68
 80061b6:	2101      	movs	r1, #1
 80061b8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061bc:	2200      	movs	r2, #0
 80061be:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80061c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c2:	2200      	movs	r2, #0
 80061c4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80061c6:	231a      	movs	r3, #26
 80061c8:	2220      	movs	r2, #32
 80061ca:	189b      	adds	r3, r3, r2
 80061cc:	19db      	adds	r3, r3, r7
 80061ce:	781b      	ldrb	r3, [r3, #0]
}
 80061d0:	0018      	movs	r0, r3
 80061d2:	46bd      	mov	sp, r7
 80061d4:	b010      	add	sp, #64	@ 0x40
 80061d6:	bdb0      	pop	{r4, r5, r7, pc}
 80061d8:	08007b9c 	.word	0x08007b9c
 80061dc:	00f42400 	.word	0x00f42400

080061e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ec:	2208      	movs	r2, #8
 80061ee:	4013      	ands	r3, r2
 80061f0:	d00b      	beq.n	800620a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	4a4a      	ldr	r2, [pc, #296]	@ (8006324 <UART_AdvFeatureConfig+0x144>)
 80061fa:	4013      	ands	r3, r2
 80061fc:	0019      	movs	r1, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800620e:	2201      	movs	r2, #1
 8006210:	4013      	ands	r3, r2
 8006212:	d00b      	beq.n	800622c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	4a43      	ldr	r2, [pc, #268]	@ (8006328 <UART_AdvFeatureConfig+0x148>)
 800621c:	4013      	ands	r3, r2
 800621e:	0019      	movs	r1, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	430a      	orrs	r2, r1
 800622a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006230:	2202      	movs	r2, #2
 8006232:	4013      	ands	r3, r2
 8006234:	d00b      	beq.n	800624e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	4a3b      	ldr	r2, [pc, #236]	@ (800632c <UART_AdvFeatureConfig+0x14c>)
 800623e:	4013      	ands	r3, r2
 8006240:	0019      	movs	r1, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006252:	2204      	movs	r2, #4
 8006254:	4013      	ands	r3, r2
 8006256:	d00b      	beq.n	8006270 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	4a34      	ldr	r2, [pc, #208]	@ (8006330 <UART_AdvFeatureConfig+0x150>)
 8006260:	4013      	ands	r3, r2
 8006262:	0019      	movs	r1, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006274:	2210      	movs	r2, #16
 8006276:	4013      	ands	r3, r2
 8006278:	d00b      	beq.n	8006292 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	4a2c      	ldr	r2, [pc, #176]	@ (8006334 <UART_AdvFeatureConfig+0x154>)
 8006282:	4013      	ands	r3, r2
 8006284:	0019      	movs	r1, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	430a      	orrs	r2, r1
 8006290:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006296:	2220      	movs	r2, #32
 8006298:	4013      	ands	r3, r2
 800629a:	d00b      	beq.n	80062b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	4a25      	ldr	r2, [pc, #148]	@ (8006338 <UART_AdvFeatureConfig+0x158>)
 80062a4:	4013      	ands	r3, r2
 80062a6:	0019      	movs	r1, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	430a      	orrs	r2, r1
 80062b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b8:	2240      	movs	r2, #64	@ 0x40
 80062ba:	4013      	ands	r3, r2
 80062bc:	d01d      	beq.n	80062fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	4a1d      	ldr	r2, [pc, #116]	@ (800633c <UART_AdvFeatureConfig+0x15c>)
 80062c6:	4013      	ands	r3, r2
 80062c8:	0019      	movs	r1, r3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062da:	2380      	movs	r3, #128	@ 0x80
 80062dc:	035b      	lsls	r3, r3, #13
 80062de:	429a      	cmp	r2, r3
 80062e0:	d10b      	bne.n	80062fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	4a15      	ldr	r2, [pc, #84]	@ (8006340 <UART_AdvFeatureConfig+0x160>)
 80062ea:	4013      	ands	r3, r2
 80062ec:	0019      	movs	r1, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062fe:	2280      	movs	r2, #128	@ 0x80
 8006300:	4013      	ands	r3, r2
 8006302:	d00b      	beq.n	800631c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	4a0e      	ldr	r2, [pc, #56]	@ (8006344 <UART_AdvFeatureConfig+0x164>)
 800630c:	4013      	ands	r3, r2
 800630e:	0019      	movs	r1, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	430a      	orrs	r2, r1
 800631a:	605a      	str	r2, [r3, #4]
  }
}
 800631c:	46c0      	nop			@ (mov r8, r8)
 800631e:	46bd      	mov	sp, r7
 8006320:	b002      	add	sp, #8
 8006322:	bd80      	pop	{r7, pc}
 8006324:	ffff7fff 	.word	0xffff7fff
 8006328:	fffdffff 	.word	0xfffdffff
 800632c:	fffeffff 	.word	0xfffeffff
 8006330:	fffbffff 	.word	0xfffbffff
 8006334:	ffffefff 	.word	0xffffefff
 8006338:	ffffdfff 	.word	0xffffdfff
 800633c:	ffefffff 	.word	0xffefffff
 8006340:	ff9fffff 	.word	0xff9fffff
 8006344:	fff7ffff 	.word	0xfff7ffff

08006348 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b092      	sub	sp, #72	@ 0x48
 800634c:	af02      	add	r7, sp, #8
 800634e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2290      	movs	r2, #144	@ 0x90
 8006354:	2100      	movs	r1, #0
 8006356:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006358:	f7fd fb44 	bl	80039e4 <HAL_GetTick>
 800635c:	0003      	movs	r3, r0
 800635e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2208      	movs	r2, #8
 8006368:	4013      	ands	r3, r2
 800636a:	2b08      	cmp	r3, #8
 800636c:	d12d      	bne.n	80063ca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800636e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006370:	2280      	movs	r2, #128	@ 0x80
 8006372:	0391      	lsls	r1, r2, #14
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	4a47      	ldr	r2, [pc, #284]	@ (8006494 <UART_CheckIdleState+0x14c>)
 8006378:	9200      	str	r2, [sp, #0]
 800637a:	2200      	movs	r2, #0
 800637c:	f000 f88e 	bl	800649c <UART_WaitOnFlagUntilTimeout>
 8006380:	1e03      	subs	r3, r0, #0
 8006382:	d022      	beq.n	80063ca <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006384:	f3ef 8310 	mrs	r3, PRIMASK
 8006388:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800638a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800638c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800638e:	2301      	movs	r3, #1
 8006390:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006394:	f383 8810 	msr	PRIMASK, r3
}
 8006398:	46c0      	nop			@ (mov r8, r8)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2180      	movs	r1, #128	@ 0x80
 80063a6:	438a      	bics	r2, r1
 80063a8:	601a      	str	r2, [r3, #0]
 80063aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b0:	f383 8810 	msr	PRIMASK, r3
}
 80063b4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2288      	movs	r2, #136	@ 0x88
 80063ba:	2120      	movs	r1, #32
 80063bc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2284      	movs	r2, #132	@ 0x84
 80063c2:	2100      	movs	r1, #0
 80063c4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e060      	b.n	800648c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2204      	movs	r2, #4
 80063d2:	4013      	ands	r3, r2
 80063d4:	2b04      	cmp	r3, #4
 80063d6:	d146      	bne.n	8006466 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063da:	2280      	movs	r2, #128	@ 0x80
 80063dc:	03d1      	lsls	r1, r2, #15
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	4a2c      	ldr	r2, [pc, #176]	@ (8006494 <UART_CheckIdleState+0x14c>)
 80063e2:	9200      	str	r2, [sp, #0]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f000 f859 	bl	800649c <UART_WaitOnFlagUntilTimeout>
 80063ea:	1e03      	subs	r3, r0, #0
 80063ec:	d03b      	beq.n	8006466 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063ee:	f3ef 8310 	mrs	r3, PRIMASK
 80063f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80063f4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80063f8:	2301      	movs	r3, #1
 80063fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	f383 8810 	msr	PRIMASK, r3
}
 8006402:	46c0      	nop			@ (mov r8, r8)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4922      	ldr	r1, [pc, #136]	@ (8006498 <UART_CheckIdleState+0x150>)
 8006410:	400a      	ands	r2, r1
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006416:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f383 8810 	msr	PRIMASK, r3
}
 800641e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006420:	f3ef 8310 	mrs	r3, PRIMASK
 8006424:	61bb      	str	r3, [r7, #24]
  return(result);
 8006426:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006428:	633b      	str	r3, [r7, #48]	@ 0x30
 800642a:	2301      	movs	r3, #1
 800642c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	f383 8810 	msr	PRIMASK, r3
}
 8006434:	46c0      	nop			@ (mov r8, r8)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	689a      	ldr	r2, [r3, #8]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2101      	movs	r1, #1
 8006442:	438a      	bics	r2, r1
 8006444:	609a      	str	r2, [r3, #8]
 8006446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006448:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800644a:	6a3b      	ldr	r3, [r7, #32]
 800644c:	f383 8810 	msr	PRIMASK, r3
}
 8006450:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	228c      	movs	r2, #140	@ 0x8c
 8006456:	2120      	movs	r1, #32
 8006458:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2284      	movs	r2, #132	@ 0x84
 800645e:	2100      	movs	r1, #0
 8006460:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e012      	b.n	800648c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2288      	movs	r2, #136	@ 0x88
 800646a:	2120      	movs	r1, #32
 800646c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	228c      	movs	r2, #140	@ 0x8c
 8006472:	2120      	movs	r1, #32
 8006474:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2284      	movs	r2, #132	@ 0x84
 8006486:	2100      	movs	r1, #0
 8006488:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	0018      	movs	r0, r3
 800648e:	46bd      	mov	sp, r7
 8006490:	b010      	add	sp, #64	@ 0x40
 8006492:	bd80      	pop	{r7, pc}
 8006494:	01ffffff 	.word	0x01ffffff
 8006498:	fffffedf 	.word	0xfffffedf

0800649c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	603b      	str	r3, [r7, #0]
 80064a8:	1dfb      	adds	r3, r7, #7
 80064aa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064ac:	e051      	b.n	8006552 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	3301      	adds	r3, #1
 80064b2:	d04e      	beq.n	8006552 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064b4:	f7fd fa96 	bl	80039e4 <HAL_GetTick>
 80064b8:	0002      	movs	r2, r0
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d302      	bcc.n	80064ca <UART_WaitOnFlagUntilTimeout+0x2e>
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e051      	b.n	8006572 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2204      	movs	r2, #4
 80064d6:	4013      	ands	r3, r2
 80064d8:	d03b      	beq.n	8006552 <UART_WaitOnFlagUntilTimeout+0xb6>
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	2b80      	cmp	r3, #128	@ 0x80
 80064de:	d038      	beq.n	8006552 <UART_WaitOnFlagUntilTimeout+0xb6>
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	2b40      	cmp	r3, #64	@ 0x40
 80064e4:	d035      	beq.n	8006552 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	69db      	ldr	r3, [r3, #28]
 80064ec:	2208      	movs	r2, #8
 80064ee:	4013      	ands	r3, r2
 80064f0:	2b08      	cmp	r3, #8
 80064f2:	d111      	bne.n	8006518 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2208      	movs	r2, #8
 80064fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	0018      	movs	r0, r3
 8006500:	f000 f83c 	bl	800657c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2290      	movs	r2, #144	@ 0x90
 8006508:	2108      	movs	r1, #8
 800650a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2284      	movs	r2, #132	@ 0x84
 8006510:	2100      	movs	r1, #0
 8006512:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e02c      	b.n	8006572 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	69da      	ldr	r2, [r3, #28]
 800651e:	2380      	movs	r3, #128	@ 0x80
 8006520:	011b      	lsls	r3, r3, #4
 8006522:	401a      	ands	r2, r3
 8006524:	2380      	movs	r3, #128	@ 0x80
 8006526:	011b      	lsls	r3, r3, #4
 8006528:	429a      	cmp	r2, r3
 800652a:	d112      	bne.n	8006552 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2280      	movs	r2, #128	@ 0x80
 8006532:	0112      	lsls	r2, r2, #4
 8006534:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	0018      	movs	r0, r3
 800653a:	f000 f81f 	bl	800657c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2290      	movs	r2, #144	@ 0x90
 8006542:	2120      	movs	r1, #32
 8006544:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2284      	movs	r2, #132	@ 0x84
 800654a:	2100      	movs	r1, #0
 800654c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e00f      	b.n	8006572 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	69db      	ldr	r3, [r3, #28]
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	4013      	ands	r3, r2
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	425a      	negs	r2, r3
 8006562:	4153      	adcs	r3, r2
 8006564:	b2db      	uxtb	r3, r3
 8006566:	001a      	movs	r2, r3
 8006568:	1dfb      	adds	r3, r7, #7
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	429a      	cmp	r2, r3
 800656e:	d09e      	beq.n	80064ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	0018      	movs	r0, r3
 8006574:	46bd      	mov	sp, r7
 8006576:	b004      	add	sp, #16
 8006578:	bd80      	pop	{r7, pc}
	...

0800657c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b08e      	sub	sp, #56	@ 0x38
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006584:	f3ef 8310 	mrs	r3, PRIMASK
 8006588:	617b      	str	r3, [r7, #20]
  return(result);
 800658a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800658c:	637b      	str	r3, [r7, #52]	@ 0x34
 800658e:	2301      	movs	r3, #1
 8006590:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	f383 8810 	msr	PRIMASK, r3
}
 8006598:	46c0      	nop			@ (mov r8, r8)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4926      	ldr	r1, [pc, #152]	@ (8006640 <UART_EndRxTransfer+0xc4>)
 80065a6:	400a      	ands	r2, r1
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	f383 8810 	msr	PRIMASK, r3
}
 80065b4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065b6:	f3ef 8310 	mrs	r3, PRIMASK
 80065ba:	623b      	str	r3, [r7, #32]
  return(result);
 80065bc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065be:	633b      	str	r3, [r7, #48]	@ 0x30
 80065c0:	2301      	movs	r3, #1
 80065c2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c6:	f383 8810 	msr	PRIMASK, r3
}
 80065ca:	46c0      	nop			@ (mov r8, r8)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689a      	ldr	r2, [r3, #8]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	491b      	ldr	r1, [pc, #108]	@ (8006644 <UART_EndRxTransfer+0xc8>)
 80065d8:	400a      	ands	r2, r1
 80065da:	609a      	str	r2, [r3, #8]
 80065dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065de:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e2:	f383 8810 	msr	PRIMASK, r3
}
 80065e6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d118      	bne.n	8006622 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065f0:	f3ef 8310 	mrs	r3, PRIMASK
 80065f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80065f6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065fa:	2301      	movs	r3, #1
 80065fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f383 8810 	msr	PRIMASK, r3
}
 8006604:	46c0      	nop			@ (mov r8, r8)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2110      	movs	r1, #16
 8006612:	438a      	bics	r2, r1
 8006614:	601a      	str	r2, [r3, #0]
 8006616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006618:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	f383 8810 	msr	PRIMASK, r3
}
 8006620:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	228c      	movs	r2, #140	@ 0x8c
 8006626:	2120      	movs	r1, #32
 8006628:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006636:	46c0      	nop			@ (mov r8, r8)
 8006638:	46bd      	mov	sp, r7
 800663a:	b00e      	add	sp, #56	@ 0x38
 800663c:	bd80      	pop	{r7, pc}
 800663e:	46c0      	nop			@ (mov r8, r8)
 8006640:	fffffedf 	.word	0xfffffedf
 8006644:	effffffe 	.word	0xeffffffe

08006648 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2284      	movs	r2, #132	@ 0x84
 8006654:	5c9b      	ldrb	r3, [r3, r2]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d101      	bne.n	800665e <HAL_UARTEx_DisableFifoMode+0x16>
 800665a:	2302      	movs	r3, #2
 800665c:	e027      	b.n	80066ae <HAL_UARTEx_DisableFifoMode+0x66>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2284      	movs	r2, #132	@ 0x84
 8006662:	2101      	movs	r1, #1
 8006664:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2288      	movs	r2, #136	@ 0x88
 800666a:	2124      	movs	r1, #36	@ 0x24
 800666c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2101      	movs	r1, #1
 8006682:	438a      	bics	r2, r1
 8006684:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	4a0b      	ldr	r2, [pc, #44]	@ (80066b8 <HAL_UARTEx_DisableFifoMode+0x70>)
 800668a:	4013      	ands	r3, r2
 800668c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2288      	movs	r2, #136	@ 0x88
 80066a0:	2120      	movs	r1, #32
 80066a2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2284      	movs	r2, #132	@ 0x84
 80066a8:	2100      	movs	r1, #0
 80066aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	0018      	movs	r0, r3
 80066b0:	46bd      	mov	sp, r7
 80066b2:	b004      	add	sp, #16
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	46c0      	nop			@ (mov r8, r8)
 80066b8:	dfffffff 	.word	0xdfffffff

080066bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2284      	movs	r2, #132	@ 0x84
 80066ca:	5c9b      	ldrb	r3, [r3, r2]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d101      	bne.n	80066d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80066d0:	2302      	movs	r3, #2
 80066d2:	e02e      	b.n	8006732 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2284      	movs	r2, #132	@ 0x84
 80066d8:	2101      	movs	r1, #1
 80066da:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2288      	movs	r2, #136	@ 0x88
 80066e0:	2124      	movs	r1, #36	@ 0x24
 80066e2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2101      	movs	r1, #1
 80066f8:	438a      	bics	r2, r1
 80066fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	00db      	lsls	r3, r3, #3
 8006704:	08d9      	lsrs	r1, r3, #3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	430a      	orrs	r2, r1
 800670e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	0018      	movs	r0, r3
 8006714:	f000 f854 	bl	80067c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2288      	movs	r2, #136	@ 0x88
 8006724:	2120      	movs	r1, #32
 8006726:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2284      	movs	r2, #132	@ 0x84
 800672c:	2100      	movs	r1, #0
 800672e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	0018      	movs	r0, r3
 8006734:	46bd      	mov	sp, r7
 8006736:	b004      	add	sp, #16
 8006738:	bd80      	pop	{r7, pc}
	...

0800673c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2284      	movs	r2, #132	@ 0x84
 800674a:	5c9b      	ldrb	r3, [r3, r2]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d101      	bne.n	8006754 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006750:	2302      	movs	r3, #2
 8006752:	e02f      	b.n	80067b4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2284      	movs	r2, #132	@ 0x84
 8006758:	2101      	movs	r1, #1
 800675a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2288      	movs	r2, #136	@ 0x88
 8006760:	2124      	movs	r1, #36	@ 0x24
 8006762:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2101      	movs	r1, #1
 8006778:	438a      	bics	r2, r1
 800677a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	4a0e      	ldr	r2, [pc, #56]	@ (80067bc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006784:	4013      	ands	r3, r2
 8006786:	0019      	movs	r1, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	683a      	ldr	r2, [r7, #0]
 800678e:	430a      	orrs	r2, r1
 8006790:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	0018      	movs	r0, r3
 8006796:	f000 f813 	bl	80067c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2288      	movs	r2, #136	@ 0x88
 80067a6:	2120      	movs	r1, #32
 80067a8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2284      	movs	r2, #132	@ 0x84
 80067ae:	2100      	movs	r1, #0
 80067b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	0018      	movs	r0, r3
 80067b6:	46bd      	mov	sp, r7
 80067b8:	b004      	add	sp, #16
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	f1ffffff 	.word	0xf1ffffff

080067c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80067c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d108      	bne.n	80067e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	226a      	movs	r2, #106	@ 0x6a
 80067d4:	2101      	movs	r1, #1
 80067d6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2268      	movs	r2, #104	@ 0x68
 80067dc:	2101      	movs	r1, #1
 80067de:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80067e0:	e043      	b.n	800686a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80067e2:	260f      	movs	r6, #15
 80067e4:	19bb      	adds	r3, r7, r6
 80067e6:	2208      	movs	r2, #8
 80067e8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80067ea:	200e      	movs	r0, #14
 80067ec:	183b      	adds	r3, r7, r0
 80067ee:	2208      	movs	r2, #8
 80067f0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	0e5b      	lsrs	r3, r3, #25
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	240d      	movs	r4, #13
 80067fe:	193b      	adds	r3, r7, r4
 8006800:	2107      	movs	r1, #7
 8006802:	400a      	ands	r2, r1
 8006804:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	0f5b      	lsrs	r3, r3, #29
 800680e:	b2da      	uxtb	r2, r3
 8006810:	250c      	movs	r5, #12
 8006812:	197b      	adds	r3, r7, r5
 8006814:	2107      	movs	r1, #7
 8006816:	400a      	ands	r2, r1
 8006818:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800681a:	183b      	adds	r3, r7, r0
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	197a      	adds	r2, r7, r5
 8006820:	7812      	ldrb	r2, [r2, #0]
 8006822:	4914      	ldr	r1, [pc, #80]	@ (8006874 <UARTEx_SetNbDataToProcess+0xb4>)
 8006824:	5c8a      	ldrb	r2, [r1, r2]
 8006826:	435a      	muls	r2, r3
 8006828:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800682a:	197b      	adds	r3, r7, r5
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	4a12      	ldr	r2, [pc, #72]	@ (8006878 <UARTEx_SetNbDataToProcess+0xb8>)
 8006830:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006832:	0019      	movs	r1, r3
 8006834:	f7f9 fcfa 	bl	800022c <__divsi3>
 8006838:	0003      	movs	r3, r0
 800683a:	b299      	uxth	r1, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	226a      	movs	r2, #106	@ 0x6a
 8006840:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006842:	19bb      	adds	r3, r7, r6
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	193a      	adds	r2, r7, r4
 8006848:	7812      	ldrb	r2, [r2, #0]
 800684a:	490a      	ldr	r1, [pc, #40]	@ (8006874 <UARTEx_SetNbDataToProcess+0xb4>)
 800684c:	5c8a      	ldrb	r2, [r1, r2]
 800684e:	435a      	muls	r2, r3
 8006850:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006852:	193b      	adds	r3, r7, r4
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	4a08      	ldr	r2, [pc, #32]	@ (8006878 <UARTEx_SetNbDataToProcess+0xb8>)
 8006858:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800685a:	0019      	movs	r1, r3
 800685c:	f7f9 fce6 	bl	800022c <__divsi3>
 8006860:	0003      	movs	r3, r0
 8006862:	b299      	uxth	r1, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2268      	movs	r2, #104	@ 0x68
 8006868:	5299      	strh	r1, [r3, r2]
}
 800686a:	46c0      	nop			@ (mov r8, r8)
 800686c:	46bd      	mov	sp, r7
 800686e:	b005      	add	sp, #20
 8006870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006872:	46c0      	nop			@ (mov r8, r8)
 8006874:	08007bb4 	.word	0x08007bb4
 8006878:	08007bbc 	.word	0x08007bbc

0800687c <siprintf>:
 800687c:	b40e      	push	{r1, r2, r3}
 800687e:	b510      	push	{r4, lr}
 8006880:	2400      	movs	r4, #0
 8006882:	490c      	ldr	r1, [pc, #48]	@ (80068b4 <siprintf+0x38>)
 8006884:	b09d      	sub	sp, #116	@ 0x74
 8006886:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006888:	9002      	str	r0, [sp, #8]
 800688a:	9006      	str	r0, [sp, #24]
 800688c:	9107      	str	r1, [sp, #28]
 800688e:	9104      	str	r1, [sp, #16]
 8006890:	4809      	ldr	r0, [pc, #36]	@ (80068b8 <siprintf+0x3c>)
 8006892:	490a      	ldr	r1, [pc, #40]	@ (80068bc <siprintf+0x40>)
 8006894:	cb04      	ldmia	r3!, {r2}
 8006896:	9105      	str	r1, [sp, #20]
 8006898:	6800      	ldr	r0, [r0, #0]
 800689a:	a902      	add	r1, sp, #8
 800689c:	9301      	str	r3, [sp, #4]
 800689e:	941b      	str	r4, [sp, #108]	@ 0x6c
 80068a0:	f000 f99e 	bl	8006be0 <_svfiprintf_r>
 80068a4:	9b02      	ldr	r3, [sp, #8]
 80068a6:	701c      	strb	r4, [r3, #0]
 80068a8:	b01d      	add	sp, #116	@ 0x74
 80068aa:	bc10      	pop	{r4}
 80068ac:	bc08      	pop	{r3}
 80068ae:	b003      	add	sp, #12
 80068b0:	4718      	bx	r3
 80068b2:	46c0      	nop			@ (mov r8, r8)
 80068b4:	7fffffff 	.word	0x7fffffff
 80068b8:	20000038 	.word	0x20000038
 80068bc:	ffff0208 	.word	0xffff0208

080068c0 <memset>:
 80068c0:	0003      	movs	r3, r0
 80068c2:	1882      	adds	r2, r0, r2
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d100      	bne.n	80068ca <memset+0xa>
 80068c8:	4770      	bx	lr
 80068ca:	7019      	strb	r1, [r3, #0]
 80068cc:	3301      	adds	r3, #1
 80068ce:	e7f9      	b.n	80068c4 <memset+0x4>

080068d0 <__errno>:
 80068d0:	4b01      	ldr	r3, [pc, #4]	@ (80068d8 <__errno+0x8>)
 80068d2:	6818      	ldr	r0, [r3, #0]
 80068d4:	4770      	bx	lr
 80068d6:	46c0      	nop			@ (mov r8, r8)
 80068d8:	20000038 	.word	0x20000038

080068dc <__libc_init_array>:
 80068dc:	b570      	push	{r4, r5, r6, lr}
 80068de:	2600      	movs	r6, #0
 80068e0:	4c0c      	ldr	r4, [pc, #48]	@ (8006914 <__libc_init_array+0x38>)
 80068e2:	4d0d      	ldr	r5, [pc, #52]	@ (8006918 <__libc_init_array+0x3c>)
 80068e4:	1b64      	subs	r4, r4, r5
 80068e6:	10a4      	asrs	r4, r4, #2
 80068e8:	42a6      	cmp	r6, r4
 80068ea:	d109      	bne.n	8006900 <__libc_init_array+0x24>
 80068ec:	2600      	movs	r6, #0
 80068ee:	f000 fc61 	bl	80071b4 <_init>
 80068f2:	4c0a      	ldr	r4, [pc, #40]	@ (800691c <__libc_init_array+0x40>)
 80068f4:	4d0a      	ldr	r5, [pc, #40]	@ (8006920 <__libc_init_array+0x44>)
 80068f6:	1b64      	subs	r4, r4, r5
 80068f8:	10a4      	asrs	r4, r4, #2
 80068fa:	42a6      	cmp	r6, r4
 80068fc:	d105      	bne.n	800690a <__libc_init_array+0x2e>
 80068fe:	bd70      	pop	{r4, r5, r6, pc}
 8006900:	00b3      	lsls	r3, r6, #2
 8006902:	58eb      	ldr	r3, [r5, r3]
 8006904:	4798      	blx	r3
 8006906:	3601      	adds	r6, #1
 8006908:	e7ee      	b.n	80068e8 <__libc_init_array+0xc>
 800690a:	00b3      	lsls	r3, r6, #2
 800690c:	58eb      	ldr	r3, [r5, r3]
 800690e:	4798      	blx	r3
 8006910:	3601      	adds	r6, #1
 8006912:	e7f2      	b.n	80068fa <__libc_init_array+0x1e>
 8006914:	08007c00 	.word	0x08007c00
 8006918:	08007c00 	.word	0x08007c00
 800691c:	08007c04 	.word	0x08007c04
 8006920:	08007c00 	.word	0x08007c00

08006924 <__retarget_lock_acquire_recursive>:
 8006924:	4770      	bx	lr

08006926 <__retarget_lock_release_recursive>:
 8006926:	4770      	bx	lr

08006928 <_free_r>:
 8006928:	b570      	push	{r4, r5, r6, lr}
 800692a:	0005      	movs	r5, r0
 800692c:	1e0c      	subs	r4, r1, #0
 800692e:	d010      	beq.n	8006952 <_free_r+0x2a>
 8006930:	3c04      	subs	r4, #4
 8006932:	6823      	ldr	r3, [r4, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	da00      	bge.n	800693a <_free_r+0x12>
 8006938:	18e4      	adds	r4, r4, r3
 800693a:	0028      	movs	r0, r5
 800693c:	f000 f8e0 	bl	8006b00 <__malloc_lock>
 8006940:	4a1d      	ldr	r2, [pc, #116]	@ (80069b8 <_free_r+0x90>)
 8006942:	6813      	ldr	r3, [r2, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d105      	bne.n	8006954 <_free_r+0x2c>
 8006948:	6063      	str	r3, [r4, #4]
 800694a:	6014      	str	r4, [r2, #0]
 800694c:	0028      	movs	r0, r5
 800694e:	f000 f8df 	bl	8006b10 <__malloc_unlock>
 8006952:	bd70      	pop	{r4, r5, r6, pc}
 8006954:	42a3      	cmp	r3, r4
 8006956:	d908      	bls.n	800696a <_free_r+0x42>
 8006958:	6820      	ldr	r0, [r4, #0]
 800695a:	1821      	adds	r1, r4, r0
 800695c:	428b      	cmp	r3, r1
 800695e:	d1f3      	bne.n	8006948 <_free_r+0x20>
 8006960:	6819      	ldr	r1, [r3, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	1809      	adds	r1, r1, r0
 8006966:	6021      	str	r1, [r4, #0]
 8006968:	e7ee      	b.n	8006948 <_free_r+0x20>
 800696a:	001a      	movs	r2, r3
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <_free_r+0x4e>
 8006972:	42a3      	cmp	r3, r4
 8006974:	d9f9      	bls.n	800696a <_free_r+0x42>
 8006976:	6811      	ldr	r1, [r2, #0]
 8006978:	1850      	adds	r0, r2, r1
 800697a:	42a0      	cmp	r0, r4
 800697c:	d10b      	bne.n	8006996 <_free_r+0x6e>
 800697e:	6820      	ldr	r0, [r4, #0]
 8006980:	1809      	adds	r1, r1, r0
 8006982:	1850      	adds	r0, r2, r1
 8006984:	6011      	str	r1, [r2, #0]
 8006986:	4283      	cmp	r3, r0
 8006988:	d1e0      	bne.n	800694c <_free_r+0x24>
 800698a:	6818      	ldr	r0, [r3, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	1841      	adds	r1, r0, r1
 8006990:	6011      	str	r1, [r2, #0]
 8006992:	6053      	str	r3, [r2, #4]
 8006994:	e7da      	b.n	800694c <_free_r+0x24>
 8006996:	42a0      	cmp	r0, r4
 8006998:	d902      	bls.n	80069a0 <_free_r+0x78>
 800699a:	230c      	movs	r3, #12
 800699c:	602b      	str	r3, [r5, #0]
 800699e:	e7d5      	b.n	800694c <_free_r+0x24>
 80069a0:	6820      	ldr	r0, [r4, #0]
 80069a2:	1821      	adds	r1, r4, r0
 80069a4:	428b      	cmp	r3, r1
 80069a6:	d103      	bne.n	80069b0 <_free_r+0x88>
 80069a8:	6819      	ldr	r1, [r3, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	1809      	adds	r1, r1, r0
 80069ae:	6021      	str	r1, [r4, #0]
 80069b0:	6063      	str	r3, [r4, #4]
 80069b2:	6054      	str	r4, [r2, #4]
 80069b4:	e7ca      	b.n	800694c <_free_r+0x24>
 80069b6:	46c0      	nop			@ (mov r8, r8)
 80069b8:	20002d24 	.word	0x20002d24

080069bc <sbrk_aligned>:
 80069bc:	b570      	push	{r4, r5, r6, lr}
 80069be:	4e0f      	ldr	r6, [pc, #60]	@ (80069fc <sbrk_aligned+0x40>)
 80069c0:	000d      	movs	r5, r1
 80069c2:	6831      	ldr	r1, [r6, #0]
 80069c4:	0004      	movs	r4, r0
 80069c6:	2900      	cmp	r1, #0
 80069c8:	d102      	bne.n	80069d0 <sbrk_aligned+0x14>
 80069ca:	f000 fb95 	bl	80070f8 <_sbrk_r>
 80069ce:	6030      	str	r0, [r6, #0]
 80069d0:	0029      	movs	r1, r5
 80069d2:	0020      	movs	r0, r4
 80069d4:	f000 fb90 	bl	80070f8 <_sbrk_r>
 80069d8:	1c43      	adds	r3, r0, #1
 80069da:	d103      	bne.n	80069e4 <sbrk_aligned+0x28>
 80069dc:	2501      	movs	r5, #1
 80069de:	426d      	negs	r5, r5
 80069e0:	0028      	movs	r0, r5
 80069e2:	bd70      	pop	{r4, r5, r6, pc}
 80069e4:	2303      	movs	r3, #3
 80069e6:	1cc5      	adds	r5, r0, #3
 80069e8:	439d      	bics	r5, r3
 80069ea:	42a8      	cmp	r0, r5
 80069ec:	d0f8      	beq.n	80069e0 <sbrk_aligned+0x24>
 80069ee:	1a29      	subs	r1, r5, r0
 80069f0:	0020      	movs	r0, r4
 80069f2:	f000 fb81 	bl	80070f8 <_sbrk_r>
 80069f6:	3001      	adds	r0, #1
 80069f8:	d1f2      	bne.n	80069e0 <sbrk_aligned+0x24>
 80069fa:	e7ef      	b.n	80069dc <sbrk_aligned+0x20>
 80069fc:	20002d20 	.word	0x20002d20

08006a00 <_malloc_r>:
 8006a00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a02:	2203      	movs	r2, #3
 8006a04:	1ccb      	adds	r3, r1, #3
 8006a06:	4393      	bics	r3, r2
 8006a08:	3308      	adds	r3, #8
 8006a0a:	0005      	movs	r5, r0
 8006a0c:	001f      	movs	r7, r3
 8006a0e:	2b0c      	cmp	r3, #12
 8006a10:	d234      	bcs.n	8006a7c <_malloc_r+0x7c>
 8006a12:	270c      	movs	r7, #12
 8006a14:	42b9      	cmp	r1, r7
 8006a16:	d833      	bhi.n	8006a80 <_malloc_r+0x80>
 8006a18:	0028      	movs	r0, r5
 8006a1a:	f000 f871 	bl	8006b00 <__malloc_lock>
 8006a1e:	4e37      	ldr	r6, [pc, #220]	@ (8006afc <_malloc_r+0xfc>)
 8006a20:	6833      	ldr	r3, [r6, #0]
 8006a22:	001c      	movs	r4, r3
 8006a24:	2c00      	cmp	r4, #0
 8006a26:	d12f      	bne.n	8006a88 <_malloc_r+0x88>
 8006a28:	0039      	movs	r1, r7
 8006a2a:	0028      	movs	r0, r5
 8006a2c:	f7ff ffc6 	bl	80069bc <sbrk_aligned>
 8006a30:	0004      	movs	r4, r0
 8006a32:	1c43      	adds	r3, r0, #1
 8006a34:	d15f      	bne.n	8006af6 <_malloc_r+0xf6>
 8006a36:	6834      	ldr	r4, [r6, #0]
 8006a38:	9400      	str	r4, [sp, #0]
 8006a3a:	9b00      	ldr	r3, [sp, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d14a      	bne.n	8006ad6 <_malloc_r+0xd6>
 8006a40:	2c00      	cmp	r4, #0
 8006a42:	d052      	beq.n	8006aea <_malloc_r+0xea>
 8006a44:	6823      	ldr	r3, [r4, #0]
 8006a46:	0028      	movs	r0, r5
 8006a48:	18e3      	adds	r3, r4, r3
 8006a4a:	9900      	ldr	r1, [sp, #0]
 8006a4c:	9301      	str	r3, [sp, #4]
 8006a4e:	f000 fb53 	bl	80070f8 <_sbrk_r>
 8006a52:	9b01      	ldr	r3, [sp, #4]
 8006a54:	4283      	cmp	r3, r0
 8006a56:	d148      	bne.n	8006aea <_malloc_r+0xea>
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	0028      	movs	r0, r5
 8006a5c:	1aff      	subs	r7, r7, r3
 8006a5e:	0039      	movs	r1, r7
 8006a60:	f7ff ffac 	bl	80069bc <sbrk_aligned>
 8006a64:	3001      	adds	r0, #1
 8006a66:	d040      	beq.n	8006aea <_malloc_r+0xea>
 8006a68:	6823      	ldr	r3, [r4, #0]
 8006a6a:	19db      	adds	r3, r3, r7
 8006a6c:	6023      	str	r3, [r4, #0]
 8006a6e:	6833      	ldr	r3, [r6, #0]
 8006a70:	685a      	ldr	r2, [r3, #4]
 8006a72:	2a00      	cmp	r2, #0
 8006a74:	d133      	bne.n	8006ade <_malloc_r+0xde>
 8006a76:	9b00      	ldr	r3, [sp, #0]
 8006a78:	6033      	str	r3, [r6, #0]
 8006a7a:	e019      	b.n	8006ab0 <_malloc_r+0xb0>
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	dac9      	bge.n	8006a14 <_malloc_r+0x14>
 8006a80:	230c      	movs	r3, #12
 8006a82:	602b      	str	r3, [r5, #0]
 8006a84:	2000      	movs	r0, #0
 8006a86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006a88:	6821      	ldr	r1, [r4, #0]
 8006a8a:	1bc9      	subs	r1, r1, r7
 8006a8c:	d420      	bmi.n	8006ad0 <_malloc_r+0xd0>
 8006a8e:	290b      	cmp	r1, #11
 8006a90:	d90a      	bls.n	8006aa8 <_malloc_r+0xa8>
 8006a92:	19e2      	adds	r2, r4, r7
 8006a94:	6027      	str	r7, [r4, #0]
 8006a96:	42a3      	cmp	r3, r4
 8006a98:	d104      	bne.n	8006aa4 <_malloc_r+0xa4>
 8006a9a:	6032      	str	r2, [r6, #0]
 8006a9c:	6863      	ldr	r3, [r4, #4]
 8006a9e:	6011      	str	r1, [r2, #0]
 8006aa0:	6053      	str	r3, [r2, #4]
 8006aa2:	e005      	b.n	8006ab0 <_malloc_r+0xb0>
 8006aa4:	605a      	str	r2, [r3, #4]
 8006aa6:	e7f9      	b.n	8006a9c <_malloc_r+0x9c>
 8006aa8:	6862      	ldr	r2, [r4, #4]
 8006aaa:	42a3      	cmp	r3, r4
 8006aac:	d10e      	bne.n	8006acc <_malloc_r+0xcc>
 8006aae:	6032      	str	r2, [r6, #0]
 8006ab0:	0028      	movs	r0, r5
 8006ab2:	f000 f82d 	bl	8006b10 <__malloc_unlock>
 8006ab6:	0020      	movs	r0, r4
 8006ab8:	2207      	movs	r2, #7
 8006aba:	300b      	adds	r0, #11
 8006abc:	1d23      	adds	r3, r4, #4
 8006abe:	4390      	bics	r0, r2
 8006ac0:	1ac2      	subs	r2, r0, r3
 8006ac2:	4298      	cmp	r0, r3
 8006ac4:	d0df      	beq.n	8006a86 <_malloc_r+0x86>
 8006ac6:	1a1b      	subs	r3, r3, r0
 8006ac8:	50a3      	str	r3, [r4, r2]
 8006aca:	e7dc      	b.n	8006a86 <_malloc_r+0x86>
 8006acc:	605a      	str	r2, [r3, #4]
 8006ace:	e7ef      	b.n	8006ab0 <_malloc_r+0xb0>
 8006ad0:	0023      	movs	r3, r4
 8006ad2:	6864      	ldr	r4, [r4, #4]
 8006ad4:	e7a6      	b.n	8006a24 <_malloc_r+0x24>
 8006ad6:	9c00      	ldr	r4, [sp, #0]
 8006ad8:	6863      	ldr	r3, [r4, #4]
 8006ada:	9300      	str	r3, [sp, #0]
 8006adc:	e7ad      	b.n	8006a3a <_malloc_r+0x3a>
 8006ade:	001a      	movs	r2, r3
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	42a3      	cmp	r3, r4
 8006ae4:	d1fb      	bne.n	8006ade <_malloc_r+0xde>
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	e7da      	b.n	8006aa0 <_malloc_r+0xa0>
 8006aea:	230c      	movs	r3, #12
 8006aec:	0028      	movs	r0, r5
 8006aee:	602b      	str	r3, [r5, #0]
 8006af0:	f000 f80e 	bl	8006b10 <__malloc_unlock>
 8006af4:	e7c6      	b.n	8006a84 <_malloc_r+0x84>
 8006af6:	6007      	str	r7, [r0, #0]
 8006af8:	e7da      	b.n	8006ab0 <_malloc_r+0xb0>
 8006afa:	46c0      	nop			@ (mov r8, r8)
 8006afc:	20002d24 	.word	0x20002d24

08006b00 <__malloc_lock>:
 8006b00:	b510      	push	{r4, lr}
 8006b02:	4802      	ldr	r0, [pc, #8]	@ (8006b0c <__malloc_lock+0xc>)
 8006b04:	f7ff ff0e 	bl	8006924 <__retarget_lock_acquire_recursive>
 8006b08:	bd10      	pop	{r4, pc}
 8006b0a:	46c0      	nop			@ (mov r8, r8)
 8006b0c:	20002d1c 	.word	0x20002d1c

08006b10 <__malloc_unlock>:
 8006b10:	b510      	push	{r4, lr}
 8006b12:	4802      	ldr	r0, [pc, #8]	@ (8006b1c <__malloc_unlock+0xc>)
 8006b14:	f7ff ff07 	bl	8006926 <__retarget_lock_release_recursive>
 8006b18:	bd10      	pop	{r4, pc}
 8006b1a:	46c0      	nop			@ (mov r8, r8)
 8006b1c:	20002d1c 	.word	0x20002d1c

08006b20 <__ssputs_r>:
 8006b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b22:	688e      	ldr	r6, [r1, #8]
 8006b24:	b085      	sub	sp, #20
 8006b26:	001f      	movs	r7, r3
 8006b28:	000c      	movs	r4, r1
 8006b2a:	680b      	ldr	r3, [r1, #0]
 8006b2c:	9002      	str	r0, [sp, #8]
 8006b2e:	9203      	str	r2, [sp, #12]
 8006b30:	42be      	cmp	r6, r7
 8006b32:	d830      	bhi.n	8006b96 <__ssputs_r+0x76>
 8006b34:	210c      	movs	r1, #12
 8006b36:	5e62      	ldrsh	r2, [r4, r1]
 8006b38:	2190      	movs	r1, #144	@ 0x90
 8006b3a:	00c9      	lsls	r1, r1, #3
 8006b3c:	420a      	tst	r2, r1
 8006b3e:	d028      	beq.n	8006b92 <__ssputs_r+0x72>
 8006b40:	2003      	movs	r0, #3
 8006b42:	6921      	ldr	r1, [r4, #16]
 8006b44:	1a5b      	subs	r3, r3, r1
 8006b46:	9301      	str	r3, [sp, #4]
 8006b48:	6963      	ldr	r3, [r4, #20]
 8006b4a:	4343      	muls	r3, r0
 8006b4c:	9801      	ldr	r0, [sp, #4]
 8006b4e:	0fdd      	lsrs	r5, r3, #31
 8006b50:	18ed      	adds	r5, r5, r3
 8006b52:	1c7b      	adds	r3, r7, #1
 8006b54:	181b      	adds	r3, r3, r0
 8006b56:	106d      	asrs	r5, r5, #1
 8006b58:	42ab      	cmp	r3, r5
 8006b5a:	d900      	bls.n	8006b5e <__ssputs_r+0x3e>
 8006b5c:	001d      	movs	r5, r3
 8006b5e:	0552      	lsls	r2, r2, #21
 8006b60:	d528      	bpl.n	8006bb4 <__ssputs_r+0x94>
 8006b62:	0029      	movs	r1, r5
 8006b64:	9802      	ldr	r0, [sp, #8]
 8006b66:	f7ff ff4b 	bl	8006a00 <_malloc_r>
 8006b6a:	1e06      	subs	r6, r0, #0
 8006b6c:	d02c      	beq.n	8006bc8 <__ssputs_r+0xa8>
 8006b6e:	9a01      	ldr	r2, [sp, #4]
 8006b70:	6921      	ldr	r1, [r4, #16]
 8006b72:	f000 fade 	bl	8007132 <memcpy>
 8006b76:	89a2      	ldrh	r2, [r4, #12]
 8006b78:	4b18      	ldr	r3, [pc, #96]	@ (8006bdc <__ssputs_r+0xbc>)
 8006b7a:	401a      	ands	r2, r3
 8006b7c:	2380      	movs	r3, #128	@ 0x80
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	81a3      	strh	r3, [r4, #12]
 8006b82:	9b01      	ldr	r3, [sp, #4]
 8006b84:	6126      	str	r6, [r4, #16]
 8006b86:	18f6      	adds	r6, r6, r3
 8006b88:	6026      	str	r6, [r4, #0]
 8006b8a:	003e      	movs	r6, r7
 8006b8c:	6165      	str	r5, [r4, #20]
 8006b8e:	1aed      	subs	r5, r5, r3
 8006b90:	60a5      	str	r5, [r4, #8]
 8006b92:	42be      	cmp	r6, r7
 8006b94:	d900      	bls.n	8006b98 <__ssputs_r+0x78>
 8006b96:	003e      	movs	r6, r7
 8006b98:	0032      	movs	r2, r6
 8006b9a:	9903      	ldr	r1, [sp, #12]
 8006b9c:	6820      	ldr	r0, [r4, #0]
 8006b9e:	f000 fa99 	bl	80070d4 <memmove>
 8006ba2:	2000      	movs	r0, #0
 8006ba4:	68a3      	ldr	r3, [r4, #8]
 8006ba6:	1b9b      	subs	r3, r3, r6
 8006ba8:	60a3      	str	r3, [r4, #8]
 8006baa:	6823      	ldr	r3, [r4, #0]
 8006bac:	199b      	adds	r3, r3, r6
 8006bae:	6023      	str	r3, [r4, #0]
 8006bb0:	b005      	add	sp, #20
 8006bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bb4:	002a      	movs	r2, r5
 8006bb6:	9802      	ldr	r0, [sp, #8]
 8006bb8:	f000 fac4 	bl	8007144 <_realloc_r>
 8006bbc:	1e06      	subs	r6, r0, #0
 8006bbe:	d1e0      	bne.n	8006b82 <__ssputs_r+0x62>
 8006bc0:	6921      	ldr	r1, [r4, #16]
 8006bc2:	9802      	ldr	r0, [sp, #8]
 8006bc4:	f7ff feb0 	bl	8006928 <_free_r>
 8006bc8:	230c      	movs	r3, #12
 8006bca:	2001      	movs	r0, #1
 8006bcc:	9a02      	ldr	r2, [sp, #8]
 8006bce:	4240      	negs	r0, r0
 8006bd0:	6013      	str	r3, [r2, #0]
 8006bd2:	89a2      	ldrh	r2, [r4, #12]
 8006bd4:	3334      	adds	r3, #52	@ 0x34
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	81a3      	strh	r3, [r4, #12]
 8006bda:	e7e9      	b.n	8006bb0 <__ssputs_r+0x90>
 8006bdc:	fffffb7f 	.word	0xfffffb7f

08006be0 <_svfiprintf_r>:
 8006be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006be2:	b0a1      	sub	sp, #132	@ 0x84
 8006be4:	9003      	str	r0, [sp, #12]
 8006be6:	001d      	movs	r5, r3
 8006be8:	898b      	ldrh	r3, [r1, #12]
 8006bea:	000f      	movs	r7, r1
 8006bec:	0016      	movs	r6, r2
 8006bee:	061b      	lsls	r3, r3, #24
 8006bf0:	d511      	bpl.n	8006c16 <_svfiprintf_r+0x36>
 8006bf2:	690b      	ldr	r3, [r1, #16]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10e      	bne.n	8006c16 <_svfiprintf_r+0x36>
 8006bf8:	2140      	movs	r1, #64	@ 0x40
 8006bfa:	f7ff ff01 	bl	8006a00 <_malloc_r>
 8006bfe:	6038      	str	r0, [r7, #0]
 8006c00:	6138      	str	r0, [r7, #16]
 8006c02:	2800      	cmp	r0, #0
 8006c04:	d105      	bne.n	8006c12 <_svfiprintf_r+0x32>
 8006c06:	230c      	movs	r3, #12
 8006c08:	9a03      	ldr	r2, [sp, #12]
 8006c0a:	6013      	str	r3, [r2, #0]
 8006c0c:	2001      	movs	r0, #1
 8006c0e:	4240      	negs	r0, r0
 8006c10:	e0cf      	b.n	8006db2 <_svfiprintf_r+0x1d2>
 8006c12:	2340      	movs	r3, #64	@ 0x40
 8006c14:	617b      	str	r3, [r7, #20]
 8006c16:	2300      	movs	r3, #0
 8006c18:	ac08      	add	r4, sp, #32
 8006c1a:	6163      	str	r3, [r4, #20]
 8006c1c:	3320      	adds	r3, #32
 8006c1e:	7663      	strb	r3, [r4, #25]
 8006c20:	3310      	adds	r3, #16
 8006c22:	76a3      	strb	r3, [r4, #26]
 8006c24:	9507      	str	r5, [sp, #28]
 8006c26:	0035      	movs	r5, r6
 8006c28:	782b      	ldrb	r3, [r5, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <_svfiprintf_r+0x52>
 8006c2e:	2b25      	cmp	r3, #37	@ 0x25
 8006c30:	d148      	bne.n	8006cc4 <_svfiprintf_r+0xe4>
 8006c32:	1bab      	subs	r3, r5, r6
 8006c34:	9305      	str	r3, [sp, #20]
 8006c36:	42b5      	cmp	r5, r6
 8006c38:	d00b      	beq.n	8006c52 <_svfiprintf_r+0x72>
 8006c3a:	0032      	movs	r2, r6
 8006c3c:	0039      	movs	r1, r7
 8006c3e:	9803      	ldr	r0, [sp, #12]
 8006c40:	f7ff ff6e 	bl	8006b20 <__ssputs_r>
 8006c44:	3001      	adds	r0, #1
 8006c46:	d100      	bne.n	8006c4a <_svfiprintf_r+0x6a>
 8006c48:	e0ae      	b.n	8006da8 <_svfiprintf_r+0x1c8>
 8006c4a:	6963      	ldr	r3, [r4, #20]
 8006c4c:	9a05      	ldr	r2, [sp, #20]
 8006c4e:	189b      	adds	r3, r3, r2
 8006c50:	6163      	str	r3, [r4, #20]
 8006c52:	782b      	ldrb	r3, [r5, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d100      	bne.n	8006c5a <_svfiprintf_r+0x7a>
 8006c58:	e0a6      	b.n	8006da8 <_svfiprintf_r+0x1c8>
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	4252      	negs	r2, r2
 8006c60:	6062      	str	r2, [r4, #4]
 8006c62:	a904      	add	r1, sp, #16
 8006c64:	3254      	adds	r2, #84	@ 0x54
 8006c66:	1852      	adds	r2, r2, r1
 8006c68:	1c6e      	adds	r6, r5, #1
 8006c6a:	6023      	str	r3, [r4, #0]
 8006c6c:	60e3      	str	r3, [r4, #12]
 8006c6e:	60a3      	str	r3, [r4, #8]
 8006c70:	7013      	strb	r3, [r2, #0]
 8006c72:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006c74:	4b54      	ldr	r3, [pc, #336]	@ (8006dc8 <_svfiprintf_r+0x1e8>)
 8006c76:	2205      	movs	r2, #5
 8006c78:	0018      	movs	r0, r3
 8006c7a:	7831      	ldrb	r1, [r6, #0]
 8006c7c:	9305      	str	r3, [sp, #20]
 8006c7e:	f000 fa4d 	bl	800711c <memchr>
 8006c82:	1c75      	adds	r5, r6, #1
 8006c84:	2800      	cmp	r0, #0
 8006c86:	d11f      	bne.n	8006cc8 <_svfiprintf_r+0xe8>
 8006c88:	6822      	ldr	r2, [r4, #0]
 8006c8a:	06d3      	lsls	r3, r2, #27
 8006c8c:	d504      	bpl.n	8006c98 <_svfiprintf_r+0xb8>
 8006c8e:	2353      	movs	r3, #83	@ 0x53
 8006c90:	a904      	add	r1, sp, #16
 8006c92:	185b      	adds	r3, r3, r1
 8006c94:	2120      	movs	r1, #32
 8006c96:	7019      	strb	r1, [r3, #0]
 8006c98:	0713      	lsls	r3, r2, #28
 8006c9a:	d504      	bpl.n	8006ca6 <_svfiprintf_r+0xc6>
 8006c9c:	2353      	movs	r3, #83	@ 0x53
 8006c9e:	a904      	add	r1, sp, #16
 8006ca0:	185b      	adds	r3, r3, r1
 8006ca2:	212b      	movs	r1, #43	@ 0x2b
 8006ca4:	7019      	strb	r1, [r3, #0]
 8006ca6:	7833      	ldrb	r3, [r6, #0]
 8006ca8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006caa:	d016      	beq.n	8006cda <_svfiprintf_r+0xfa>
 8006cac:	0035      	movs	r5, r6
 8006cae:	2100      	movs	r1, #0
 8006cb0:	200a      	movs	r0, #10
 8006cb2:	68e3      	ldr	r3, [r4, #12]
 8006cb4:	782a      	ldrb	r2, [r5, #0]
 8006cb6:	1c6e      	adds	r6, r5, #1
 8006cb8:	3a30      	subs	r2, #48	@ 0x30
 8006cba:	2a09      	cmp	r2, #9
 8006cbc:	d950      	bls.n	8006d60 <_svfiprintf_r+0x180>
 8006cbe:	2900      	cmp	r1, #0
 8006cc0:	d111      	bne.n	8006ce6 <_svfiprintf_r+0x106>
 8006cc2:	e017      	b.n	8006cf4 <_svfiprintf_r+0x114>
 8006cc4:	3501      	adds	r5, #1
 8006cc6:	e7af      	b.n	8006c28 <_svfiprintf_r+0x48>
 8006cc8:	9b05      	ldr	r3, [sp, #20]
 8006cca:	6822      	ldr	r2, [r4, #0]
 8006ccc:	1ac0      	subs	r0, r0, r3
 8006cce:	2301      	movs	r3, #1
 8006cd0:	4083      	lsls	r3, r0
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	002e      	movs	r6, r5
 8006cd6:	6023      	str	r3, [r4, #0]
 8006cd8:	e7cc      	b.n	8006c74 <_svfiprintf_r+0x94>
 8006cda:	9b07      	ldr	r3, [sp, #28]
 8006cdc:	1d19      	adds	r1, r3, #4
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	9107      	str	r1, [sp, #28]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	db01      	blt.n	8006cea <_svfiprintf_r+0x10a>
 8006ce6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ce8:	e004      	b.n	8006cf4 <_svfiprintf_r+0x114>
 8006cea:	425b      	negs	r3, r3
 8006cec:	60e3      	str	r3, [r4, #12]
 8006cee:	2302      	movs	r3, #2
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	6023      	str	r3, [r4, #0]
 8006cf4:	782b      	ldrb	r3, [r5, #0]
 8006cf6:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cf8:	d10c      	bne.n	8006d14 <_svfiprintf_r+0x134>
 8006cfa:	786b      	ldrb	r3, [r5, #1]
 8006cfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cfe:	d134      	bne.n	8006d6a <_svfiprintf_r+0x18a>
 8006d00:	9b07      	ldr	r3, [sp, #28]
 8006d02:	3502      	adds	r5, #2
 8006d04:	1d1a      	adds	r2, r3, #4
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	9207      	str	r2, [sp, #28]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	da01      	bge.n	8006d12 <_svfiprintf_r+0x132>
 8006d0e:	2301      	movs	r3, #1
 8006d10:	425b      	negs	r3, r3
 8006d12:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d14:	4e2d      	ldr	r6, [pc, #180]	@ (8006dcc <_svfiprintf_r+0x1ec>)
 8006d16:	2203      	movs	r2, #3
 8006d18:	0030      	movs	r0, r6
 8006d1a:	7829      	ldrb	r1, [r5, #0]
 8006d1c:	f000 f9fe 	bl	800711c <memchr>
 8006d20:	2800      	cmp	r0, #0
 8006d22:	d006      	beq.n	8006d32 <_svfiprintf_r+0x152>
 8006d24:	2340      	movs	r3, #64	@ 0x40
 8006d26:	1b80      	subs	r0, r0, r6
 8006d28:	4083      	lsls	r3, r0
 8006d2a:	6822      	ldr	r2, [r4, #0]
 8006d2c:	3501      	adds	r5, #1
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	6023      	str	r3, [r4, #0]
 8006d32:	7829      	ldrb	r1, [r5, #0]
 8006d34:	2206      	movs	r2, #6
 8006d36:	4826      	ldr	r0, [pc, #152]	@ (8006dd0 <_svfiprintf_r+0x1f0>)
 8006d38:	1c6e      	adds	r6, r5, #1
 8006d3a:	7621      	strb	r1, [r4, #24]
 8006d3c:	f000 f9ee 	bl	800711c <memchr>
 8006d40:	2800      	cmp	r0, #0
 8006d42:	d038      	beq.n	8006db6 <_svfiprintf_r+0x1d6>
 8006d44:	4b23      	ldr	r3, [pc, #140]	@ (8006dd4 <_svfiprintf_r+0x1f4>)
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d122      	bne.n	8006d90 <_svfiprintf_r+0x1b0>
 8006d4a:	2207      	movs	r2, #7
 8006d4c:	9b07      	ldr	r3, [sp, #28]
 8006d4e:	3307      	adds	r3, #7
 8006d50:	4393      	bics	r3, r2
 8006d52:	3308      	adds	r3, #8
 8006d54:	9307      	str	r3, [sp, #28]
 8006d56:	6963      	ldr	r3, [r4, #20]
 8006d58:	9a04      	ldr	r2, [sp, #16]
 8006d5a:	189b      	adds	r3, r3, r2
 8006d5c:	6163      	str	r3, [r4, #20]
 8006d5e:	e762      	b.n	8006c26 <_svfiprintf_r+0x46>
 8006d60:	4343      	muls	r3, r0
 8006d62:	0035      	movs	r5, r6
 8006d64:	2101      	movs	r1, #1
 8006d66:	189b      	adds	r3, r3, r2
 8006d68:	e7a4      	b.n	8006cb4 <_svfiprintf_r+0xd4>
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	200a      	movs	r0, #10
 8006d6e:	0019      	movs	r1, r3
 8006d70:	3501      	adds	r5, #1
 8006d72:	6063      	str	r3, [r4, #4]
 8006d74:	782a      	ldrb	r2, [r5, #0]
 8006d76:	1c6e      	adds	r6, r5, #1
 8006d78:	3a30      	subs	r2, #48	@ 0x30
 8006d7a:	2a09      	cmp	r2, #9
 8006d7c:	d903      	bls.n	8006d86 <_svfiprintf_r+0x1a6>
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d0c8      	beq.n	8006d14 <_svfiprintf_r+0x134>
 8006d82:	9109      	str	r1, [sp, #36]	@ 0x24
 8006d84:	e7c6      	b.n	8006d14 <_svfiprintf_r+0x134>
 8006d86:	4341      	muls	r1, r0
 8006d88:	0035      	movs	r5, r6
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	1889      	adds	r1, r1, r2
 8006d8e:	e7f1      	b.n	8006d74 <_svfiprintf_r+0x194>
 8006d90:	aa07      	add	r2, sp, #28
 8006d92:	9200      	str	r2, [sp, #0]
 8006d94:	0021      	movs	r1, r4
 8006d96:	003a      	movs	r2, r7
 8006d98:	4b0f      	ldr	r3, [pc, #60]	@ (8006dd8 <_svfiprintf_r+0x1f8>)
 8006d9a:	9803      	ldr	r0, [sp, #12]
 8006d9c:	e000      	b.n	8006da0 <_svfiprintf_r+0x1c0>
 8006d9e:	bf00      	nop
 8006da0:	9004      	str	r0, [sp, #16]
 8006da2:	9b04      	ldr	r3, [sp, #16]
 8006da4:	3301      	adds	r3, #1
 8006da6:	d1d6      	bne.n	8006d56 <_svfiprintf_r+0x176>
 8006da8:	89bb      	ldrh	r3, [r7, #12]
 8006daa:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006dac:	065b      	lsls	r3, r3, #25
 8006dae:	d500      	bpl.n	8006db2 <_svfiprintf_r+0x1d2>
 8006db0:	e72c      	b.n	8006c0c <_svfiprintf_r+0x2c>
 8006db2:	b021      	add	sp, #132	@ 0x84
 8006db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006db6:	aa07      	add	r2, sp, #28
 8006db8:	9200      	str	r2, [sp, #0]
 8006dba:	0021      	movs	r1, r4
 8006dbc:	003a      	movs	r2, r7
 8006dbe:	4b06      	ldr	r3, [pc, #24]	@ (8006dd8 <_svfiprintf_r+0x1f8>)
 8006dc0:	9803      	ldr	r0, [sp, #12]
 8006dc2:	f000 f87b 	bl	8006ebc <_printf_i>
 8006dc6:	e7eb      	b.n	8006da0 <_svfiprintf_r+0x1c0>
 8006dc8:	08007bc4 	.word	0x08007bc4
 8006dcc:	08007bca 	.word	0x08007bca
 8006dd0:	08007bce 	.word	0x08007bce
 8006dd4:	00000000 	.word	0x00000000
 8006dd8:	08006b21 	.word	0x08006b21

08006ddc <_printf_common>:
 8006ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dde:	0016      	movs	r6, r2
 8006de0:	9301      	str	r3, [sp, #4]
 8006de2:	688a      	ldr	r2, [r1, #8]
 8006de4:	690b      	ldr	r3, [r1, #16]
 8006de6:	000c      	movs	r4, r1
 8006de8:	9000      	str	r0, [sp, #0]
 8006dea:	4293      	cmp	r3, r2
 8006dec:	da00      	bge.n	8006df0 <_printf_common+0x14>
 8006dee:	0013      	movs	r3, r2
 8006df0:	0022      	movs	r2, r4
 8006df2:	6033      	str	r3, [r6, #0]
 8006df4:	3243      	adds	r2, #67	@ 0x43
 8006df6:	7812      	ldrb	r2, [r2, #0]
 8006df8:	2a00      	cmp	r2, #0
 8006dfa:	d001      	beq.n	8006e00 <_printf_common+0x24>
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	6033      	str	r3, [r6, #0]
 8006e00:	6823      	ldr	r3, [r4, #0]
 8006e02:	069b      	lsls	r3, r3, #26
 8006e04:	d502      	bpl.n	8006e0c <_printf_common+0x30>
 8006e06:	6833      	ldr	r3, [r6, #0]
 8006e08:	3302      	adds	r3, #2
 8006e0a:	6033      	str	r3, [r6, #0]
 8006e0c:	6822      	ldr	r2, [r4, #0]
 8006e0e:	2306      	movs	r3, #6
 8006e10:	0015      	movs	r5, r2
 8006e12:	401d      	ands	r5, r3
 8006e14:	421a      	tst	r2, r3
 8006e16:	d027      	beq.n	8006e68 <_printf_common+0x8c>
 8006e18:	0023      	movs	r3, r4
 8006e1a:	3343      	adds	r3, #67	@ 0x43
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	1e5a      	subs	r2, r3, #1
 8006e20:	4193      	sbcs	r3, r2
 8006e22:	6822      	ldr	r2, [r4, #0]
 8006e24:	0692      	lsls	r2, r2, #26
 8006e26:	d430      	bmi.n	8006e8a <_printf_common+0xae>
 8006e28:	0022      	movs	r2, r4
 8006e2a:	9901      	ldr	r1, [sp, #4]
 8006e2c:	9800      	ldr	r0, [sp, #0]
 8006e2e:	9d08      	ldr	r5, [sp, #32]
 8006e30:	3243      	adds	r2, #67	@ 0x43
 8006e32:	47a8      	blx	r5
 8006e34:	3001      	adds	r0, #1
 8006e36:	d025      	beq.n	8006e84 <_printf_common+0xa8>
 8006e38:	2206      	movs	r2, #6
 8006e3a:	6823      	ldr	r3, [r4, #0]
 8006e3c:	2500      	movs	r5, #0
 8006e3e:	4013      	ands	r3, r2
 8006e40:	2b04      	cmp	r3, #4
 8006e42:	d105      	bne.n	8006e50 <_printf_common+0x74>
 8006e44:	6833      	ldr	r3, [r6, #0]
 8006e46:	68e5      	ldr	r5, [r4, #12]
 8006e48:	1aed      	subs	r5, r5, r3
 8006e4a:	43eb      	mvns	r3, r5
 8006e4c:	17db      	asrs	r3, r3, #31
 8006e4e:	401d      	ands	r5, r3
 8006e50:	68a3      	ldr	r3, [r4, #8]
 8006e52:	6922      	ldr	r2, [r4, #16]
 8006e54:	4293      	cmp	r3, r2
 8006e56:	dd01      	ble.n	8006e5c <_printf_common+0x80>
 8006e58:	1a9b      	subs	r3, r3, r2
 8006e5a:	18ed      	adds	r5, r5, r3
 8006e5c:	2600      	movs	r6, #0
 8006e5e:	42b5      	cmp	r5, r6
 8006e60:	d120      	bne.n	8006ea4 <_printf_common+0xc8>
 8006e62:	2000      	movs	r0, #0
 8006e64:	e010      	b.n	8006e88 <_printf_common+0xac>
 8006e66:	3501      	adds	r5, #1
 8006e68:	68e3      	ldr	r3, [r4, #12]
 8006e6a:	6832      	ldr	r2, [r6, #0]
 8006e6c:	1a9b      	subs	r3, r3, r2
 8006e6e:	42ab      	cmp	r3, r5
 8006e70:	ddd2      	ble.n	8006e18 <_printf_common+0x3c>
 8006e72:	0022      	movs	r2, r4
 8006e74:	2301      	movs	r3, #1
 8006e76:	9901      	ldr	r1, [sp, #4]
 8006e78:	9800      	ldr	r0, [sp, #0]
 8006e7a:	9f08      	ldr	r7, [sp, #32]
 8006e7c:	3219      	adds	r2, #25
 8006e7e:	47b8      	blx	r7
 8006e80:	3001      	adds	r0, #1
 8006e82:	d1f0      	bne.n	8006e66 <_printf_common+0x8a>
 8006e84:	2001      	movs	r0, #1
 8006e86:	4240      	negs	r0, r0
 8006e88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006e8a:	2030      	movs	r0, #48	@ 0x30
 8006e8c:	18e1      	adds	r1, r4, r3
 8006e8e:	3143      	adds	r1, #67	@ 0x43
 8006e90:	7008      	strb	r0, [r1, #0]
 8006e92:	0021      	movs	r1, r4
 8006e94:	1c5a      	adds	r2, r3, #1
 8006e96:	3145      	adds	r1, #69	@ 0x45
 8006e98:	7809      	ldrb	r1, [r1, #0]
 8006e9a:	18a2      	adds	r2, r4, r2
 8006e9c:	3243      	adds	r2, #67	@ 0x43
 8006e9e:	3302      	adds	r3, #2
 8006ea0:	7011      	strb	r1, [r2, #0]
 8006ea2:	e7c1      	b.n	8006e28 <_printf_common+0x4c>
 8006ea4:	0022      	movs	r2, r4
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	9901      	ldr	r1, [sp, #4]
 8006eaa:	9800      	ldr	r0, [sp, #0]
 8006eac:	9f08      	ldr	r7, [sp, #32]
 8006eae:	321a      	adds	r2, #26
 8006eb0:	47b8      	blx	r7
 8006eb2:	3001      	adds	r0, #1
 8006eb4:	d0e6      	beq.n	8006e84 <_printf_common+0xa8>
 8006eb6:	3601      	adds	r6, #1
 8006eb8:	e7d1      	b.n	8006e5e <_printf_common+0x82>
	...

08006ebc <_printf_i>:
 8006ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ebe:	b08b      	sub	sp, #44	@ 0x2c
 8006ec0:	9206      	str	r2, [sp, #24]
 8006ec2:	000a      	movs	r2, r1
 8006ec4:	3243      	adds	r2, #67	@ 0x43
 8006ec6:	9307      	str	r3, [sp, #28]
 8006ec8:	9005      	str	r0, [sp, #20]
 8006eca:	9203      	str	r2, [sp, #12]
 8006ecc:	7e0a      	ldrb	r2, [r1, #24]
 8006ece:	000c      	movs	r4, r1
 8006ed0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006ed2:	2a78      	cmp	r2, #120	@ 0x78
 8006ed4:	d809      	bhi.n	8006eea <_printf_i+0x2e>
 8006ed6:	2a62      	cmp	r2, #98	@ 0x62
 8006ed8:	d80b      	bhi.n	8006ef2 <_printf_i+0x36>
 8006eda:	2a00      	cmp	r2, #0
 8006edc:	d100      	bne.n	8006ee0 <_printf_i+0x24>
 8006ede:	e0ba      	b.n	8007056 <_printf_i+0x19a>
 8006ee0:	497a      	ldr	r1, [pc, #488]	@ (80070cc <_printf_i+0x210>)
 8006ee2:	9104      	str	r1, [sp, #16]
 8006ee4:	2a58      	cmp	r2, #88	@ 0x58
 8006ee6:	d100      	bne.n	8006eea <_printf_i+0x2e>
 8006ee8:	e08e      	b.n	8007008 <_printf_i+0x14c>
 8006eea:	0025      	movs	r5, r4
 8006eec:	3542      	adds	r5, #66	@ 0x42
 8006eee:	702a      	strb	r2, [r5, #0]
 8006ef0:	e022      	b.n	8006f38 <_printf_i+0x7c>
 8006ef2:	0010      	movs	r0, r2
 8006ef4:	3863      	subs	r0, #99	@ 0x63
 8006ef6:	2815      	cmp	r0, #21
 8006ef8:	d8f7      	bhi.n	8006eea <_printf_i+0x2e>
 8006efa:	f7f9 f903 	bl	8000104 <__gnu_thumb1_case_shi>
 8006efe:	0016      	.short	0x0016
 8006f00:	fff6001f 	.word	0xfff6001f
 8006f04:	fff6fff6 	.word	0xfff6fff6
 8006f08:	001ffff6 	.word	0x001ffff6
 8006f0c:	fff6fff6 	.word	0xfff6fff6
 8006f10:	fff6fff6 	.word	0xfff6fff6
 8006f14:	0036009f 	.word	0x0036009f
 8006f18:	fff6007e 	.word	0xfff6007e
 8006f1c:	00b0fff6 	.word	0x00b0fff6
 8006f20:	0036fff6 	.word	0x0036fff6
 8006f24:	fff6fff6 	.word	0xfff6fff6
 8006f28:	0082      	.short	0x0082
 8006f2a:	0025      	movs	r5, r4
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	3542      	adds	r5, #66	@ 0x42
 8006f30:	1d11      	adds	r1, r2, #4
 8006f32:	6019      	str	r1, [r3, #0]
 8006f34:	6813      	ldr	r3, [r2, #0]
 8006f36:	702b      	strb	r3, [r5, #0]
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e09e      	b.n	800707a <_printf_i+0x1be>
 8006f3c:	6818      	ldr	r0, [r3, #0]
 8006f3e:	6809      	ldr	r1, [r1, #0]
 8006f40:	1d02      	adds	r2, r0, #4
 8006f42:	060d      	lsls	r5, r1, #24
 8006f44:	d50b      	bpl.n	8006f5e <_printf_i+0xa2>
 8006f46:	6806      	ldr	r6, [r0, #0]
 8006f48:	601a      	str	r2, [r3, #0]
 8006f4a:	2e00      	cmp	r6, #0
 8006f4c:	da03      	bge.n	8006f56 <_printf_i+0x9a>
 8006f4e:	232d      	movs	r3, #45	@ 0x2d
 8006f50:	9a03      	ldr	r2, [sp, #12]
 8006f52:	4276      	negs	r6, r6
 8006f54:	7013      	strb	r3, [r2, #0]
 8006f56:	4b5d      	ldr	r3, [pc, #372]	@ (80070cc <_printf_i+0x210>)
 8006f58:	270a      	movs	r7, #10
 8006f5a:	9304      	str	r3, [sp, #16]
 8006f5c:	e018      	b.n	8006f90 <_printf_i+0xd4>
 8006f5e:	6806      	ldr	r6, [r0, #0]
 8006f60:	601a      	str	r2, [r3, #0]
 8006f62:	0649      	lsls	r1, r1, #25
 8006f64:	d5f1      	bpl.n	8006f4a <_printf_i+0x8e>
 8006f66:	b236      	sxth	r6, r6
 8006f68:	e7ef      	b.n	8006f4a <_printf_i+0x8e>
 8006f6a:	6808      	ldr	r0, [r1, #0]
 8006f6c:	6819      	ldr	r1, [r3, #0]
 8006f6e:	c940      	ldmia	r1!, {r6}
 8006f70:	0605      	lsls	r5, r0, #24
 8006f72:	d402      	bmi.n	8006f7a <_printf_i+0xbe>
 8006f74:	0640      	lsls	r0, r0, #25
 8006f76:	d500      	bpl.n	8006f7a <_printf_i+0xbe>
 8006f78:	b2b6      	uxth	r6, r6
 8006f7a:	6019      	str	r1, [r3, #0]
 8006f7c:	4b53      	ldr	r3, [pc, #332]	@ (80070cc <_printf_i+0x210>)
 8006f7e:	270a      	movs	r7, #10
 8006f80:	9304      	str	r3, [sp, #16]
 8006f82:	2a6f      	cmp	r2, #111	@ 0x6f
 8006f84:	d100      	bne.n	8006f88 <_printf_i+0xcc>
 8006f86:	3f02      	subs	r7, #2
 8006f88:	0023      	movs	r3, r4
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	3343      	adds	r3, #67	@ 0x43
 8006f8e:	701a      	strb	r2, [r3, #0]
 8006f90:	6863      	ldr	r3, [r4, #4]
 8006f92:	60a3      	str	r3, [r4, #8]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	db06      	blt.n	8006fa6 <_printf_i+0xea>
 8006f98:	2104      	movs	r1, #4
 8006f9a:	6822      	ldr	r2, [r4, #0]
 8006f9c:	9d03      	ldr	r5, [sp, #12]
 8006f9e:	438a      	bics	r2, r1
 8006fa0:	6022      	str	r2, [r4, #0]
 8006fa2:	4333      	orrs	r3, r6
 8006fa4:	d00c      	beq.n	8006fc0 <_printf_i+0x104>
 8006fa6:	9d03      	ldr	r5, [sp, #12]
 8006fa8:	0030      	movs	r0, r6
 8006faa:	0039      	movs	r1, r7
 8006fac:	f7f9 f93a 	bl	8000224 <__aeabi_uidivmod>
 8006fb0:	9b04      	ldr	r3, [sp, #16]
 8006fb2:	3d01      	subs	r5, #1
 8006fb4:	5c5b      	ldrb	r3, [r3, r1]
 8006fb6:	702b      	strb	r3, [r5, #0]
 8006fb8:	0033      	movs	r3, r6
 8006fba:	0006      	movs	r6, r0
 8006fbc:	429f      	cmp	r7, r3
 8006fbe:	d9f3      	bls.n	8006fa8 <_printf_i+0xec>
 8006fc0:	2f08      	cmp	r7, #8
 8006fc2:	d109      	bne.n	8006fd8 <_printf_i+0x11c>
 8006fc4:	6823      	ldr	r3, [r4, #0]
 8006fc6:	07db      	lsls	r3, r3, #31
 8006fc8:	d506      	bpl.n	8006fd8 <_printf_i+0x11c>
 8006fca:	6862      	ldr	r2, [r4, #4]
 8006fcc:	6923      	ldr	r3, [r4, #16]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	dc02      	bgt.n	8006fd8 <_printf_i+0x11c>
 8006fd2:	2330      	movs	r3, #48	@ 0x30
 8006fd4:	3d01      	subs	r5, #1
 8006fd6:	702b      	strb	r3, [r5, #0]
 8006fd8:	9b03      	ldr	r3, [sp, #12]
 8006fda:	1b5b      	subs	r3, r3, r5
 8006fdc:	6123      	str	r3, [r4, #16]
 8006fde:	9b07      	ldr	r3, [sp, #28]
 8006fe0:	0021      	movs	r1, r4
 8006fe2:	9300      	str	r3, [sp, #0]
 8006fe4:	9805      	ldr	r0, [sp, #20]
 8006fe6:	9b06      	ldr	r3, [sp, #24]
 8006fe8:	aa09      	add	r2, sp, #36	@ 0x24
 8006fea:	f7ff fef7 	bl	8006ddc <_printf_common>
 8006fee:	3001      	adds	r0, #1
 8006ff0:	d148      	bne.n	8007084 <_printf_i+0x1c8>
 8006ff2:	2001      	movs	r0, #1
 8006ff4:	4240      	negs	r0, r0
 8006ff6:	b00b      	add	sp, #44	@ 0x2c
 8006ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ffa:	2220      	movs	r2, #32
 8006ffc:	6809      	ldr	r1, [r1, #0]
 8006ffe:	430a      	orrs	r2, r1
 8007000:	6022      	str	r2, [r4, #0]
 8007002:	2278      	movs	r2, #120	@ 0x78
 8007004:	4932      	ldr	r1, [pc, #200]	@ (80070d0 <_printf_i+0x214>)
 8007006:	9104      	str	r1, [sp, #16]
 8007008:	0021      	movs	r1, r4
 800700a:	3145      	adds	r1, #69	@ 0x45
 800700c:	700a      	strb	r2, [r1, #0]
 800700e:	6819      	ldr	r1, [r3, #0]
 8007010:	6822      	ldr	r2, [r4, #0]
 8007012:	c940      	ldmia	r1!, {r6}
 8007014:	0610      	lsls	r0, r2, #24
 8007016:	d402      	bmi.n	800701e <_printf_i+0x162>
 8007018:	0650      	lsls	r0, r2, #25
 800701a:	d500      	bpl.n	800701e <_printf_i+0x162>
 800701c:	b2b6      	uxth	r6, r6
 800701e:	6019      	str	r1, [r3, #0]
 8007020:	07d3      	lsls	r3, r2, #31
 8007022:	d502      	bpl.n	800702a <_printf_i+0x16e>
 8007024:	2320      	movs	r3, #32
 8007026:	4313      	orrs	r3, r2
 8007028:	6023      	str	r3, [r4, #0]
 800702a:	2e00      	cmp	r6, #0
 800702c:	d001      	beq.n	8007032 <_printf_i+0x176>
 800702e:	2710      	movs	r7, #16
 8007030:	e7aa      	b.n	8006f88 <_printf_i+0xcc>
 8007032:	2220      	movs	r2, #32
 8007034:	6823      	ldr	r3, [r4, #0]
 8007036:	4393      	bics	r3, r2
 8007038:	6023      	str	r3, [r4, #0]
 800703a:	e7f8      	b.n	800702e <_printf_i+0x172>
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	680d      	ldr	r5, [r1, #0]
 8007040:	1d10      	adds	r0, r2, #4
 8007042:	6949      	ldr	r1, [r1, #20]
 8007044:	6018      	str	r0, [r3, #0]
 8007046:	6813      	ldr	r3, [r2, #0]
 8007048:	062e      	lsls	r6, r5, #24
 800704a:	d501      	bpl.n	8007050 <_printf_i+0x194>
 800704c:	6019      	str	r1, [r3, #0]
 800704e:	e002      	b.n	8007056 <_printf_i+0x19a>
 8007050:	066d      	lsls	r5, r5, #25
 8007052:	d5fb      	bpl.n	800704c <_printf_i+0x190>
 8007054:	8019      	strh	r1, [r3, #0]
 8007056:	2300      	movs	r3, #0
 8007058:	9d03      	ldr	r5, [sp, #12]
 800705a:	6123      	str	r3, [r4, #16]
 800705c:	e7bf      	b.n	8006fde <_printf_i+0x122>
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	1d11      	adds	r1, r2, #4
 8007062:	6019      	str	r1, [r3, #0]
 8007064:	6815      	ldr	r5, [r2, #0]
 8007066:	2100      	movs	r1, #0
 8007068:	0028      	movs	r0, r5
 800706a:	6862      	ldr	r2, [r4, #4]
 800706c:	f000 f856 	bl	800711c <memchr>
 8007070:	2800      	cmp	r0, #0
 8007072:	d001      	beq.n	8007078 <_printf_i+0x1bc>
 8007074:	1b40      	subs	r0, r0, r5
 8007076:	6060      	str	r0, [r4, #4]
 8007078:	6863      	ldr	r3, [r4, #4]
 800707a:	6123      	str	r3, [r4, #16]
 800707c:	2300      	movs	r3, #0
 800707e:	9a03      	ldr	r2, [sp, #12]
 8007080:	7013      	strb	r3, [r2, #0]
 8007082:	e7ac      	b.n	8006fde <_printf_i+0x122>
 8007084:	002a      	movs	r2, r5
 8007086:	6923      	ldr	r3, [r4, #16]
 8007088:	9906      	ldr	r1, [sp, #24]
 800708a:	9805      	ldr	r0, [sp, #20]
 800708c:	9d07      	ldr	r5, [sp, #28]
 800708e:	47a8      	blx	r5
 8007090:	3001      	adds	r0, #1
 8007092:	d0ae      	beq.n	8006ff2 <_printf_i+0x136>
 8007094:	6823      	ldr	r3, [r4, #0]
 8007096:	079b      	lsls	r3, r3, #30
 8007098:	d415      	bmi.n	80070c6 <_printf_i+0x20a>
 800709a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800709c:	68e0      	ldr	r0, [r4, #12]
 800709e:	4298      	cmp	r0, r3
 80070a0:	daa9      	bge.n	8006ff6 <_printf_i+0x13a>
 80070a2:	0018      	movs	r0, r3
 80070a4:	e7a7      	b.n	8006ff6 <_printf_i+0x13a>
 80070a6:	0022      	movs	r2, r4
 80070a8:	2301      	movs	r3, #1
 80070aa:	9906      	ldr	r1, [sp, #24]
 80070ac:	9805      	ldr	r0, [sp, #20]
 80070ae:	9e07      	ldr	r6, [sp, #28]
 80070b0:	3219      	adds	r2, #25
 80070b2:	47b0      	blx	r6
 80070b4:	3001      	adds	r0, #1
 80070b6:	d09c      	beq.n	8006ff2 <_printf_i+0x136>
 80070b8:	3501      	adds	r5, #1
 80070ba:	68e3      	ldr	r3, [r4, #12]
 80070bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070be:	1a9b      	subs	r3, r3, r2
 80070c0:	42ab      	cmp	r3, r5
 80070c2:	dcf0      	bgt.n	80070a6 <_printf_i+0x1ea>
 80070c4:	e7e9      	b.n	800709a <_printf_i+0x1de>
 80070c6:	2500      	movs	r5, #0
 80070c8:	e7f7      	b.n	80070ba <_printf_i+0x1fe>
 80070ca:	46c0      	nop			@ (mov r8, r8)
 80070cc:	08007bd5 	.word	0x08007bd5
 80070d0:	08007be6 	.word	0x08007be6

080070d4 <memmove>:
 80070d4:	b510      	push	{r4, lr}
 80070d6:	4288      	cmp	r0, r1
 80070d8:	d902      	bls.n	80070e0 <memmove+0xc>
 80070da:	188b      	adds	r3, r1, r2
 80070dc:	4298      	cmp	r0, r3
 80070de:	d308      	bcc.n	80070f2 <memmove+0x1e>
 80070e0:	2300      	movs	r3, #0
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d007      	beq.n	80070f6 <memmove+0x22>
 80070e6:	5ccc      	ldrb	r4, [r1, r3]
 80070e8:	54c4      	strb	r4, [r0, r3]
 80070ea:	3301      	adds	r3, #1
 80070ec:	e7f9      	b.n	80070e2 <memmove+0xe>
 80070ee:	5c8b      	ldrb	r3, [r1, r2]
 80070f0:	5483      	strb	r3, [r0, r2]
 80070f2:	3a01      	subs	r2, #1
 80070f4:	d2fb      	bcs.n	80070ee <memmove+0x1a>
 80070f6:	bd10      	pop	{r4, pc}

080070f8 <_sbrk_r>:
 80070f8:	2300      	movs	r3, #0
 80070fa:	b570      	push	{r4, r5, r6, lr}
 80070fc:	4d06      	ldr	r5, [pc, #24]	@ (8007118 <_sbrk_r+0x20>)
 80070fe:	0004      	movs	r4, r0
 8007100:	0008      	movs	r0, r1
 8007102:	602b      	str	r3, [r5, #0]
 8007104:	f7fb fdc0 	bl	8002c88 <_sbrk>
 8007108:	1c43      	adds	r3, r0, #1
 800710a:	d103      	bne.n	8007114 <_sbrk_r+0x1c>
 800710c:	682b      	ldr	r3, [r5, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d000      	beq.n	8007114 <_sbrk_r+0x1c>
 8007112:	6023      	str	r3, [r4, #0]
 8007114:	bd70      	pop	{r4, r5, r6, pc}
 8007116:	46c0      	nop			@ (mov r8, r8)
 8007118:	20002d18 	.word	0x20002d18

0800711c <memchr>:
 800711c:	b2c9      	uxtb	r1, r1
 800711e:	1882      	adds	r2, r0, r2
 8007120:	4290      	cmp	r0, r2
 8007122:	d101      	bne.n	8007128 <memchr+0xc>
 8007124:	2000      	movs	r0, #0
 8007126:	4770      	bx	lr
 8007128:	7803      	ldrb	r3, [r0, #0]
 800712a:	428b      	cmp	r3, r1
 800712c:	d0fb      	beq.n	8007126 <memchr+0xa>
 800712e:	3001      	adds	r0, #1
 8007130:	e7f6      	b.n	8007120 <memchr+0x4>

08007132 <memcpy>:
 8007132:	2300      	movs	r3, #0
 8007134:	b510      	push	{r4, lr}
 8007136:	429a      	cmp	r2, r3
 8007138:	d100      	bne.n	800713c <memcpy+0xa>
 800713a:	bd10      	pop	{r4, pc}
 800713c:	5ccc      	ldrb	r4, [r1, r3]
 800713e:	54c4      	strb	r4, [r0, r3]
 8007140:	3301      	adds	r3, #1
 8007142:	e7f8      	b.n	8007136 <memcpy+0x4>

08007144 <_realloc_r>:
 8007144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007146:	0006      	movs	r6, r0
 8007148:	000c      	movs	r4, r1
 800714a:	0015      	movs	r5, r2
 800714c:	2900      	cmp	r1, #0
 800714e:	d105      	bne.n	800715c <_realloc_r+0x18>
 8007150:	0011      	movs	r1, r2
 8007152:	f7ff fc55 	bl	8006a00 <_malloc_r>
 8007156:	0004      	movs	r4, r0
 8007158:	0020      	movs	r0, r4
 800715a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800715c:	2a00      	cmp	r2, #0
 800715e:	d103      	bne.n	8007168 <_realloc_r+0x24>
 8007160:	f7ff fbe2 	bl	8006928 <_free_r>
 8007164:	002c      	movs	r4, r5
 8007166:	e7f7      	b.n	8007158 <_realloc_r+0x14>
 8007168:	f000 f81c 	bl	80071a4 <_malloc_usable_size_r>
 800716c:	0007      	movs	r7, r0
 800716e:	4285      	cmp	r5, r0
 8007170:	d802      	bhi.n	8007178 <_realloc_r+0x34>
 8007172:	0843      	lsrs	r3, r0, #1
 8007174:	42ab      	cmp	r3, r5
 8007176:	d3ef      	bcc.n	8007158 <_realloc_r+0x14>
 8007178:	0029      	movs	r1, r5
 800717a:	0030      	movs	r0, r6
 800717c:	f7ff fc40 	bl	8006a00 <_malloc_r>
 8007180:	9001      	str	r0, [sp, #4]
 8007182:	2800      	cmp	r0, #0
 8007184:	d101      	bne.n	800718a <_realloc_r+0x46>
 8007186:	9c01      	ldr	r4, [sp, #4]
 8007188:	e7e6      	b.n	8007158 <_realloc_r+0x14>
 800718a:	002a      	movs	r2, r5
 800718c:	42bd      	cmp	r5, r7
 800718e:	d900      	bls.n	8007192 <_realloc_r+0x4e>
 8007190:	003a      	movs	r2, r7
 8007192:	0021      	movs	r1, r4
 8007194:	9801      	ldr	r0, [sp, #4]
 8007196:	f7ff ffcc 	bl	8007132 <memcpy>
 800719a:	0021      	movs	r1, r4
 800719c:	0030      	movs	r0, r6
 800719e:	f7ff fbc3 	bl	8006928 <_free_r>
 80071a2:	e7f0      	b.n	8007186 <_realloc_r+0x42>

080071a4 <_malloc_usable_size_r>:
 80071a4:	1f0b      	subs	r3, r1, #4
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	1f18      	subs	r0, r3, #4
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	da01      	bge.n	80071b2 <_malloc_usable_size_r+0xe>
 80071ae:	580b      	ldr	r3, [r1, r0]
 80071b0:	18c0      	adds	r0, r0, r3
 80071b2:	4770      	bx	lr

080071b4 <_init>:
 80071b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071b6:	46c0      	nop			@ (mov r8, r8)
 80071b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ba:	bc08      	pop	{r3}
 80071bc:	469e      	mov	lr, r3
 80071be:	4770      	bx	lr

080071c0 <_fini>:
 80071c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071c2:	46c0      	nop			@ (mov r8, r8)
 80071c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071c6:	bc08      	pop	{r3}
 80071c8:	469e      	mov	lr, r3
 80071ca:	4770      	bx	lr
